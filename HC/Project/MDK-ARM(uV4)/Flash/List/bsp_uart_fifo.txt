; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_uart_fifo.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_uart_fifo.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Include -I..\..\User -I..\..\User\bsp\inc -I..\..\User\bsp -I..\..\User\app\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -D__MICROLIB -D__UVISION_VERSION=527 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\bsp_uart_fifo.crf ..\..\User\bsp\src\bsp_uart_fifo.c]
                          THUMB

                          AREA ||i.ComToUart||, CODE, READONLY, ALIGN=2

                  ComToUart PROC
;;;89     */
;;;90     UART_T *ComToUart(COM_PORT_E _ucPort)
000000  4601              MOV      r1,r0
;;;91     {
;;;92     	if (_ucPort == COM1)
000002  b909              CBNZ     r1,|L1.8|
;;;93     	{
;;;94     		#if UART1_FIFO_EN == 1
;;;95     			return &g_tUart1;
000004  4809              LDR      r0,|L1.44|
                  |L1.6|
;;;96     		#else
;;;97     			return 0;
;;;98     		#endif
;;;99     	}
;;;100    	else if (_ucPort == COM2)
;;;101    	{
;;;102    		#if UART2_FIFO_EN == 1
;;;103    			return &g_tUart2;
;;;104    		#else
;;;105    			return;
;;;106    		#endif
;;;107    	}
;;;108    	else if (_ucPort == COM3)
;;;109    	{
;;;110    		#if UART3_FIFO_EN == 1
;;;111    			return &g_tUart3;
;;;112    		#else
;;;113    			return 0;
;;;114    		#endif
;;;115    	}
;;;116    	else if (_ucPort == COM4)
;;;117    	{
;;;118    		#if UART4_FIFO_EN == 1
;;;119    			return &g_tUart4;
;;;120    		#else
;;;121    			return 0;
;;;122    		#endif
;;;123    	}
;;;124    	else if (_ucPort == COM5)
;;;125    	{
;;;126    		#if UART5_FIFO_EN == 1
;;;127    			return &g_tUart5;
;;;128    		#else
;;;129    			return 0;
;;;130    		#endif
;;;131    	}
;;;132    	else
;;;133    	{
;;;134    		/* 不做任何处理 */
;;;135    		return 0;
;;;136    	}
;;;137    }
000006  4770              BX       lr
                  |L1.8|
000008  2901              CMP      r1,#1                 ;100
00000a  d101              BNE      |L1.16|
00000c  4808              LDR      r0,|L1.48|
00000e  e7fa              B        |L1.6|
                  |L1.16|
000010  2902              CMP      r1,#2                 ;108
000012  d101              BNE      |L1.24|
000014  4807              LDR      r0,|L1.52|
000016  e7f6              B        |L1.6|
                  |L1.24|
000018  2903              CMP      r1,#3                 ;116
00001a  d101              BNE      |L1.32|
00001c  2000              MOVS     r0,#0                 ;121
00001e  e7f2              B        |L1.6|
                  |L1.32|
000020  2904              CMP      r1,#4                 ;124
000022  d101              BNE      |L1.40|
000024  2000              MOVS     r0,#0                 ;129
000026  e7ee              B        |L1.6|
                  |L1.40|
000028  2000              MOVS     r0,#0                 ;135
00002a  e7ec              B        |L1.6|
;;;138    
                          ENDP

                  |L1.44|
                          DCD      g_tUart1
                  |L1.48|
                          DCD      g_tUart2
                  |L1.52|
                          DCD      g_tUart3

                          AREA ||i.ConfigUartNVIC||, CODE, READONLY, ALIGN=1

                  ConfigUartNVIC PROC
;;;778    */
;;;779    static void ConfigUartNVIC(void)
000000  b508              PUSH     {r3,lr}
;;;780    {
;;;781    	NVIC_InitTypeDef NVIC_InitStructure;
;;;782    
;;;783    	/* Configure the NVIC Preemption Priority Bits */
;;;784    	/*	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_0);  --- 在 bsp.c 中 bsp_Init() 中配置中断优先级组 */
;;;785    
;;;786    #if UART1_FIFO_EN == 1
;;;787    	/* 使能串口1中断 */
;;;788    	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
000002  2025              MOVS     r0,#0x25
000004  f88d0000          STRB     r0,[sp,#0]
;;;789    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
000008  2000              MOVS     r0,#0
00000a  f88d0002          STRB     r0,[sp,#2]
;;;790    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
00000e  2001              MOVS     r0,#1
000010  f88d0003          STRB     r0,[sp,#3]
;;;791    	NVIC_Init(&NVIC_InitStructure);
000014  4668              MOV      r0,sp
000016  f7fffffe          BL       NVIC_Init
;;;792    #endif
;;;793    
;;;794    #if UART2_FIFO_EN == 1
;;;795    	/* 使能串口2中断 */
;;;796    	NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
00001a  2026              MOVS     r0,#0x26
00001c  f88d0000          STRB     r0,[sp,#0]
;;;797    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
000020  2001              MOVS     r0,#1
000022  f88d0002          STRB     r0,[sp,#2]
;;;798    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
000026  f88d0003          STRB     r0,[sp,#3]
;;;799    	NVIC_Init(&NVIC_InitStructure);
00002a  4668              MOV      r0,sp
00002c  f7fffffe          BL       NVIC_Init
;;;800    #endif
;;;801    
;;;802    #if UART3_FIFO_EN == 1
;;;803    	/* 使能串口3中断t */
;;;804    	NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn;
000030  2027              MOVS     r0,#0x27
000032  f88d0000          STRB     r0,[sp,#0]
;;;805    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 2;
000036  2002              MOVS     r0,#2
000038  f88d0002          STRB     r0,[sp,#2]
;;;806    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
00003c  2001              MOVS     r0,#1
00003e  f88d0003          STRB     r0,[sp,#3]
;;;807    	NVIC_Init(&NVIC_InitStructure);
000042  4668              MOV      r0,sp
000044  f7fffffe          BL       NVIC_Init
;;;808    #endif
;;;809    
;;;810    #if UART4_FIFO_EN == 1
;;;811    	/* 使能串口4中断t */
;;;812    	NVIC_InitStructure.NVIC_IRQChannel = UART4_IRQn;
;;;813    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;
;;;814    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
;;;815    	NVIC_Init(&NVIC_InitStructure);
;;;816    #endif
;;;817    
;;;818    #if UART5_FIFO_EN == 1
;;;819    	/* 使能串口5中断t */
;;;820    	NVIC_InitStructure.NVIC_IRQChannel = UART5_IRQn;
;;;821    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 4;
;;;822    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
;;;823    	NVIC_Init(&NVIC_InitStructure);
;;;824    #endif
;;;825    
;;;826    #if UART6_FIFO_EN == 1
;;;827    	/* 使能串口6中断t */
;;;828    	NVIC_InitStructure.NVIC_IRQChannel = USART6_IRQn;
;;;829    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 5;
;;;830    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
;;;831    	NVIC_Init(&NVIC_InitStructure);
;;;832    #endif
;;;833    }
000048  bd08              POP      {r3,pc}
;;;834    
                          ENDP


                          AREA ||i.InitHardUart||, CODE, READONLY, ALIGN=2

                  InitHardUart PROC
;;;536    */
;;;537    static void InitHardUart(void)
000000  b500              PUSH     {lr}
;;;538    {
000002  b085              SUB      sp,sp,#0x14
;;;539    	GPIO_InitTypeDef GPIO_InitStructure;
;;;540    	USART_InitTypeDef USART_InitStructure;
;;;541    
;;;542    #if UART1_FIFO_EN == 1		/* 串口1 TX = PA9   RX = PA10 或 TX = PB6   RX = PB7*/
;;;543    
;;;544    	/* 第1步：打开GPIO和USART部件的时钟 */
;;;545    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
000004  2101              MOVS     r1,#1
000006  2005              MOVS     r0,#5
000008  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;546    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
00000c  2101              MOVS     r1,#1
00000e  0388              LSLS     r0,r1,#14
000010  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;547    
;;;548    	/* 第2步：将USART Tx的GPIO配置为推挽复用模式 */
;;;549    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
000014  f44f7000          MOV      r0,#0x200
000018  f8ad0010          STRH     r0,[sp,#0x10]
;;;550    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
00001c  2018              MOVS     r0,#0x18
00001e  f88d0013          STRB     r0,[sp,#0x13]
;;;551    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000022  2003              MOVS     r0,#3
000024  f88d0012          STRB     r0,[sp,#0x12]
;;;552    	GPIO_Init(GPIOA, &GPIO_InitStructure);
000028  a904              ADD      r1,sp,#0x10
00002a  4868              LDR      r0,|L3.460|
00002c  f7fffffe          BL       GPIO_Init
;;;553    
;;;554    	/* 第3步：将USART Rx的GPIO配置为浮空输入模式
;;;555    		由于CPU复位后，GPIO缺省都是浮空输入模式，因此下面这个步骤不是必须的
;;;556    		但是，我还是建议加上便于阅读，并且防止其它地方修改了这个口线的设置参数
;;;557    	*/
;;;558    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
000030  f44f6080          MOV      r0,#0x400
000034  f8ad0010          STRH     r0,[sp,#0x10]
;;;559    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
000038  2004              MOVS     r0,#4
00003a  f88d0013          STRB     r0,[sp,#0x13]
;;;560    	GPIO_Init(GPIOA, &GPIO_InitStructure);
00003e  a904              ADD      r1,sp,#0x10
000040  4862              LDR      r0,|L3.460|
000042  f7fffffe          BL       GPIO_Init
;;;561    	
;;;562    	/* 第4步： 配置串口硬件参数 */
;;;563    	USART_InitStructure.USART_BaudRate = UART1_BAUD;	/* 波特率 */
000046  f44f30e1          MOV      r0,#0x1c200
00004a  9000              STR      r0,[sp,#0]
;;;564    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
00004c  2000              MOVS     r0,#0
00004e  f8ad0004          STRH     r0,[sp,#4]
;;;565    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
000052  f8ad0006          STRH     r0,[sp,#6]
;;;566    	USART_InitStructure.USART_Parity = USART_Parity_No ;
000056  f8ad0008          STRH     r0,[sp,#8]
;;;567    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
00005a  f8ad000c          STRH     r0,[sp,#0xc]
;;;568    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
00005e  200c              MOVS     r0,#0xc
000060  f8ad000a          STRH     r0,[sp,#0xa]
;;;569    	USART_Init(USART1, &USART_InitStructure);
000064  4669              MOV      r1,sp
000066  485a              LDR      r0,|L3.464|
000068  f7fffffe          BL       USART_Init
;;;570    
;;;571    	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);	/* 使能接收中断 */
00006c  2201              MOVS     r2,#1
00006e  f2405125          MOV      r1,#0x525
000072  4857              LDR      r0,|L3.464|
000074  f7fffffe          BL       USART_ITConfig
;;;572    	/*
;;;573    		USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
;;;574    		注意: 不要在此处打开发送中断
;;;575    		发送中断使能在SendUart()函数打开
;;;576    	*/
;;;577    	USART_Cmd(USART1, ENABLE);		/* 使能串口 */
000078  2101              MOVS     r1,#1
00007a  4855              LDR      r0,|L3.464|
00007c  f7fffffe          BL       USART_Cmd
;;;578    
;;;579    	/* CPU的小缺陷：串口配置好，如果直接Send，则第1个字节发送不出去
;;;580    		如下语句解决第1个字节无法正确发送出去的问题 */
;;;581    	USART_ClearFlag(USART1, USART_FLAG_TC);     /* 清发送完成标志，Transmission Complete flag */
000080  2140              MOVS     r1,#0x40
000082  4853              LDR      r0,|L3.464|
000084  f7fffffe          BL       USART_ClearFlag
;;;582    #endif
;;;583    
;;;584    #if UART2_FIFO_EN == 1		/* 串口2 TX = PA2， RX = PA3  */
;;;585    	/* 第1步：打开GPIO和USART部件的时钟 */
;;;586    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
000088  2101              MOVS     r1,#1
00008a  2005              MOVS     r0,#5
00008c  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;587    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
000090  2101              MOVS     r1,#1
000092  0448              LSLS     r0,r1,#17
000094  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;588    
;;;589    	/* 第2步：将USART Tx的GPIO配置为推挽复用模式 */
;;;590    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
000098  2004              MOVS     r0,#4
00009a  f8ad0010          STRH     r0,[sp,#0x10]
;;;591    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
00009e  2018              MOVS     r0,#0x18
0000a0  f88d0013          STRB     r0,[sp,#0x13]
;;;592    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
0000a4  2003              MOVS     r0,#3
0000a6  f88d0012          STRB     r0,[sp,#0x12]
;;;593    	GPIO_Init(GPIOA, &GPIO_InitStructure);
0000aa  a904              ADD      r1,sp,#0x10
0000ac  4847              LDR      r0,|L3.460|
0000ae  f7fffffe          BL       GPIO_Init
;;;594    
;;;595    	/* 第3步：将USART Rx的GPIO配置为浮空输入模式
;;;596    		由于CPU复位后，GPIO缺省都是浮空输入模式，因此下面这个步骤不是必须的
;;;597    		但是，我还是建议加上便于阅读，并且防止其它地方修改了这个口线的设置参数
;;;598    	*/
;;;599    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
0000b2  2008              MOVS     r0,#8
0000b4  f8ad0010          STRH     r0,[sp,#0x10]
;;;600    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
0000b8  2004              MOVS     r0,#4
0000ba  f88d0013          STRB     r0,[sp,#0x13]
;;;601    	GPIO_Init(GPIOA, &GPIO_InitStructure);
0000be  a904              ADD      r1,sp,#0x10
0000c0  4842              LDR      r0,|L3.460|
0000c2  f7fffffe          BL       GPIO_Init
;;;602    	/*  第3步已经做了，因此这步可以不做
;;;603    		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;604    	*/
;;;605    	GPIO_Init(GPIOA, &GPIO_InitStructure);
0000c6  a904              ADD      r1,sp,#0x10
0000c8  4840              LDR      r0,|L3.460|
0000ca  f7fffffe          BL       GPIO_Init
;;;606    
;;;607    	/* 第4步： 配置串口硬件参数 */
;;;608    	USART_InitStructure.USART_BaudRate = UART2_BAUD;	/* 波特率 */
0000ce  f44f4096          MOV      r0,#0x4b00
0000d2  9000              STR      r0,[sp,#0]
;;;609    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
0000d4  2000              MOVS     r0,#0
0000d6  f8ad0004          STRH     r0,[sp,#4]
;;;610    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
0000da  f8ad0006          STRH     r0,[sp,#6]
;;;611    	USART_InitStructure.USART_Parity = USART_Parity_No ;
0000de  f8ad0008          STRH     r0,[sp,#8]
;;;612    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
0000e2  f8ad000c          STRH     r0,[sp,#0xc]
;;;613    	USART_InitStructure.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;		/* 仅选择接收模式 */
0000e6  200c              MOVS     r0,#0xc
0000e8  f8ad000a          STRH     r0,[sp,#0xa]
;;;614    	USART_Init(USART2, &USART_InitStructure);
0000ec  4669              MOV      r1,sp
0000ee  4839              LDR      r0,|L3.468|
0000f0  f7fffffe          BL       USART_Init
;;;615    
;;;616    	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);	/* 使能接收中断 */
0000f4  2201              MOVS     r2,#1
0000f6  f2405125          MOV      r1,#0x525
0000fa  4836              LDR      r0,|L3.468|
0000fc  f7fffffe          BL       USART_ITConfig
;;;617    	/*
;;;618    		USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
;;;619    		注意: 不要在此处打开发送中断
;;;620    		发送中断使能在SendUart()函数打开
;;;621    	*/
;;;622    	USART_Cmd(USART2, ENABLE);		/* 使能串口 */
000100  2101              MOVS     r1,#1
000102  4834              LDR      r0,|L3.468|
000104  f7fffffe          BL       USART_Cmd
;;;623    
;;;624    	/* CPU的小缺陷：串口配置好，如果直接Send，则第1个字节发送不出去
;;;625    		如下语句解决第1个字节无法正确发送出去的问题 */
;;;626    	USART_ClearFlag(USART2, USART_FLAG_TC);     /* 清发送完成标志，Transmission Complete flag */
000108  2140              MOVS     r1,#0x40
00010a  4832              LDR      r0,|L3.468|
00010c  f7fffffe          BL       USART_ClearFlag
;;;627    #endif
;;;628    
;;;629    #if UART3_FIFO_EN == 1			/* 串口3 TX = PB10   RX = PB11 */
;;;630    
;;;631    	/* 配置 PB2为推挽输出，用于切换 RS485芯片的收发状态 */
;;;632    	{
;;;633    		RCC_APB2PeriphClockCmd(RCC_RS485_TXEN, ENABLE);
000110  2101              MOVS     r1,#1
000112  2008              MOVS     r0,#8
000114  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;634    
;;;635    		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
000118  2010              MOVS     r0,#0x10
00011a  f88d0013          STRB     r0,[sp,#0x13]
;;;636    		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00011e  2003              MOVS     r0,#3
000120  f88d0012          STRB     r0,[sp,#0x12]
;;;637    		GPIO_InitStructure.GPIO_Pin = PIN_RS485_TXEN;
000124  2020              MOVS     r0,#0x20
000126  f8ad0010          STRH     r0,[sp,#0x10]
;;;638    		GPIO_Init(PORT_RS485_TXEN, &GPIO_InitStructure);
00012a  a904              ADD      r1,sp,#0x10
00012c  482a              LDR      r0,|L3.472|
00012e  f7fffffe          BL       GPIO_Init
;;;639    	}
;;;640    
;;;641    	/* 第1步： 开启GPIO和UART时钟 */
;;;642    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB | RCC_APB2Periph_AFIO, ENABLE);
000132  2101              MOVS     r1,#1
000134  2009              MOVS     r0,#9
000136  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;643    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
00013a  2101              MOVS     r1,#1
00013c  0488              LSLS     r0,r1,#18
00013e  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;644    
;;;645    	/* 第2步：将USART Tx的GPIO配置为推挽复用模式 */
;;;646    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
000142  f44f6080          MOV      r0,#0x400
000146  f8ad0010          STRH     r0,[sp,#0x10]
;;;647    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
00014a  2018              MOVS     r0,#0x18
00014c  f88d0013          STRB     r0,[sp,#0x13]
;;;648    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000150  2003              MOVS     r0,#3
000152  f88d0012          STRB     r0,[sp,#0x12]
;;;649    	GPIO_Init(GPIOB, &GPIO_InitStructure);
000156  a904              ADD      r1,sp,#0x10
000158  481f              LDR      r0,|L3.472|
00015a  f7fffffe          BL       GPIO_Init
;;;650    
;;;651    	/* 第3步：将USART Rx的GPIO配置为浮空输入模式
;;;652    		由于CPU复位后，GPIO缺省都是浮空输入模式，因此下面这个步骤不是必须的
;;;653    		但是，我还是建议加上便于阅读，并且防止其它地方修改了这个口线的设置参数
;;;654    	*/
;;;655    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
00015e  f44f6000          MOV      r0,#0x800
000162  f8ad0010          STRH     r0,[sp,#0x10]
;;;656    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
000166  2004              MOVS     r0,#4
000168  f88d0013          STRB     r0,[sp,#0x13]
;;;657    	GPIO_Init(GPIOB, &GPIO_InitStructure);
00016c  a904              ADD      r1,sp,#0x10
00016e  481a              LDR      r0,|L3.472|
000170  f7fffffe          BL       GPIO_Init
;;;658    	/*  第3步已经做了，因此这步可以不做
;;;659    		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;660    	*/
;;;661    	GPIO_Init(GPIOB, &GPIO_InitStructure);
000174  a904              ADD      r1,sp,#0x10
000176  4818              LDR      r0,|L3.472|
000178  f7fffffe          BL       GPIO_Init
;;;662    
;;;663    	/* 第4步： 配置串口硬件参数 */
;;;664    	USART_InitStructure.USART_BaudRate = UART3_BAUD;	/* 波特率 */
00017c  f44f5016          MOV      r0,#0x2580
000180  9000              STR      r0,[sp,#0]
;;;665    	//USART_InitStructure.USART_WordLength = USART_WordLength_8b;
;;;666        USART_InitStructure.USART_WordLength = USART_WordLength_9b;
000182  f44f5080          MOV      r0,#0x1000
000186  f8ad0004          STRH     r0,[sp,#4]
;;;667    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
00018a  2000              MOVS     r0,#0
00018c  f8ad0006          STRH     r0,[sp,#6]
;;;668    	//USART_InitStructure.USART_Parity = USART_Parity_No ;
;;;669        USART_InitStructure.USART_Parity = USART_Parity_Even ;
000190  f44f6080          MOV      r0,#0x400
000194  f8ad0008          STRH     r0,[sp,#8]
;;;670    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
000198  2000              MOVS     r0,#0
00019a  f8ad000c          STRH     r0,[sp,#0xc]
;;;671    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
00019e  200c              MOVS     r0,#0xc
0001a0  f8ad000a          STRH     r0,[sp,#0xa]
;;;672    	USART_Init(USART3, &USART_InitStructure);
0001a4  4669              MOV      r1,sp
0001a6  480d              LDR      r0,|L3.476|
0001a8  f7fffffe          BL       USART_Init
;;;673    
;;;674    	USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);	/* 使能接收中断 */
0001ac  2201              MOVS     r2,#1
0001ae  f2405125          MOV      r1,#0x525
0001b2  480a              LDR      r0,|L3.476|
0001b4  f7fffffe          BL       USART_ITConfig
;;;675    	/*
;;;676    		USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
;;;677    		注意: 不要在此处打开发送中断
;;;678    		发送中断使能在SendUart()函数打开
;;;679    	*/
;;;680    	USART_Cmd(USART3, ENABLE);		/* 使能串口 */
0001b8  2101              MOVS     r1,#1
0001ba  4808              LDR      r0,|L3.476|
0001bc  f7fffffe          BL       USART_Cmd
;;;681    
;;;682    	/* CPU的小缺陷：串口配置好，如果直接Send，则第1个字节发送不出去
;;;683    		如下语句解决第1个字节无法正确发送出去的问题 */
;;;684    	USART_ClearFlag(USART3, USART_FLAG_TC);     /* 清发送完成标志，Transmission Complete flag */
0001c0  2140              MOVS     r1,#0x40
0001c2  4806              LDR      r0,|L3.476|
0001c4  f7fffffe          BL       USART_ClearFlag
;;;685    #endif
;;;686    
;;;687    #if UART4_FIFO_EN == 1			/* 串口4 TX = PC10   RX = PC11 */
;;;688    	/* 第1步： 开启GPIO和UART时钟 */
;;;689    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC | RCC_APB2Periph_AFIO, ENABLE);
;;;690    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4, ENABLE);
;;;691    
;;;692    	/* 第2步：将USART Tx的GPIO配置为推挽复用模式 */
;;;693    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
;;;694    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
;;;695    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;696    	GPIO_Init(GPIOC, &GPIO_InitStructure);
;;;697    
;;;698    	/* 第3步：将USART Rx的GPIO配置为浮空输入模式
;;;699    		由于CPU复位后，GPIO缺省都是浮空输入模式，因此下面这个步骤不是必须的
;;;700    		但是，我还是建议加上便于阅读，并且防止其它地方修改了这个口线的设置参数
;;;701    	*/
;;;702    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
;;;703    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
;;;704    	GPIO_Init(GPIOC, &GPIO_InitStructure);
;;;705    
;;;706    	/* 第4步： 配置串口硬件参数 */
;;;707    	USART_InitStructure.USART_BaudRate = UART4_BAUD;	/* 波特率 */
;;;708    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
;;;709    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
;;;710    	USART_InitStructure.USART_Parity = USART_Parity_No ;
;;;711    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
;;;712    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
;;;713    	USART_Init(UART4, &USART_InitStructure);
;;;714    
;;;715    	USART_ITConfig(UART4, USART_IT_RXNE, ENABLE);	/* 使能接收中断 */
;;;716    	/*
;;;717    		USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
;;;718    		注意: 不要在此处打开发送中断
;;;719    		发送中断使能在SendUart()函数打开
;;;720    	*/
;;;721    	USART_Cmd(UART4, ENABLE);		/* 使能串口 */
;;;722    
;;;723    	/* CPU的小缺陷：串口配置好，如果直接Send，则第1个字节发送不出去
;;;724    		如下语句解决第1个字节无法正确发送出去的问题 */
;;;725    	USART_ClearFlag(UART4, USART_FLAG_TC);     /* 清发送完成标志，Transmission Complete flag */
;;;726    #endif
;;;727    
;;;728    #if UART5_FIFO_EN == 1			/* 串口5 TX = PC12   RX = PD2 */
;;;729    	/* 第1步： 开启GPIO和UART时钟 */
;;;730    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC | RCC_APB2Periph_GPIOD | RCC_APB2Periph_AFIO, ENABLE);
;;;731    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART5, ENABLE);
;;;732    
;;;733    	/* 第2步：将USART Tx的GPIO配置为推挽复用模式 */
;;;734    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
;;;735    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
;;;736    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;737    	GPIO_Init(GPIOC, &GPIO_InitStructure);
;;;738    
;;;739    	/* 第3步：将USART Rx的GPIO配置为浮空输入模式
;;;740    		由于CPU复位后，GPIO缺省都是浮空输入模式，因此下面这个步骤不是必须的
;;;741    		但是，我还是建议加上便于阅读，并且防止其它地方修改了这个口线的设置参数
;;;742    	*/
;;;743    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
;;;744    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
;;;745    	GPIO_Init(GPIOD, &GPIO_InitStructure);
;;;746    
;;;747    
;;;748    	/* 第4步： 配置串口硬件参数 */
;;;749    	USART_InitStructure.USART_BaudRate = UART5_BAUD;	/* 波特率 */
;;;750    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
;;;751    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
;;;752    	USART_InitStructure.USART_Parity = USART_Parity_No ;
;;;753    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
;;;754    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
;;;755    	USART_Init(UART5, &USART_InitStructure);
;;;756    
;;;757    	USART_ITConfig(UART5, USART_IT_RXNE, ENABLE);	/* 使能接收中断 */
;;;758    	/*
;;;759    		USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
;;;760    		注意: 不要在此处打开发送中断
;;;761    		发送中断使能在SendUart()函数打开
;;;762    	*/
;;;763    	USART_Cmd(UART5, ENABLE);		/* 使能串口 */
;;;764    
;;;765    	/* CPU的小缺陷：串口配置好，如果直接Send，则第1个字节发送不出去
;;;766    		如下语句解决第1个字节无法正确发送出去的问题 */
;;;767    	USART_ClearFlag(UART5, USART_FLAG_TC);     /* 清发送完成标志，Transmission Complete flag */
;;;768    #endif
;;;769    }
0001c8  b005              ADD      sp,sp,#0x14
0001ca  bd00              POP      {pc}
;;;770    
                          ENDP

                  |L3.460|
                          DCD      0x40010800
                  |L3.464|
                          DCD      0x40013800
                  |L3.468|
                          DCD      0x40004400
                  |L3.472|
                          DCD      0x40010c00
                  |L3.476|
                          DCD      0x40004800

                          AREA ||i.RS485_InitTXE||, CODE, READONLY, ALIGN=2

                  RS485_InitTXE PROC
;;;303    */
;;;304    void RS485_InitTXE(void)
000000  b508              PUSH     {r3,lr}
;;;305    {
;;;306    	GPIO_InitTypeDef GPIO_InitStructure;
;;;307    
;;;308    	RCC_APB2PeriphClockCmd(RCC_RS485_TXEN, ENABLE);	/* 打开GPIO时钟 */
000002  2101              MOVS     r1,#1
000004  2008              MOVS     r0,#8
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;309    
;;;310    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00000a  2003              MOVS     r0,#3
00000c  f88d0002          STRB     r0,[sp,#2]
;;;311    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;	/* 推挽输出模式 */
000010  2010              MOVS     r0,#0x10
000012  f88d0003          STRB     r0,[sp,#3]
;;;312    	GPIO_InitStructure.GPIO_Pin = PIN_RS485_TXEN;
000016  2020              MOVS     r0,#0x20
000018  f8ad0000          STRH     r0,[sp,#0]
;;;313    	GPIO_Init(PORT_RS485_TXEN, &GPIO_InitStructure);
00001c  4669              MOV      r1,sp
00001e  4802              LDR      r0,|L4.40|
000020  f7fffffe          BL       GPIO_Init
;;;314    }
000024  bd08              POP      {r3,pc}
;;;315    
                          ENDP

000026  0000              DCW      0x0000
                  |L4.40|
                          DCD      0x40010c00

                          AREA ||i.RS485_ReciveNew||, CODE, READONLY, ALIGN=1

                  RS485_ReciveNew PROC
;;;403    extern void MODS_ReciveNew(uint8_t _byte);
;;;404    void RS485_ReciveNew(uint8_t _byte)
000000  b510              PUSH     {r4,lr}
;;;405    {
000002  4604              MOV      r4,r0
;;;406    	MODS_ReciveNew(_byte);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       MODS_ReciveNew
;;;407    }
00000a  bd10              POP      {r4,pc}
;;;408    
                          ENDP


                          AREA ||i.RS485_SendBefor||, CODE, READONLY, ALIGN=2

                  RS485_SendBefor PROC
;;;346    */
;;;347    void RS485_SendBefor(void)
000000  2020              MOVS     r0,#0x20
;;;348    {
;;;349    	RS485_TX_EN();	/* 切换RS485收发芯片为发送模式 */
000002  4901              LDR      r1,|L6.8|
000004  6008              STR      r0,[r1,#0]
;;;350    }
000006  4770              BX       lr
;;;351    
                          ENDP

                  |L6.8|
                          DCD      0x40010c14

                          AREA ||i.RS485_SendBuf||, CODE, READONLY, ALIGN=1

                  RS485_SendBuf PROC
;;;374    */
;;;375    void RS485_SendBuf(uint8_t *_ucaBuf, uint16_t _usLen)
000000  b570              PUSH     {r4-r6,lr}
;;;376    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;377    	comSendBuf(COM3, _ucaBuf, _usLen);
000006  462a              MOV      r2,r5
000008  4621              MOV      r1,r4
00000a  2002              MOVS     r0,#2
00000c  f7fffffe          BL       comSendBuf
;;;378    }
000010  bd70              POP      {r4-r6,pc}
;;;379    
                          ENDP


                          AREA ||i.RS485_SendOver||, CODE, READONLY, ALIGN=2

                  RS485_SendOver PROC
;;;360    */
;;;361    void RS485_SendOver(void)
000000  2020              MOVS     r0,#0x20
;;;362    {
;;;363    	RS485_RX_EN();	/* 切换RS485收发芯片为接收模式 */
000002  4901              LDR      r1,|L8.8|
000004  6008              STR      r0,[r1,#0]
;;;364    }
000006  4770              BX       lr
;;;365    
                          ENDP

                  |L8.8|
                          DCD      0x40010c10

                          AREA ||i.RS485_SendStr||, CODE, READONLY, ALIGN=1

                  RS485_SendStr PROC
;;;389    */
;;;390    void RS485_SendStr(char *_pBuf)
000000  b570              PUSH     {r4-r6,lr}
;;;391    {
000002  4604              MOV      r4,r0
;;;392    	RS485_SendBuf((uint8_t *)_pBuf, strlen(_pBuf));
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       strlen
00000a  b285              UXTH     r5,r0
00000c  4629              MOV      r1,r5
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       RS485_SendBuf
;;;393    }
000014  bd70              POP      {r4-r6,pc}
;;;394    
                          ENDP


                          AREA ||i.UART2_ReciveNew||, CODE, READONLY, ALIGN=1

                  UART2_ReciveNew PROC
;;;409    
;;;410    void UART2_ReciveNew(uint8_t data)
000000  b510              PUSH     {r4,lr}
;;;411    {
000002  4604              MOV      r4,r0
;;;412         HC_ReciveNew(data) ;          
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       HC_ReciveNew
;;;413    }
00000a  bd10              POP      {r4,pc}
;;;414    /*
                          ENDP


                          AREA ||i.USART1_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART1_IRQHandler PROC
;;;1046   #if UART1_FIFO_EN == 1
;;;1047   void USART1_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;1048   {
;;;1049   	UartIRQ(&g_tUart1);
000002  4802              LDR      r0,|L11.12|
000004  f7fffffe          BL       UartIRQ
;;;1050   }
000008  bd10              POP      {r4,pc}
;;;1051   #endif
                          ENDP

00000a  0000              DCW      0x0000
                  |L11.12|
                          DCD      g_tUart1

                          AREA ||i.USART2_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART2_IRQHandler PROC
;;;1053   #if UART2_FIFO_EN == 1
;;;1054   void USART2_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;1055   {
;;;1056   	UartIRQ(&g_tUart2);
000002  4802              LDR      r0,|L12.12|
000004  f7fffffe          BL       UartIRQ
;;;1057   }
000008  bd10              POP      {r4,pc}
;;;1058   #endif
                          ENDP

00000a  0000              DCW      0x0000
                  |L12.12|
                          DCD      g_tUart2

                          AREA ||i.USART3_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART3_IRQHandler PROC
;;;1060   #if UART3_FIFO_EN == 1
;;;1061   void USART3_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;1062   {
;;;1063   	UartIRQ(&g_tUart3);
000002  4802              LDR      r0,|L13.12|
000004  f7fffffe          BL       UartIRQ
;;;1064   }
000008  bd10              POP      {r4,pc}
;;;1065   #endif
                          ENDP

00000a  0000              DCW      0x0000
                  |L13.12|
                          DCD      g_tUart3

                          AREA ||i.UartGetChar||, CODE, READONLY, ALIGN=1

                  UartGetChar PROC
;;;914    */
;;;915    static uint8_t UartGetChar(UART_T *_pUart, uint8_t *_pByte)
000000  b570              PUSH     {r4-r6,lr}
;;;916    {   
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;917    	uint16_t usCount;
;;;918    
;;;919    	/* usRxWrite 变量在中断函数中被改写，主程序读取该变量时，必须进行临界区保护 */
;;;920    	DISABLE_INT();
000006  2001              MOVS     r0,#1
000008  f7fffffe          BL       __set_PRIMASK
;;;921    	usCount = _pUart->usRxCount;
00000c  8b66              LDRH     r6,[r4,#0x1a]
;;;922    	ENABLE_INT();
00000e  2000              MOVS     r0,#0
000010  f7fffffe          BL       __set_PRIMASK
;;;923    
;;;924    	/* 如果读和写索引相同，则返回0 */
;;;925    	//if (_pUart->usRxRead == usRxWrite)
;;;926    	if (usCount == 0)	/* 已经没有数据 */
000014  b90e              CBNZ     r6,|L14.26|
;;;927    	{
;;;928    		return 0;
000016  2000              MOVS     r0,#0
                  |L14.24|
;;;929    	}
;;;930    	else
;;;931    	{
;;;932    		*_pByte = _pUart->pRxBuf[_pUart->usRxRead];		/* 从串口接收FIFO取1个数据 */
;;;933    
;;;934    		/* 改写FIFO读索引 */
;;;935    		DISABLE_INT();
;;;936    		if (++_pUart->usRxRead >= _pUart->usRxBufSize)
;;;937    		{
;;;938    			_pUart->usRxRead = 0;
;;;939    		}
;;;940    		_pUart->usRxCount--;
;;;941    		ENABLE_INT();
;;;942    		return 1;
;;;943    	}
;;;944    }
000018  bd70              POP      {r4-r6,pc}
                  |L14.26|
00001a  8b21              LDRH     r1,[r4,#0x18]         ;932
00001c  68a0              LDR      r0,[r4,#8]            ;932
00001e  5c40              LDRB     r0,[r0,r1]            ;932
000020  7028              STRB     r0,[r5,#0]            ;932
000022  2001              MOVS     r0,#1                 ;935
000024  f7fffffe          BL       __set_PRIMASK
000028  8b20              LDRH     r0,[r4,#0x18]         ;936
00002a  1c40              ADDS     r0,r0,#1              ;936
00002c  b280              UXTH     r0,r0                 ;936
00002e  8320              STRH     r0,[r4,#0x18]         ;936
000030  89e1              LDRH     r1,[r4,#0xe]          ;936
000032  4288              CMP      r0,r1                 ;936
000034  db01              BLT      |L14.58|
000036  2000              MOVS     r0,#0                 ;938
000038  8320              STRH     r0,[r4,#0x18]         ;938
                  |L14.58|
00003a  8b60              LDRH     r0,[r4,#0x1a]         ;940
00003c  1e40              SUBS     r0,r0,#1              ;940
00003e  8360              STRH     r0,[r4,#0x1a]         ;940
000040  2000              MOVS     r0,#0                 ;941
000042  f7fffffe          BL       __set_PRIMASK
000046  2001              MOVS     r0,#1                 ;942
000048  e7e6              B        |L14.24|
;;;945    
                          ENDP


                          AREA ||i.UartIRQ||, CODE, READONLY, ALIGN=1

                  UartIRQ PROC
;;;953    */
;;;954    static void UartIRQ(UART_T *_pUart)
000000  b570              PUSH     {r4-r6,lr}
;;;955    {
000002  4604              MOV      r4,r0
;;;956    	/* 处理接收中断  */
;;;957    	if (USART_GetITStatus(_pUart->uart, USART_IT_RXNE) != RESET)
000004  f2405125          MOV      r1,#0x525
000008  6820              LDR      r0,[r4,#0]
00000a  f7fffffe          BL       USART_GetITStatus
00000e  b1e0              CBZ      r0,|L15.74|
;;;958    	{
;;;959    		/* 从串口接收数据寄存器读取数据存放到接收FIFO */
;;;960    		uint8_t ch;
;;;961    
;;;962    		ch = USART_ReceiveData(_pUart->uart);
000010  6820              LDR      r0,[r4,#0]
000012  f7fffffe          BL       USART_ReceiveData
000016  b2c5              UXTB     r5,r0
;;;963    		_pUart->pRxBuf[_pUart->usRxWrite] = ch;
000018  8ae1              LDRH     r1,[r4,#0x16]
00001a  68a0              LDR      r0,[r4,#8]
00001c  5445              STRB     r5,[r0,r1]
;;;964    		if (++_pUart->usRxWrite >= _pUart->usRxBufSize)
00001e  8ae0              LDRH     r0,[r4,#0x16]
000020  1c40              ADDS     r0,r0,#1
000022  b280              UXTH     r0,r0
000024  82e0              STRH     r0,[r4,#0x16]
000026  89e1              LDRH     r1,[r4,#0xe]
000028  4288              CMP      r0,r1
00002a  db01              BLT      |L15.48|
;;;965    		{
;;;966    			_pUart->usRxWrite = 0;
00002c  2000              MOVS     r0,#0
00002e  82e0              STRH     r0,[r4,#0x16]
                  |L15.48|
;;;967    		}
;;;968    		if (_pUart->usRxCount < _pUart->usRxBufSize)
000030  8b60              LDRH     r0,[r4,#0x1a]
000032  89e1              LDRH     r1,[r4,#0xe]
000034  4288              CMP      r0,r1
000036  da02              BGE      |L15.62|
;;;969    		{
;;;970    			_pUart->usRxCount++;
000038  8b60              LDRH     r0,[r4,#0x1a]
00003a  1c40              ADDS     r0,r0,#1
00003c  8360              STRH     r0,[r4,#0x1a]
                  |L15.62|
;;;971    		}
;;;972    
;;;973    		/* 回调函数,通知应用程序收到新数据,一般是发送1个消息或者设置一个标记 */
;;;974    		//if (_pUart->usRxWrite == _pUart->usRxRead)
;;;975    		//if (_pUart->usRxCount == 1)
;;;976    		{
;;;977    			if (_pUart->ReciveNew)
00003e  6a60              LDR      r0,[r4,#0x24]
000040  b110              CBZ      r0,|L15.72|
;;;978    			{
;;;979    				_pUart->ReciveNew(ch);
000042  4628              MOV      r0,r5
000044  6a61              LDR      r1,[r4,#0x24]
000046  4788              BLX      r1
                  |L15.72|
;;;980    			}
;;;981    		}
;;;982    	}
000048  bf00              NOP      
                  |L15.74|
;;;983    
;;;984    	/* 处理发送缓冲区空中断 */
;;;985    	if (USART_GetITStatus(_pUart->uart, USART_IT_TXE) != RESET)
00004a  f2407127          MOV      r1,#0x727
00004e  6820              LDR      r0,[r4,#0]
000050  f7fffffe          BL       USART_GetITStatus
000054  b308              CBZ      r0,|L15.154|
;;;986    	{
;;;987    		//if (_pUart->usTxRead == _pUart->usTxWrite)
;;;988    		if (_pUart->usTxCount == 0)
000056  8aa0              LDRH     r0,[r4,#0x14]
000058  b960              CBNZ     r0,|L15.116|
;;;989    		{
;;;990    			/* 发送缓冲区的数据已取完时， 禁止发送缓冲区空中断 （注意：此时最后1个数据还未真正发送完毕）*/
;;;991    			USART_ITConfig(_pUart->uart, USART_IT_TXE, DISABLE);
00005a  2200              MOVS     r2,#0
00005c  f2407127          MOV      r1,#0x727
000060  6820              LDR      r0,[r4,#0]
000062  f7fffffe          BL       USART_ITConfig
;;;992    
;;;993    			/* 使能数据发送完毕中断 */
;;;994    			USART_ITConfig(_pUart->uart, USART_IT_TC, ENABLE);
000066  2201              MOVS     r2,#1
000068  f2406126          MOV      r1,#0x626
00006c  6820              LDR      r0,[r4,#0]
00006e  f7fffffe          BL       USART_ITConfig
000072  e037              B        |L15.228|
                  |L15.116|
;;;995    		}
;;;996    		else
;;;997    		{
;;;998    			/* 从发送FIFO取1个字节写入串口发送数据寄存器 */
;;;999    			USART_SendData(_pUart->uart, _pUart->pTxBuf[_pUart->usTxRead]);
000074  8a63              LDRH     r3,[r4,#0x12]
000076  6862              LDR      r2,[r4,#4]
000078  5cd1              LDRB     r1,[r2,r3]
00007a  6820              LDR      r0,[r4,#0]
00007c  f7fffffe          BL       USART_SendData
;;;1000   			if (++_pUart->usTxRead >= _pUart->usTxBufSize)
000080  8a60              LDRH     r0,[r4,#0x12]
000082  1c40              ADDS     r0,r0,#1
000084  b280              UXTH     r0,r0
000086  8260              STRH     r0,[r4,#0x12]
000088  89a1              LDRH     r1,[r4,#0xc]
00008a  4288              CMP      r0,r1
00008c  db01              BLT      |L15.146|
;;;1001   			{
;;;1002   				_pUart->usTxRead = 0;
00008e  2000              MOVS     r0,#0
000090  8260              STRH     r0,[r4,#0x12]
                  |L15.146|
;;;1003   			}
;;;1004   			_pUart->usTxCount--;
000092  8aa0              LDRH     r0,[r4,#0x14]
000094  1e40              SUBS     r0,r0,#1
000096  82a0              STRH     r0,[r4,#0x14]
000098  e024              B        |L15.228|
                  |L15.154|
;;;1005   		}
;;;1006   
;;;1007   	}
;;;1008   	/* 数据bit位全部发送完毕的中断 */
;;;1009   	else if (USART_GetITStatus(_pUart->uart, USART_IT_TC) != RESET)
00009a  f2406126          MOV      r1,#0x626
00009e  6820              LDR      r0,[r4,#0]
0000a0  f7fffffe          BL       USART_GetITStatus
0000a4  b1f0              CBZ      r0,|L15.228|
;;;1010   	{
;;;1011   		//if (_pUart->usTxRead == _pUart->usTxWrite)
;;;1012   		if (_pUart->usTxCount == 0)
0000a6  8aa0              LDRH     r0,[r4,#0x14]
0000a8  b950              CBNZ     r0,|L15.192|
;;;1013   		{
;;;1014   			/* 如果发送FIFO的数据全部发送完毕，禁止数据发送完毕中断 */
;;;1015   			USART_ITConfig(_pUart->uart, USART_IT_TC, DISABLE);
0000aa  2200              MOVS     r2,#0
0000ac  f2406126          MOV      r1,#0x626
0000b0  6820              LDR      r0,[r4,#0]
0000b2  f7fffffe          BL       USART_ITConfig
;;;1016   
;;;1017   			/* 回调函数, 一般用来处理RS485通信，将RS485芯片设置为接收模式，避免抢占总线 */
;;;1018   			if (_pUart->SendOver)
0000b6  6a20              LDR      r0,[r4,#0x20]
0000b8  b1a0              CBZ      r0,|L15.228|
;;;1019   			{
;;;1020   				_pUart->SendOver();
0000ba  6a20              LDR      r0,[r4,#0x20]
0000bc  4780              BLX      r0
0000be  e011              B        |L15.228|
                  |L15.192|
;;;1021   			}
;;;1022   		}
;;;1023   		else
;;;1024   		{
;;;1025   			/* 正常情况下，不会进入此分支 */
;;;1026   
;;;1027   			/* 如果发送FIFO的数据还未完毕，则从发送FIFO取1个数据写入发送数据寄存器 */
;;;1028   			USART_SendData(_pUart->uart, _pUart->pTxBuf[_pUart->usTxRead]);
0000c0  8a63              LDRH     r3,[r4,#0x12]
0000c2  6862              LDR      r2,[r4,#4]
0000c4  5cd1              LDRB     r1,[r2,r3]
0000c6  6820              LDR      r0,[r4,#0]
0000c8  f7fffffe          BL       USART_SendData
;;;1029   			if (++_pUart->usTxRead >= _pUart->usTxBufSize)
0000cc  8a60              LDRH     r0,[r4,#0x12]
0000ce  1c40              ADDS     r0,r0,#1
0000d0  b280              UXTH     r0,r0
0000d2  8260              STRH     r0,[r4,#0x12]
0000d4  89a1              LDRH     r1,[r4,#0xc]
0000d6  4288              CMP      r0,r1
0000d8  db01              BLT      |L15.222|
;;;1030   			{
;;;1031   				_pUart->usTxRead = 0;
0000da  2000              MOVS     r0,#0
0000dc  8260              STRH     r0,[r4,#0x12]
                  |L15.222|
;;;1032   			}
;;;1033   			_pUart->usTxCount--;
0000de  8aa0              LDRH     r0,[r4,#0x14]
0000e0  1e40              SUBS     r0,r0,#1
0000e2  82a0              STRH     r0,[r4,#0x14]
                  |L15.228|
;;;1034   		}
;;;1035   	}
;;;1036   }
0000e4  bd70              POP      {r4-r6,pc}
;;;1037   
                          ENDP


                          AREA ||i.UartSend||, CODE, READONLY, ALIGN=1

                  UartSend PROC
;;;842    */
;;;843    static void UartSend(UART_T *_pUart, uint8_t *_ucaBuf, uint16_t _usLen)
000000  b5f8              PUSH     {r3-r7,lr}
;;;844    {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4617              MOV      r7,r2
;;;845    	uint16_t i;
;;;846    
;;;847    	for (i = 0; i < _usLen; i++)
000008  2500              MOVS     r5,#0
00000a  e029              B        |L16.96|
                  |L16.12|
;;;848    	{
;;;849    		/* 如果发送缓冲区已经满了，则等待缓冲区空 */
;;;850    	#if 0
;;;851    		/*
;;;852    			在调试GPRS例程时，下面的代码出现死机，while 死循环
;;;853    			原因： 发送第1个字节时 _pUart->usTxWrite = 1；_pUart->usTxRead = 0;
;;;854    			将导致while(1) 无法退出
;;;855    		*/
;;;856    		while (1)
;;;857    		{
;;;858    			uint16_t usRead;
;;;859    
;;;860    			DISABLE_INT();
;;;861    			usRead = _pUart->usTxRead;
;;;862    			ENABLE_INT();
;;;863    
;;;864    			if (++usRead >= _pUart->usTxBufSize)
;;;865    			{
;;;866    				usRead = 0;
;;;867    			}
;;;868    
;;;869    			if (usRead != _pUart->usTxWrite)
;;;870    			{
;;;871    				break;
;;;872    			}
;;;873    		}
;;;874    	#else
;;;875    		/* 当 _pUart->usTxBufSize == 1 时, 下面的函数会死掉(待完善) */
;;;876    		while (1)
00000c  e00e              B        |L16.44|
                  |L16.14|
;;;877    		{
;;;878    			__IO uint16_t usCount;
;;;879    
;;;880    			DISABLE_INT();
00000e  2001              MOVS     r0,#1
000010  f7fffffe          BL       __set_PRIMASK
;;;881    			usCount = _pUart->usTxCount;
000014  8aa0              LDRH     r0,[r4,#0x14]
000016  9000              STR      r0,[sp,#0]
;;;882    			ENABLE_INT();
000018  2000              MOVS     r0,#0
00001a  f7fffffe          BL       __set_PRIMASK
;;;883    
;;;884    			if (usCount < _pUart->usTxBufSize)
00001e  89a0              LDRH     r0,[r4,#0xc]
000020  f8bd1000          LDRH     r1,[sp,#0]
000024  4288              CMP      r0,r1
000026  dd00              BLE      |L16.42|
;;;885    			{
;;;886    				break;
000028  e001              B        |L16.46|
                  |L16.42|
;;;887    			}
;;;888    		}
00002a  bf00              NOP      
                  |L16.44|
00002c  e7ef              B        |L16.14|
                  |L16.46|
00002e  bf00              NOP                            ;886
;;;889    	#endif
;;;890    
;;;891    		/* 将新数据填入发送缓冲区 */
;;;892    		_pUart->pTxBuf[_pUart->usTxWrite] = _ucaBuf[i];
000030  5d70              LDRB     r0,[r6,r5]
000032  8a22              LDRH     r2,[r4,#0x10]
000034  6861              LDR      r1,[r4,#4]
000036  5488              STRB     r0,[r1,r2]
;;;893    
;;;894    		DISABLE_INT();
000038  2001              MOVS     r0,#1
00003a  f7fffffe          BL       __set_PRIMASK
;;;895    		if (++_pUart->usTxWrite >= _pUart->usTxBufSize)
00003e  8a20              LDRH     r0,[r4,#0x10]
000040  1c40              ADDS     r0,r0,#1
000042  b280              UXTH     r0,r0
000044  8220              STRH     r0,[r4,#0x10]
000046  89a1              LDRH     r1,[r4,#0xc]
000048  4288              CMP      r0,r1
00004a  db01              BLT      |L16.80|
;;;896    		{
;;;897    			_pUart->usTxWrite = 0;
00004c  2000              MOVS     r0,#0
00004e  8220              STRH     r0,[r4,#0x10]
                  |L16.80|
;;;898    		}
;;;899    		_pUart->usTxCount++;
000050  8aa0              LDRH     r0,[r4,#0x14]
000052  1c40              ADDS     r0,r0,#1
000054  82a0              STRH     r0,[r4,#0x14]
;;;900    		ENABLE_INT();
000056  2000              MOVS     r0,#0
000058  f7fffffe          BL       __set_PRIMASK
00005c  1c68              ADDS     r0,r5,#1              ;847
00005e  b285              UXTH     r5,r0                 ;847
                  |L16.96|
000060  42bd              CMP      r5,r7                 ;847
000062  dbd3              BLT      |L16.12|
;;;901    	}
;;;902    
;;;903    	USART_ITConfig(_pUart->uart, USART_IT_TXE, ENABLE);
000064  2201              MOVS     r2,#1
000066  f2407127          MOV      r1,#0x727
00006a  6820              LDR      r0,[r4,#0]
00006c  f7fffffe          BL       USART_ITConfig
;;;904    }
000070  bdf8              POP      {r3-r7,pc}
;;;905    
                          ENDP


                          AREA ||i.UartVarInit||, CODE, READONLY, ALIGN=2

                  UartVarInit PROC
;;;421    */
;;;422    static void UartVarInit(void)
000000  4821              LDR      r0,|L17.136|
;;;423    {
;;;424    #if UART1_FIFO_EN == 1
;;;425    	g_tUart1.uart = USART1;						/* STM32 串口设备 */
000002  4922              LDR      r1,|L17.140|
000004  6008              STR      r0,[r1,#0]  ; g_tUart1
;;;426    	g_tUart1.pTxBuf = g_TxBuf1;					/* 发送缓冲区指针 */
000006  4822              LDR      r0,|L17.144|
000008  6048              STR      r0,[r1,#4]  ; g_tUart1
;;;427    	g_tUart1.pRxBuf = g_RxBuf1;					/* 接收缓冲区指针 */
00000a  4822              LDR      r0,|L17.148|
00000c  6088              STR      r0,[r1,#8]  ; g_tUart1
;;;428    	g_tUart1.usTxBufSize = UART1_TX_BUF_SIZE;	/* 发送缓冲区大小 */
00000e  f44f6080          MOV      r0,#0x400
000012  8188              STRH     r0,[r1,#0xc]
;;;429    	g_tUart1.usRxBufSize = UART1_RX_BUF_SIZE;	/* 接收缓冲区大小 */
000014  81c8              STRH     r0,[r1,#0xe]
;;;430    	g_tUart1.usTxWrite = 0;						/* 发送FIFO写索引 */
000016  2000              MOVS     r0,#0
000018  8208              STRH     r0,[r1,#0x10]
;;;431    	g_tUart1.usTxRead = 0;						/* 发送FIFO读索引 */
00001a  8248              STRH     r0,[r1,#0x12]
;;;432    	g_tUart1.usRxWrite = 0;						/* 接收FIFO写索引 */
00001c  82c8              STRH     r0,[r1,#0x16]
;;;433    	g_tUart1.usRxRead = 0;						/* 接收FIFO读索引 */
00001e  8308              STRH     r0,[r1,#0x18]
;;;434    	g_tUart1.usRxCount = 0;						/* 接收到的新数据个数 */
000020  8348              STRH     r0,[r1,#0x1a]
;;;435    	g_tUart1.usTxCount = 0;						/* 待发送的数据个数 */
000022  8288              STRH     r0,[r1,#0x14]
;;;436    	g_tUart1.SendBefor = 0;						/* 发送数据前的回调函数 */
000024  61c8              STR      r0,[r1,#0x1c]  ; g_tUart1
;;;437    	g_tUart1.SendOver = 0;						/* 发送完毕后的回调函数 */
000026  6208              STR      r0,[r1,#0x20]  ; g_tUart1
;;;438    	g_tUart1.ReciveNew = 0;						/* 接收到新数据后的回调函数 */
000028  6248              STR      r0,[r1,#0x24]  ; g_tUart1
;;;439    #endif
;;;440    
;;;441    #if UART2_FIFO_EN == 1
;;;442    	g_tUart2.uart = USART2;						/* STM32 串口设备 */
00002a  481b              LDR      r0,|L17.152|
00002c  491b              LDR      r1,|L17.156|
00002e  6008              STR      r0,[r1,#0]  ; g_tUart2
;;;443    	g_tUart2.pTxBuf = g_TxBuf2;					/* 发送缓冲区指针 */
000030  481b              LDR      r0,|L17.160|
000032  6048              STR      r0,[r1,#4]  ; g_tUart2
;;;444    	g_tUart2.pRxBuf = g_RxBuf2;					/* 接收缓冲区指针 */
000034  481b              LDR      r0,|L17.164|
000036  6088              STR      r0,[r1,#8]  ; g_tUart2
;;;445    	g_tUart2.usTxBufSize = UART2_TX_BUF_SIZE;	/* 发送缓冲区大小 */
000038  f44f6080          MOV      r0,#0x400
00003c  8188              STRH     r0,[r1,#0xc]
;;;446    	g_tUart2.usRxBufSize = UART2_RX_BUF_SIZE;	/* 接收缓冲区大小 */
00003e  81c8              STRH     r0,[r1,#0xe]
;;;447    	g_tUart2.usTxWrite = 0;						/* 发送FIFO写索引 */
000040  2000              MOVS     r0,#0
000042  8208              STRH     r0,[r1,#0x10]
;;;448    	g_tUart2.usTxRead = 0;						/* 发送FIFO读索引 */
000044  8248              STRH     r0,[r1,#0x12]
;;;449    	g_tUart2.usRxWrite = 0;						/* 接收FIFO写索引 */
000046  82c8              STRH     r0,[r1,#0x16]
;;;450    	g_tUart2.usRxRead = 0;						/* 接收FIFO读索引 */
000048  8308              STRH     r0,[r1,#0x18]
;;;451    	g_tUart2.usRxCount = 0;						/* 接收到的新数据个数 */
00004a  8348              STRH     r0,[r1,#0x1a]
;;;452    	g_tUart2.usTxCount = 0;						/* 待发送的数据个数 */
00004c  8288              STRH     r0,[r1,#0x14]
;;;453    	g_tUart2.SendBefor = 0;						/* 发送数据前的回调函数 */
00004e  61c8              STR      r0,[r1,#0x1c]  ; g_tUart2
;;;454    	g_tUart2.SendOver = 0;						/* 发送完毕后的回调函数 */
000050  6208              STR      r0,[r1,#0x20]  ; g_tUart2
;;;455    	g_tUart2.ReciveNew = UART2_ReciveNew;		    /* 接收到新数据后的回调函数 */
000052  4815              LDR      r0,|L17.168|
000054  6248              STR      r0,[r1,#0x24]  ; g_tUart2
;;;456       // g_tUart2.ReciveNew = 0;		            	/* 接收到新数据后的回调函数 */
;;;457    #endif
;;;458    
;;;459    #if UART3_FIFO_EN == 1
;;;460    	g_tUart3.uart = USART3;						/* STM32 串口设备 */
000056  4815              LDR      r0,|L17.172|
000058  4915              LDR      r1,|L17.176|
00005a  6008              STR      r0,[r1,#0]  ; g_tUart3
;;;461    	g_tUart3.pTxBuf = g_TxBuf3;					/* 发送缓冲区指针 */
00005c  4815              LDR      r0,|L17.180|
00005e  6048              STR      r0,[r1,#4]  ; g_tUart3
;;;462    	g_tUart3.pRxBuf = g_RxBuf3;					/* 接收缓冲区指针 */
000060  4815              LDR      r0,|L17.184|
000062  6088              STR      r0,[r1,#8]  ; g_tUart3
;;;463    	g_tUart3.usTxBufSize = UART3_TX_BUF_SIZE;	/* 发送缓冲区大小 */
000064  f44f6080          MOV      r0,#0x400
000068  8188              STRH     r0,[r1,#0xc]
;;;464    	g_tUart3.usRxBufSize = UART3_RX_BUF_SIZE;	/* 接收缓冲区大小 */
00006a  81c8              STRH     r0,[r1,#0xe]
;;;465    	g_tUart3.usTxWrite = 0;						/* 发送FIFO写索引 */
00006c  2000              MOVS     r0,#0
00006e  8208              STRH     r0,[r1,#0x10]
;;;466    	g_tUart3.usTxRead = 0;						/* 发送FIFO读索引 */
000070  8248              STRH     r0,[r1,#0x12]
;;;467    	g_tUart3.usRxWrite = 0;						/* 接收FIFO写索引 */
000072  82c8              STRH     r0,[r1,#0x16]
;;;468    	g_tUart3.usRxRead = 0;						/* 接收FIFO读索引 */
000074  8308              STRH     r0,[r1,#0x18]
;;;469    	g_tUart3.usRxCount = 0;						/* 接收到的新数据个数 */
000076  8348              STRH     r0,[r1,#0x1a]
;;;470    	g_tUart3.usTxCount = 0;						/* 待发送的数据个数 */
000078  8288              STRH     r0,[r1,#0x14]
;;;471    	g_tUart3.SendBefor = RS485_SendBefor;		/* 发送数据前的回调函数 */
00007a  4810              LDR      r0,|L17.188|
00007c  61c8              STR      r0,[r1,#0x1c]  ; g_tUart3
;;;472    	g_tUart3.SendOver = RS485_SendOver;			/* 发送完毕后的回调函数 */
00007e  4810              LDR      r0,|L17.192|
000080  6208              STR      r0,[r1,#0x20]  ; g_tUart3
;;;473    	g_tUart3.ReciveNew = RS485_ReciveNew;		/* 接收到新数据后的回调函数 */
000082  4810              LDR      r0,|L17.196|
000084  6248              STR      r0,[r1,#0x24]  ; g_tUart3
;;;474    #endif
;;;475    
;;;476    #if UART4_FIFO_EN == 1
;;;477    	g_tUart4.uart = UART4;						/* STM32 串口设备 */
;;;478    	g_tUart4.pTxBuf = g_TxBuf4;					/* 发送缓冲区指针 */
;;;479    	g_tUart4.pRxBuf = g_RxBuf4;					/* 接收缓冲区指针 */
;;;480    	g_tUart4.usTxBufSize = UART4_TX_BUF_SIZE;	/* 发送缓冲区大小 */
;;;481    	g_tUart4.usRxBufSize = UART4_RX_BUF_SIZE;	/* 接收缓冲区大小 */
;;;482    	g_tUart4.usTxWrite = 0;						/* 发送FIFO写索引 */
;;;483    	g_tUart4.usTxRead = 0;						/* 发送FIFO读索引 */
;;;484    	g_tUart4.usRxWrite = 0;						/* 接收FIFO写索引 */
;;;485    	g_tUart4.usRxRead = 0;						/* 接收FIFO读索引 */
;;;486    	g_tUart4.usRxCount = 0;						/* 接收到的新数据个数 */
;;;487    	g_tUart4.usTxCount = 0;						/* 待发送的数据个数 */
;;;488    	g_tUart4.SendBefor = 0;						/* 发送数据前的回调函数 */
;;;489    	g_tUart4.SendOver = 0;						/* 发送完毕后的回调函数 */
;;;490    	g_tUart4.ReciveNew = 0;						/* 接收到新数据后的回调函数 */
;;;491    #endif
;;;492    
;;;493    #if UART5_FIFO_EN == 1
;;;494    	g_tUart5.uart = UART5;						/* STM32 串口设备 */
;;;495    	g_tUart5.pTxBuf = g_TxBuf5;					/* 发送缓冲区指针 */
;;;496    	g_tUart5.pRxBuf = g_RxBuf5;					/* 接收缓冲区指针 */
;;;497    	g_tUart5.usTxBufSize = UART5_TX_BUF_SIZE;	/* 发送缓冲区大小 */
;;;498    	g_tUart5.usRxBufSize = UART5_RX_BUF_SIZE;	/* 接收缓冲区大小 */
;;;499    	g_tUart5.usTxWrite = 0;						/* 发送FIFO写索引 */
;;;500    	g_tUart5.usTxRead = 0;						/* 发送FIFO读索引 */
;;;501    	g_tUart5.usRxWrite = 0;						/* 接收FIFO写索引 */
;;;502    	g_tUart5.usRxRead = 0;						/* 接收FIFO读索引 */
;;;503    	g_tUart5.usRxCount = 0;						/* 接收到的新数据个数 */
;;;504    	g_tUart5.usTxCount = 0;						/* 待发送的数据个数 */
;;;505    	g_tUart5.SendBefor = 0;						/* 发送数据前的回调函数 */
;;;506    	g_tUart5.SendOver = 0;						/* 发送完毕后的回调函数 */
;;;507    	g_tUart5.ReciveNew = 0;						/* 接收到新数据后的回调函数 */
;;;508    #endif
;;;509    
;;;510    
;;;511    #if UART6_FIFO_EN == 1
;;;512    	g_tUart6.uart = USART6;						/* STM32 串口设备 */
;;;513    	g_tUart6.pTxBuf = g_TxBuf6;					/* 发送缓冲区指针 */
;;;514    	g_tUart6.pRxBuf = g_RxBuf6;					/* 接收缓冲区指针 */
;;;515    	g_tUart6.usTxBufSize = UART6_TX_BUF_SIZE;	/* 发送缓冲区大小 */
;;;516    	g_tUart6.usRxBufSize = UART6_RX_BUF_SIZE;	/* 接收缓冲区大小 */
;;;517    	g_tUart6.usTxWrite = 0;						/* 发送FIFO写索引 */
;;;518    	g_tUart6.usTxRead = 0;						/* 发送FIFO读索引 */
;;;519    	g_tUart6.usRxWrite = 0;						/* 接收FIFO写索引 */
;;;520    	g_tUart6.usRxRead = 0;						/* 接收FIFO读索引 */
;;;521    	g_tUart6.usRxCount = 0;						/* 接收到的新数据个数 */
;;;522    	g_tUart6.usTxCount = 0;						/* 待发送的数据个数 */
;;;523    	g_tUart6.SendBefor = 0;						/* 发送数据前的回调函数 */
;;;524    	g_tUart6.SendOver = 0;						/* 发送完毕后的回调函数 */
;;;525    	g_tUart6.ReciveNew = 0;						/* 接收到新数据后的回调函数 */
;;;526    #endif
;;;527    }
000086  4770              BX       lr
;;;528    
                          ENDP

                  |L17.136|
                          DCD      0x40013800
                  |L17.140|
                          DCD      g_tUart1
                  |L17.144|
                          DCD      g_TxBuf1
                  |L17.148|
                          DCD      g_RxBuf1
                  |L17.152|
                          DCD      0x40004400
                  |L17.156|
                          DCD      g_tUart2
                  |L17.160|
                          DCD      g_TxBuf2
                  |L17.164|
                          DCD      g_RxBuf2
                  |L17.168|
                          DCD      UART2_ReciveNew
                  |L17.172|
                          DCD      0x40004800
                  |L17.176|
                          DCD      g_tUart3
                  |L17.180|
                          DCD      g_TxBuf3
                  |L17.184|
                          DCD      g_RxBuf3
                  |L17.188|
                          DCD      RS485_SendBefor
                  |L17.192|
                          DCD      RS485_SendOver
                  |L17.196|
                          DCD      RS485_ReciveNew

                          AREA ||i.__set_PRIMASK||, CODE, READONLY, ALIGN=1

                  __set_PRIMASK PROC
;;;179     */
;;;180    __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
000000  f3808810          MSR      PRIMASK,r0
;;;181    {
;;;182      register uint32_t __regPriMask         __ASM("primask");
;;;183      __regPriMask = (priMask);
;;;184    }
000004  4770              BX       lr
;;;185    
                          ENDP


                          AREA ||i.bsp_InitUart||, CODE, READONLY, ALIGN=1

                  bsp_InitUart PROC
;;;70     */
;;;71     void bsp_InitUart(void)
000000  b510              PUSH     {r4,lr}
;;;72     {
;;;73     	UartVarInit();		/* 必须先初始化全局变量,再配置硬件 */
000002  f7fffffe          BL       UartVarInit
;;;74     
;;;75     	InitHardUart();		/* 配置串口的硬件参数(波特率等) */
000006  f7fffffe          BL       InitHardUart
;;;76     
;;;77     	RS485_InitTXE();	/* 配置RS485芯片的发送使能硬件，配置为推挽输出 */
00000a  f7fffffe          BL       RS485_InitTXE
;;;78     
;;;79     	ConfigUartNVIC();	/* 配置串口中断 */
00000e  f7fffffe          BL       ConfigUartNVIC
;;;80     }
000012  bd10              POP      {r4,pc}
;;;81     
                          ENDP


                          AREA ||i.bsp_Set485Baud||, CODE, READONLY, ALIGN=2

                  bsp_Set485Baud PROC
;;;323    */
;;;324    void bsp_Set485Baud(uint32_t _baud)
000000  b51f              PUSH     {r0-r4,lr}
;;;325    {
000002  4604              MOV      r4,r0
;;;326    	USART_InitTypeDef USART_InitStructure;
;;;327    
;;;328    	/* 第2步： 配置串口硬件参数 */
;;;329    	USART_InitStructure.USART_BaudRate = _baud;	/* 波特率 */
000004  9400              STR      r4,[sp,#0]
;;;330    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000006  2000              MOVS     r0,#0
000008  f8ad0004          STRH     r0,[sp,#4]
;;;331    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
00000c  f8ad0006          STRH     r0,[sp,#6]
;;;332    	USART_InitStructure.USART_Parity = USART_Parity_No ;
000010  f8ad0008          STRH     r0,[sp,#8]
;;;333    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
000014  f8ad000c          STRH     r0,[sp,#0xc]
;;;334    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000018  200c              MOVS     r0,#0xc
00001a  f8ad000a          STRH     r0,[sp,#0xa]
;;;335    	USART_Init(USART3, &USART_InitStructure);
00001e  4669              MOV      r1,sp
000020  4801              LDR      r0,|L20.40|
000022  f7fffffe          BL       USART_Init
;;;336    }
000026  bd1f              POP      {r0-r4,pc}
;;;337    
                          ENDP

                  |L20.40|
                          DCD      0x40004800

                          AREA ||i.bsp_SetUart1Baud||, CODE, READONLY, ALIGN=2

                  bsp_SetUart1Baud PROC
;;;256    */
;;;257    void bsp_SetUart1Baud(uint32_t _baud)
000000  b51f              PUSH     {r0-r4,lr}
;;;258    {
000002  4604              MOV      r4,r0
;;;259    	USART_InitTypeDef USART_InitStructure;
;;;260    
;;;261    	/* 第2步： 配置串口硬件参数 */
;;;262    	USART_InitStructure.USART_BaudRate = _baud;	/* 波特率 */
000004  9400              STR      r4,[sp,#0]
;;;263    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000006  2000              MOVS     r0,#0
000008  f8ad0004          STRH     r0,[sp,#4]
;;;264    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
00000c  f8ad0006          STRH     r0,[sp,#6]
;;;265    	USART_InitStructure.USART_Parity = USART_Parity_No ;
000010  f8ad0008          STRH     r0,[sp,#8]
;;;266    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
000014  f8ad000c          STRH     r0,[sp,#0xc]
;;;267    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000018  200c              MOVS     r0,#0xc
00001a  f8ad000a          STRH     r0,[sp,#0xa]
;;;268    	USART_Init(USART2, &USART_InitStructure);
00001e  4669              MOV      r1,sp
000020  4801              LDR      r0,|L21.40|
000022  f7fffffe          BL       USART_Init
;;;269    }
000026  bd1f              POP      {r0-r4,pc}
;;;270    
                          ENDP

                  |L21.40|
                          DCD      0x40004400

                          AREA ||i.bsp_SetUart2Baud||, CODE, READONLY, ALIGN=2

                  bsp_SetUart2Baud PROC
;;;278    */
;;;279    void bsp_SetUart2Baud(uint32_t _baud)
000000  b51f              PUSH     {r0-r4,lr}
;;;280    {
000002  4604              MOV      r4,r0
;;;281    	USART_InitTypeDef USART_InitStructure;
;;;282    
;;;283    	/* 第2步： 配置串口硬件参数 */
;;;284    	USART_InitStructure.USART_BaudRate = _baud;	/* 波特率 */
000004  9400              STR      r4,[sp,#0]
;;;285    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000006  2000              MOVS     r0,#0
000008  f8ad0004          STRH     r0,[sp,#4]
;;;286    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
00000c  f8ad0006          STRH     r0,[sp,#6]
;;;287    	USART_InitStructure.USART_Parity = USART_Parity_No ;
000010  f8ad0008          STRH     r0,[sp,#8]
;;;288    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
000014  f8ad000c          STRH     r0,[sp,#0xc]
;;;289    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000018  200c              MOVS     r0,#0xc
00001a  f8ad000a          STRH     r0,[sp,#0xa]
;;;290    	USART_Init(USART2, &USART_InitStructure);
00001e  4669              MOV      r1,sp
000020  4801              LDR      r0,|L22.40|
000022  f7fffffe          BL       USART_Init
;;;291    }
000026  bd1f              POP      {r0-r4,pc}
;;;292    
                          ENDP

                  |L22.40|
                          DCD      0x40004400

                          AREA ||i.comClearRxFifo||, CODE, READONLY, ALIGN=1

                  comClearRxFifo PROC
;;;233    */
;;;234    void comClearRxFifo(COM_PORT_E _ucPort)
000000  b500              PUSH     {lr}
;;;235    {
000002  4603              MOV      r3,r0
;;;236    	UART_T *pUart;
;;;237    
;;;238    	pUart = ComToUart(_ucPort);
000004  4618              MOV      r0,r3
000006  f7fffffe          BL       ComToUart
00000a  4602              MOV      r2,r0
;;;239    	if (pUart == 0)
00000c  b902              CBNZ     r2,|L23.16|
                  |L23.14|
;;;240    	{
;;;241    		return;
;;;242    	}
;;;243    
;;;244    	pUart->usRxWrite = 0;
;;;245    	pUart->usRxRead = 0;
;;;246    	pUart->usRxCount = 0;
;;;247    }
00000e  bd00              POP      {pc}
                  |L23.16|
000010  2000              MOVS     r0,#0                 ;244
000012  82d0              STRH     r0,[r2,#0x16]         ;244
000014  8310              STRH     r0,[r2,#0x18]         ;245
000016  8350              STRH     r0,[r2,#0x1a]         ;246
000018  bf00              NOP      
00001a  e7f8              B        |L23.14|
;;;248    
                          ENDP


                          AREA ||i.comClearTxFifo||, CODE, READONLY, ALIGN=1

                  comClearTxFifo PROC
;;;210    */
;;;211    void comClearTxFifo(COM_PORT_E _ucPort)
000000  b500              PUSH     {lr}
;;;212    {
000002  4603              MOV      r3,r0
;;;213    	UART_T *pUart;
;;;214    
;;;215    	pUart = ComToUart(_ucPort);
000004  4618              MOV      r0,r3
000006  f7fffffe          BL       ComToUart
00000a  4602              MOV      r2,r0
;;;216    	if (pUart == 0)
00000c  b902              CBNZ     r2,|L24.16|
                  |L24.14|
;;;217    	{
;;;218    		return;
;;;219    	}
;;;220    
;;;221    	pUart->usTxWrite = 0;
;;;222    	pUart->usTxRead = 0;
;;;223    	pUart->usTxCount = 0;
;;;224    }
00000e  bd00              POP      {pc}
                  |L24.16|
000010  2000              MOVS     r0,#0                 ;221
000012  8210              STRH     r0,[r2,#0x10]         ;221
000014  8250              STRH     r0,[r2,#0x12]         ;222
000016  8290              STRH     r0,[r2,#0x14]         ;223
000018  bf00              NOP      
00001a  e7f8              B        |L24.14|
;;;225    
                          ENDP


                          AREA ||i.comGetChar||, CODE, READONLY, ALIGN=1

                  comGetChar PROC
;;;189    */
;;;190    uint8_t comGetChar(COM_PORT_E _ucPort, uint8_t *_pByte)
000000  b570              PUSH     {r4-r6,lr}
;;;191    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;192    	UART_T *pUart;
;;;193    
;;;194    	pUart = ComToUart(_ucPort);
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       ComToUart
00000c  4604              MOV      r4,r0
;;;195    	if (pUart == 0)
00000e  b90c              CBNZ     r4,|L25.20|
;;;196    	{
;;;197    		return 0;
000010  2000              MOVS     r0,#0
                  |L25.18|
;;;198    	}
;;;199    
;;;200    	return UartGetChar(pUart, _pByte);
;;;201    }
000012  bd70              POP      {r4-r6,pc}
                  |L25.20|
000014  4631              MOV      r1,r6                 ;200
000016  4620              MOV      r0,r4                 ;200
000018  f7fffffe          BL       UartGetChar
00001c  e7f9              B        |L25.18|
;;;202    
                          ENDP


                          AREA ||i.comSendBuf||, CODE, READONLY, ALIGN=1

                  comSendBuf PROC
;;;148    */
;;;149    void comSendBuf(COM_PORT_E _ucPort, uint8_t *_ucaBuf, uint16_t _usLen)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;150    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;151    	UART_T *pUart;
;;;152    
;;;153    	pUart = ComToUart(_ucPort);
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       ComToUart
000010  4604              MOV      r4,r0
;;;154    	if (pUart == 0)
000012  b90c              CBNZ     r4,|L26.24|
                  |L26.20|
;;;155    	{
;;;156    		return;
;;;157    	}
;;;158    
;;;159    	if (pUart->SendBefor != 0)
;;;160    	{
;;;161    		pUart->SendBefor();		/* 如果是RS485通信，可以在这个函数中将RS485设置为发送模式 */
;;;162    	}
;;;163    
;;;164    	UartSend(pUart, _ucaBuf, _usLen);
;;;165    }
000014  e8bd81f0          POP      {r4-r8,pc}
                  |L26.24|
000018  69e0              LDR      r0,[r4,#0x1c]         ;159
00001a  b108              CBZ      r0,|L26.32|
00001c  69e0              LDR      r0,[r4,#0x1c]         ;161
00001e  4780              BLX      r0                    ;161
                  |L26.32|
000020  463a              MOV      r2,r7                 ;164
000022  4631              MOV      r1,r6                 ;164
000024  4620              MOV      r0,r4                 ;164
000026  f7fffffe          BL       UartSend
00002a  bf00              NOP      
00002c  e7f2              B        |L26.20|
;;;166    
                          ENDP


                          AREA ||i.comSendChar||, CODE, READONLY, ALIGN=1

                  comSendChar PROC
;;;175    */
;;;176    void comSendChar(COM_PORT_E _ucPort, uint8_t _ucByte)
000000  b513              PUSH     {r0,r1,r4,lr}
;;;177    {
000002  4604              MOV      r4,r0
;;;178    	comSendBuf(_ucPort, &_ucByte, 1);
000004  2201              MOVS     r2,#1
000006  a901              ADD      r1,sp,#4
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       comSendBuf
;;;179    }
00000e  bd1c              POP      {r2-r4,pc}
;;;180    
                          ENDP


                          AREA ||i.fgetc||, CODE, READONLY, ALIGN=1

                  fgetc PROC
;;;1121   */
;;;1122   int fgetc(FILE *f)
000000  b538              PUSH     {r3-r5,lr}
;;;1123   {
000002  4604              MOV      r4,r0
;;;1124   
;;;1125   #if 1	/* 从串口接收FIFO中取1个数据, 只有取到数据才返回 */
;;;1126   	uint8_t ucData;
;;;1127   
;;;1128   	while(comGetChar(COM1, &ucData) == 0);
000004  bf00              NOP      
                  |L28.6|
000006  4669              MOV      r1,sp
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       comGetChar
00000e  2800              CMP      r0,#0
000010  d0f9              BEQ      |L28.6|
;;;1129   
;;;1130   	return ucData;
000012  f89d0000          LDRB     r0,[sp,#0]
;;;1131   #else
;;;1132   	/* 等待串口1输入数据 */
;;;1133   	while (USART_GetFlagStatus(USART1, USART_FLAG_RXNE) == RESET);
;;;1134   
;;;1135   	return (int)USART_ReceiveData(USART1);
;;;1136   #endif
;;;1137   }
000016  bd38              POP      {r3-r5,pc}
;;;1138   
                          ENDP


                          AREA ||i.fputc||, CODE, READONLY, ALIGN=1

                  fputc PROC
;;;1095   */
;;;1096   int fputc(int ch, FILE *f)
000000  b570              PUSH     {r4-r6,lr}
;;;1097   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1098   #if 1	/* 将需要printf的字符通过串口中断FIFO发送出去，printf函数会立即返回 */
;;;1099   	comSendChar(COM1, ch);
000006  b2e1              UXTB     r1,r4
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       comSendChar
;;;1100   
;;;1101   	return ch;
00000e  4620              MOV      r0,r4
;;;1102   #else	/* 采用阻塞方式发送每个字符,等待数据发送完毕 */
;;;1103   	/* 写一个字节到USART1 */
;;;1104   	USART_SendData(USART1, (uint8_t) ch);
;;;1105   
;;;1106   	/* 等待发送结束 */
;;;1107   	while (USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET)
;;;1108   	{}
;;;1109   
;;;1110   	return ch;
;;;1111   #endif
;;;1112   }
000010  bd70              POP      {r4-r6,pc}
;;;1113   
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  g_tUart1
                          %        40
                  g_TxBuf1
                          %        1024
                  g_RxBuf1
                          %        1024
                  g_tUart2
                          %        40
                  g_TxBuf2
                          %        1024
                  g_RxBuf2
                          %        1024
                  g_tUart3
                          %        40
                  g_TxBuf3
                          %        1024
                  g_RxBuf3
                          %        1024

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp\\src\\bsp_uart_fifo.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_bsp_uart_fifo_c_b28b0d00____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_bsp_uart_fifo_c_b28b0d00____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_bsp_uart_fifo_c_b28b0d00____REVSH|
#line 128
|__asm___15_bsp_uart_fifo_c_b28b0d00____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
