; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_adc.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_adc.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Include -I..\..\User -I..\..\User\bsp\inc -I..\..\User\bsp -I..\..\User\app\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -D__MICROLIB -D__UVISION_VERSION=527 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\bsp_adc.crf ..\..\User\bsp\src\bsp_adc.c]
                          THUMB

                          AREA ||i.bsp_InitADC||, CODE, READONLY, ALIGN=2

                  bsp_InitADC PROC
;;;30     */
;;;31     void bsp_InitADC(void)
000000  b500              PUSH     {lr}
;;;32     {
000002  b091              SUB      sp,sp,#0x44
;;;33     	ADC_InitTypeDef       ADC_InitStructure;
;;;34     	DMA_InitTypeDef       DMA_InitStructure;
;;;35     	GPIO_InitTypeDef      GPIO_InitStructure;
;;;36     
;;;37     	/* Enable peripheral clocks ------------------------------------------------*/
;;;38     	/* Enable DMA1 clock */
;;;39     	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
000004  2101              MOVS     r1,#1
000006  4608              MOV      r0,r1
000008  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;40     
;;;41     	/* Enable ADC1 and GPIOC clock */
;;;42     	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1 | RCC_APB2Periph_GPIOC, ENABLE);
00000c  2101              MOVS     r1,#1
00000e  f44f7004          MOV      r0,#0x210
000012  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;43     
;;;44     	
;;;45     	/* Configure PC.04 (ADC Channel14) as analog input -------------------------*/
;;;46     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
000016  2010              MOVS     r0,#0x10
000018  f8ad0000          STRH     r0,[sp,#0]
;;;47     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
00001c  2000              MOVS     r0,#0
00001e  f88d0003          STRB     r0,[sp,#3]
;;;48     	GPIO_Init(GPIOC, &GPIO_InitStructure);
000022  4669              MOV      r1,sp
000024  4832              LDR      r0,|L1.240|
000026  f7fffffe          BL       GPIO_Init
;;;49     	
;;;50     	
;;;51     	
;;;52     	/* DMA1 channel1 configuration ----------------------------------------------*/
;;;53     	DMA_DeInit(DMA1_Channel1);
00002a  4832              LDR      r0,|L1.244|
00002c  f7fffffe          BL       DMA_DeInit
;;;54     	DMA_InitStructure.DMA_PeripheralBaseAddr = ADC1_DR_Address;
000030  4831              LDR      r0,|L1.248|
000032  9001              STR      r0,[sp,#4]
;;;55     	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)&AdcValue;
000034  4831              LDR      r0,|L1.252|
000036  9002              STR      r0,[sp,#8]
;;;56     	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
000038  2000              MOVS     r0,#0
00003a  9003              STR      r0,[sp,#0xc]
;;;57     	DMA_InitStructure.DMA_BufferSize = 1;
00003c  2001              MOVS     r0,#1
00003e  9004              STR      r0,[sp,#0x10]
;;;58     	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
000040  2000              MOVS     r0,#0
000042  9005              STR      r0,[sp,#0x14]
;;;59     	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
000044  2080              MOVS     r0,#0x80
000046  9006              STR      r0,[sp,#0x18]
;;;60     	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
000048  0040              LSLS     r0,r0,#1
00004a  9007              STR      r0,[sp,#0x1c]
;;;61     	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
00004c  0080              LSLS     r0,r0,#2
00004e  9008              STR      r0,[sp,#0x20]
;;;62     	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
000050  2020              MOVS     r0,#0x20
000052  9009              STR      r0,[sp,#0x24]
;;;63     	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
000054  0200              LSLS     r0,r0,#8
000056  900a              STR      r0,[sp,#0x28]
;;;64     	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
000058  2000              MOVS     r0,#0
00005a  900b              STR      r0,[sp,#0x2c]
;;;65     	DMA_Init(DMA1_Channel1, &DMA_InitStructure);
00005c  a901              ADD      r1,sp,#4
00005e  4825              LDR      r0,|L1.244|
000060  f7fffffe          BL       DMA_Init
;;;66     	/* Enable DMA1 channel1 */
;;;67     	DMA_Cmd(DMA1_Channel1, ENABLE);
000064  2101              MOVS     r1,#1
000066  4823              LDR      r0,|L1.244|
000068  f7fffffe          BL       DMA_Cmd
;;;68     	
;;;69         /****************************************************************************   
;;;70     	  PCLK2 = HCLK / 2 
;;;71     	  下面选择的是2分频
;;;72     	  ADCCLK = PCLK2 /2 = HCLK / 4 = 168 / 4 = 42M
;;;73           ADC采样频率： Sampling Time + Conversion Time = 3 + 12 cycles = 15cyc
;;;74                         Conversion Time = 42MHz / 15cyc = 2.8Mbps. 
;;;75     	*****************************************************************************/
;;;76     
;;;77     	/* ADC1 configuration ------------------------------------------------------*/
;;;78     	ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
00006c  2000              MOVS     r0,#0
00006e  900c              STR      r0,[sp,#0x30]
;;;79     	ADC_InitStructure.ADC_ScanConvMode = DISABLE;
000070  f88d0034          STRB     r0,[sp,#0x34]
;;;80     	ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
000074  2001              MOVS     r0,#1
000076  f88d0035          STRB     r0,[sp,#0x35]
;;;81     	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
00007a  f44f2060          MOV      r0,#0xe0000
00007e  900e              STR      r0,[sp,#0x38]
;;;82     	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
000080  2000              MOVS     r0,#0
000082  900f              STR      r0,[sp,#0x3c]
;;;83     	ADC_InitStructure.ADC_NbrOfChannel = 1;
000084  2001              MOVS     r0,#1
000086  f88d0040          STRB     r0,[sp,#0x40]
;;;84     	ADC_Init(ADC1, &ADC_InitStructure);
00008a  a90c              ADD      r1,sp,#0x30
00008c  481a              LDR      r0,|L1.248|
00008e  384c              SUBS     r0,r0,#0x4c
000090  f7fffffe          BL       ADC_Init
;;;85     
;;;86     	/* ADC1 regular channel14 configuration */ 
;;;87     	ADC_RegularChannelConfig(ADC1, ADC_Channel_14, 1, ADC_SampleTime_55Cycles5);
000094  2305              MOVS     r3,#5
000096  2201              MOVS     r2,#1
000098  210e              MOVS     r1,#0xe
00009a  4817              LDR      r0,|L1.248|
00009c  384c              SUBS     r0,r0,#0x4c
00009e  f7fffffe          BL       ADC_RegularChannelConfig
;;;88     	
;;;89     	/* Enable ADC1 DMA */
;;;90     	ADC_DMACmd(ADC1, ENABLE);
0000a2  2101              MOVS     r1,#1
0000a4  4814              LDR      r0,|L1.248|
0000a6  384c              SUBS     r0,r0,#0x4c
0000a8  f7fffffe          BL       ADC_DMACmd
;;;91     
;;;92     	/* Enable ADC1 */
;;;93     	ADC_Cmd(ADC1, ENABLE);
0000ac  2101              MOVS     r1,#1
0000ae  4812              LDR      r0,|L1.248|
0000b0  384c              SUBS     r0,r0,#0x4c
0000b2  f7fffffe          BL       ADC_Cmd
;;;94     
;;;95     	/* Enable ADC1 reset calibration register */   
;;;96     	ADC_ResetCalibration(ADC1);
0000b6  4810              LDR      r0,|L1.248|
0000b8  384c              SUBS     r0,r0,#0x4c
0000ba  f7fffffe          BL       ADC_ResetCalibration
;;;97     	/* Check the end of ADC1 reset calibration register */
;;;98     	while(ADC_GetResetCalibrationStatus(ADC1));
0000be  bf00              NOP      
                  |L1.192|
0000c0  480d              LDR      r0,|L1.248|
0000c2  384c              SUBS     r0,r0,#0x4c
0000c4  f7fffffe          BL       ADC_GetResetCalibrationStatus
0000c8  2800              CMP      r0,#0
0000ca  d1f9              BNE      |L1.192|
;;;99     
;;;100    	/* Start ADC1 calibration */
;;;101    	ADC_StartCalibration(ADC1);
0000cc  480a              LDR      r0,|L1.248|
0000ce  384c              SUBS     r0,r0,#0x4c
0000d0  f7fffffe          BL       ADC_StartCalibration
;;;102    	/* Check the end of ADC1 calibration */
;;;103    	while(ADC_GetCalibrationStatus(ADC1));
0000d4  bf00              NOP      
                  |L1.214|
0000d6  4808              LDR      r0,|L1.248|
0000d8  384c              SUBS     r0,r0,#0x4c
0000da  f7fffffe          BL       ADC_GetCalibrationStatus
0000de  2800              CMP      r0,#0
0000e0  d1f9              BNE      |L1.214|
;;;104    	 
;;;105    	/* Start ADC1 Software Conversion */ 
;;;106    	ADC_SoftwareStartConvCmd(ADC1, ENABLE);
0000e2  2101              MOVS     r1,#1
0000e4  4804              LDR      r0,|L1.248|
0000e6  384c              SUBS     r0,r0,#0x4c
0000e8  f7fffffe          BL       ADC_SoftwareStartConvCmd
;;;107    }
0000ec  b011              ADD      sp,sp,#0x44
0000ee  bd00              POP      {pc}
;;;108    
                          ENDP

                  |L1.240|
                          DCD      0x40011000
                  |L1.244|
                          DCD      0x40020008
                  |L1.248|
                          DCD      0x4001244c
                  |L1.252|
                          DCD      AdcValue

                          AREA ||.data||, DATA, ALIGN=1

                  AdcValue
000000  0000              DCB      0x00,0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp\\src\\bsp_adc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_bsp_adc_c_9b6e839a____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_bsp_adc_c_9b6e839a____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_bsp_adc_c_9b6e839a____REVSH|
#line 128
|__asm___9_bsp_adc_c_9b6e839a____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
