; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_key.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_key.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Include -I..\..\User -I..\..\User\bsp\inc -I..\..\User\bsp -I..\..\User\app\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -D__MICROLIB -D__UVISION_VERSION=527 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\bsp_key.crf ..\..\User\bsp\src\bsp_key.c]
                          THUMB

                          AREA ||i.IsKeyDown1||, CODE, READONLY, ALIGN=2

                  IsKeyDown1 PROC
;;;91     #if 1	/* 为了区分3个事件:　K1单独按下, K2单独按下， K1和K2同时按下 */
;;;92     static uint8_t IsKeyDown1(void)
000000  4809              LDR      r0,|L1.40|
;;;93     {
;;;94     	if ((GPIO_PORT_K1->IDR & GPIO_PIN_K1) == 0 && (GPIO_PORT_K2->IDR & GPIO_PIN_K2) == 0
000002  6800              LDR      r0,[r0,#0]
000004  f0000001          AND      r0,r0,#1
000008  b958              CBNZ     r0,|L1.34|
00000a  4807              LDR      r0,|L1.40|
00000c  6800              LDR      r0,[r0,#0]
00000e  f0000002          AND      r0,r0,#2
000012  b930              CBNZ     r0,|L1.34|
;;;95     		&& (GPIO_PORT_K3->IDR & GPIO_PIN_K3) != 0)
000014  4804              LDR      r0,|L1.40|
000016  6800              LDR      r0,[r0,#0]
000018  f0000001          AND      r0,r0,#1
00001c  b108              CBZ      r0,|L1.34|
;;;96     		return 1;
00001e  2001              MOVS     r0,#1
                  |L1.32|
;;;97     	else 
;;;98     		return 0;
;;;99     }
000020  4770              BX       lr
                  |L1.34|
000022  2000              MOVS     r0,#0                 ;98
000024  e7fc              B        |L1.32|
;;;100    static uint8_t IsKeyDown2(void)
                          ENDP

000026  0000              DCW      0x0000
                  |L1.40|
                          DCD      0x40010808

                          AREA ||i.IsKeyDown10||, CODE, READONLY, ALIGN=2

                  IsKeyDown10 PROC
;;;123    }
;;;124    static uint8_t IsKeyDown10(void)	/* K2 K3组合键 */
000000  4809              LDR      r0,|L2.40|
;;;125    {
;;;126    	if ((GPIO_PORT_K1->IDR & GPIO_PIN_K1) != 0 && (GPIO_PORT_K2->IDR & GPIO_PIN_K2) != 0
000002  6800              LDR      r0,[r0,#0]
000004  f0000001          AND      r0,r0,#1
000008  b158              CBZ      r0,|L2.34|
00000a  4807              LDR      r0,|L2.40|
00000c  6800              LDR      r0,[r0,#0]
00000e  f0000002          AND      r0,r0,#2
000012  b130              CBZ      r0,|L2.34|
;;;127    		&& (GPIO_PORT_K3->IDR & GPIO_PIN_K3) == 0)
000014  4804              LDR      r0,|L2.40|
000016  6800              LDR      r0,[r0,#0]
000018  f0000001          AND      r0,r0,#1
00001c  b908              CBNZ     r0,|L2.34|
;;;128    		return 1;
00001e  2001              MOVS     r0,#1
                  |L2.32|
;;;129    	else 
;;;130    		return 0;
;;;131    }
000020  4770              BX       lr
                  |L2.34|
000022  2000              MOVS     r0,#0                 ;130
000024  e7fc              B        |L2.32|
;;;132    #else	
                          ENDP

000026  0000              DCW      0x0000
                  |L2.40|
                          DCD      0x40010808

                          AREA ||i.IsKeyDown2||, CODE, READONLY, ALIGN=2

                  IsKeyDown2 PROC
;;;99     }
;;;100    static uint8_t IsKeyDown2(void)
000000  4809              LDR      r0,|L3.40|
;;;101    {
;;;102    	if ((GPIO_PORT_K1->IDR & GPIO_PIN_K1) != 0 && (GPIO_PORT_K2->IDR & GPIO_PIN_K2) != 0
000002  6800              LDR      r0,[r0,#0]
000004  f0000001          AND      r0,r0,#1
000008  b158              CBZ      r0,|L3.34|
00000a  4807              LDR      r0,|L3.40|
00000c  6800              LDR      r0,[r0,#0]
00000e  f0000002          AND      r0,r0,#2
000012  b130              CBZ      r0,|L3.34|
;;;103    		&& (GPIO_PORT_K3->IDR & GPIO_PIN_K3) != 0)
000014  4804              LDR      r0,|L3.40|
000016  6800              LDR      r0,[r0,#0]
000018  f0000001          AND      r0,r0,#1
00001c  b108              CBZ      r0,|L3.34|
;;;104    		return 1;
00001e  2001              MOVS     r0,#1
                  |L3.32|
;;;105    	else 
;;;106    		return 0;
;;;107    }
000020  4770              BX       lr
                  |L3.34|
000022  2000              MOVS     r0,#0                 ;106
000024  e7fc              B        |L3.32|
;;;108    static uint8_t IsKeyDown3(void)
                          ENDP

000026  0000              DCW      0x0000
                  |L3.40|
                          DCD      0x40010808

                          AREA ||i.IsKeyDown3||, CODE, READONLY, ALIGN=2

                  IsKeyDown3 PROC
;;;107    }
;;;108    static uint8_t IsKeyDown3(void)
000000  4809              LDR      r0,|L4.40|
;;;109    {
;;;110    	if ((GPIO_PORT_K1->IDR & GPIO_PIN_K1) != 0 && (GPIO_PORT_K2->IDR & GPIO_PIN_K2) == 0
000002  6800              LDR      r0,[r0,#0]
000004  f0000001          AND      r0,r0,#1
000008  b158              CBZ      r0,|L4.34|
00000a  4807              LDR      r0,|L4.40|
00000c  6800              LDR      r0,[r0,#0]
00000e  f0000002          AND      r0,r0,#2
000012  b930              CBNZ     r0,|L4.34|
;;;111    		&& (GPIO_PORT_K3->IDR & GPIO_PIN_K3) == 0)
000014  4804              LDR      r0,|L4.40|
000016  6800              LDR      r0,[r0,#0]
000018  f0000001          AND      r0,r0,#1
00001c  b908              CBNZ     r0,|L4.34|
;;;112    		return 1;
00001e  2001              MOVS     r0,#1
                  |L4.32|
;;;113    	else 
;;;114    		return 0;
;;;115    }
000020  4770              BX       lr
                  |L4.34|
000022  2000              MOVS     r0,#0                 ;114
000024  e7fc              B        |L4.32|
;;;116    static uint8_t IsKeyDown9(void)	/* K1 K2组合键 */
                          ENDP

000026  0000              DCW      0x0000
                  |L4.40|
                          DCD      0x40010808

                          AREA ||i.IsKeyDown4||, CODE, READONLY, ALIGN=2

                  IsKeyDown4 PROC
;;;141    /* 5方向摇杆 */
;;;142    static uint8_t IsKeyDown4(void) {if ((GPIO_PORT_K4->IDR & GPIO_PIN_K4) == 0) return 1;else return 0;}
000000  4804              LDR      r0,|L5.20|
000002  6800              LDR      r0,[r0,#0]
000004  f0000001          AND      r0,r0,#1
000008  b908              CBNZ     r0,|L5.14|
00000a  2001              MOVS     r0,#1
                  |L5.12|
00000c  4770              BX       lr
                  |L5.14|
00000e  2000              MOVS     r0,#0
000010  e7fc              B        |L5.12|
;;;143    static uint8_t IsKeyDown5(void) {if ((GPIO_PORT_K5->IDR & GPIO_PIN_K5) == 0) return 1;else return 0;}
                          ENDP

000012  0000              DCW      0x0000
                  |L5.20|
                          DCD      0x40010808

                          AREA ||i.IsKeyDown5||, CODE, READONLY, ALIGN=2

                  IsKeyDown5 PROC
;;;142    static uint8_t IsKeyDown4(void) {if ((GPIO_PORT_K4->IDR & GPIO_PIN_K4) == 0) return 1;else return 0;}
;;;143    static uint8_t IsKeyDown5(void) {if ((GPIO_PORT_K5->IDR & GPIO_PIN_K5) == 0) return 1;else return 0;}
000000  4804              LDR      r0,|L6.20|
000002  6800              LDR      r0,[r0,#0]
000004  f0000001          AND      r0,r0,#1
000008  b908              CBNZ     r0,|L6.14|
00000a  2001              MOVS     r0,#1
                  |L6.12|
00000c  4770              BX       lr
                  |L6.14|
00000e  2000              MOVS     r0,#0
000010  e7fc              B        |L6.12|
;;;144    static uint8_t IsKeyDown6(void) {if ((GPIO_PORT_K6->IDR & GPIO_PIN_K6) == 0) return 1;else return 0;}
                          ENDP

000012  0000              DCW      0x0000
                  |L6.20|
                          DCD      0x40010808

                          AREA ||i.IsKeyDown6||, CODE, READONLY, ALIGN=2

                  IsKeyDown6 PROC
;;;143    static uint8_t IsKeyDown5(void) {if ((GPIO_PORT_K5->IDR & GPIO_PIN_K5) == 0) return 1;else return 0;}
;;;144    static uint8_t IsKeyDown6(void) {if ((GPIO_PORT_K6->IDR & GPIO_PIN_K6) == 0) return 1;else return 0;}
000000  4804              LDR      r0,|L7.20|
000002  6800              LDR      r0,[r0,#0]
000004  f0000001          AND      r0,r0,#1
000008  b908              CBNZ     r0,|L7.14|
00000a  2001              MOVS     r0,#1
                  |L7.12|
00000c  4770              BX       lr
                  |L7.14|
00000e  2000              MOVS     r0,#0
000010  e7fc              B        |L7.12|
;;;145    static uint8_t IsKeyDown7(void) {if ((GPIO_PORT_K7->IDR & GPIO_PIN_K7) == 0) return 1;else return 0;}
                          ENDP

000012  0000              DCW      0x0000
                  |L7.20|
                          DCD      0x40010808

                          AREA ||i.IsKeyDown7||, CODE, READONLY, ALIGN=2

                  IsKeyDown7 PROC
;;;144    static uint8_t IsKeyDown6(void) {if ((GPIO_PORT_K6->IDR & GPIO_PIN_K6) == 0) return 1;else return 0;}
;;;145    static uint8_t IsKeyDown7(void) {if ((GPIO_PORT_K7->IDR & GPIO_PIN_K7) == 0) return 1;else return 0;}
000000  4804              LDR      r0,|L8.20|
000002  6800              LDR      r0,[r0,#0]
000004  f0000001          AND      r0,r0,#1
000008  b908              CBNZ     r0,|L8.14|
00000a  2001              MOVS     r0,#1
                  |L8.12|
00000c  4770              BX       lr
                  |L8.14|
00000e  2000              MOVS     r0,#0
000010  e7fc              B        |L8.12|
;;;146    static uint8_t IsKeyDown8(void) {if ((GPIO_PORT_K8->IDR & GPIO_PIN_K8) == 0) return 1;else return 0;}
                          ENDP

000012  0000              DCW      0x0000
                  |L8.20|
                          DCD      0x40010808

                          AREA ||i.IsKeyDown8||, CODE, READONLY, ALIGN=2

                  IsKeyDown8 PROC
;;;145    static uint8_t IsKeyDown7(void) {if ((GPIO_PORT_K7->IDR & GPIO_PIN_K7) == 0) return 1;else return 0;}
;;;146    static uint8_t IsKeyDown8(void) {if ((GPIO_PORT_K8->IDR & GPIO_PIN_K8) == 0) return 1;else return 0;}
000000  4804              LDR      r0,|L9.20|
000002  6800              LDR      r0,[r0,#0]
000004  f0000001          AND      r0,r0,#1
000008  b908              CBNZ     r0,|L9.14|
00000a  2001              MOVS     r0,#1
                  |L9.12|
00000c  4770              BX       lr
                  |L9.14|
00000e  2000              MOVS     r0,#0
000010  e7fc              B        |L9.12|
;;;147    
                          ENDP

000012  0000              DCW      0x0000
                  |L9.20|
                          DCD      0x40010808

                          AREA ||i.IsKeyDown9||, CODE, READONLY, ALIGN=2

                  IsKeyDown9 PROC
;;;115    }
;;;116    static uint8_t IsKeyDown9(void)	/* K1 K2组合键 */
000000  4809              LDR      r0,|L10.40|
;;;117    {
;;;118    	if ((GPIO_PORT_K1->IDR & GPIO_PIN_K1) == 0 && (GPIO_PORT_K2->IDR & GPIO_PIN_K2) != 0
000002  6800              LDR      r0,[r0,#0]
000004  f0000001          AND      r0,r0,#1
000008  b958              CBNZ     r0,|L10.34|
00000a  4807              LDR      r0,|L10.40|
00000c  6800              LDR      r0,[r0,#0]
00000e  f0000002          AND      r0,r0,#2
000012  b130              CBZ      r0,|L10.34|
;;;119    		&& (GPIO_PORT_K3->IDR & GPIO_PIN_K3) != 0)
000014  4804              LDR      r0,|L10.40|
000016  6800              LDR      r0,[r0,#0]
000018  f0000001          AND      r0,r0,#1
00001c  b108              CBZ      r0,|L10.34|
;;;120    		return 1;
00001e  2001              MOVS     r0,#1
                  |L10.32|
;;;121    	else 
;;;122    		return 0;
;;;123    }
000020  4770              BX       lr
                  |L10.34|
000022  2000              MOVS     r0,#0                 ;122
000024  e7fc              B        |L10.32|
;;;124    static uint8_t IsKeyDown10(void)	/* K2 K3组合键 */
                          ENDP

000026  0000              DCW      0x0000
                  |L10.40|
                          DCD      0x40010808

                          AREA ||i.bsp_ClearKey||, CODE, READONLY, ALIGN=2

                  bsp_ClearKey PROC
;;;277    */
;;;278    void bsp_ClearKey(void)
000000  4802              LDR      r0,|L11.12|
;;;279    {
;;;280    	s_tKey.Read = s_tKey.Write;
000002  7ac0              LDRB     r0,[r0,#0xb]  ; s_tKey
000004  4901              LDR      r1,|L11.12|
000006  7288              STRB     r0,[r1,#0xa]
;;;281    }
000008  4770              BX       lr
;;;282    
                          ENDP

00000a  0000              DCW      0x0000
                  |L11.12|
                          DCD      s_tKey

                          AREA ||i.bsp_DetectKey||, CODE, READONLY, ALIGN=2

                  bsp_DetectKey PROC
;;;398    */
;;;399    static void bsp_DetectKey(uint8_t i)
000000  b570              PUSH     {r4-r6,lr}
;;;400    {
000002  4605              MOV      r5,r0
;;;401    	KEY_T *pBtn;
;;;402    
;;;403    	/*
;;;404    		如果没有初始化按键函数，则报错
;;;405    		if (s_tBtn[i].IsKeyDownFunc == 0)
;;;406    		{
;;;407    			printf("Fault : DetectButton(), s_tBtn[i].IsKeyDownFunc undefine");
;;;408    		}
;;;409    	*/
;;;410    
;;;411    	pBtn = &s_tBtn[i];
000004  4830              LDR      r0,|L12.200|
000006  eb001405          ADD      r4,r0,r5,LSL #4
;;;412    	if (pBtn->IsKeyDownFunc())
00000a  6820              LDR      r0,[r4,#0]
00000c  4780              BLX      r0
00000e  2800              CMP      r0,#0
000010  d03e              BEQ      |L12.144|
;;;413    	{
;;;414    		if (pBtn->Count < KEY_FILTER_TIME)
000012  7920              LDRB     r0,[r4,#4]
000014  2805              CMP      r0,#5
000016  da02              BGE      |L12.30|
;;;415    		{
;;;416    			pBtn->Count = KEY_FILTER_TIME;
000018  2005              MOVS     r0,#5
00001a  7120              STRB     r0,[r4,#4]
00001c  e052              B        |L12.196|
                  |L12.30|
;;;417    		}
;;;418    		else if(pBtn->Count < 2 * KEY_FILTER_TIME)
00001e  7920              LDRB     r0,[r4,#4]
000020  280a              CMP      r0,#0xa
000022  da03              BGE      |L12.44|
;;;419    		{
;;;420    			pBtn->Count++;
000024  7920              LDRB     r0,[r4,#4]
000026  1c40              ADDS     r0,r0,#1
000028  7120              STRB     r0,[r4,#4]
00002a  e04b              B        |L12.196|
                  |L12.44|
;;;421    		}
;;;422    		else
;;;423    		{
;;;424    			if (pBtn->State == 0)
00002c  7aa0              LDRB     r0,[r4,#0xa]
00002e  b938              CBNZ     r0,|L12.64|
;;;425    			{
;;;426    				pBtn->State = 1;
000030  2001              MOVS     r0,#1
000032  72a0              STRB     r0,[r4,#0xa]
;;;427    
;;;428    				/* 发送按钮按下的消息 */
;;;429    				bsp_PutKey((uint8_t)(3 * i + 1));
000034  eb050145          ADD      r1,r5,r5,LSL #1
000038  1c49              ADDS     r1,r1,#1
00003a  b2c8              UXTB     r0,r1
00003c  f7fffffe          BL       bsp_PutKey
                  |L12.64|
;;;430    			}
;;;431    
;;;432    			if (pBtn->LongTime > 0)
000040  8920              LDRH     r0,[r4,#8]
000042  2800              CMP      r0,#0
000044  dd3e              BLE      |L12.196|
;;;433    			{
;;;434    				if (pBtn->LongCount < pBtn->LongTime)
000046  88e0              LDRH     r0,[r4,#6]
000048  8921              LDRH     r1,[r4,#8]
00004a  4288              CMP      r0,r1
00004c  da0d              BGE      |L12.106|
;;;435    				{
;;;436    					/* 发送按钮持续按下的消息 */
;;;437    					if (++pBtn->LongCount == pBtn->LongTime)
00004e  88e0              LDRH     r0,[r4,#6]
000050  1c40              ADDS     r0,r0,#1
000052  b280              UXTH     r0,r0
000054  80e0              STRH     r0,[r4,#6]
000056  8921              LDRH     r1,[r4,#8]
000058  4288              CMP      r0,r1
00005a  d133              BNE      |L12.196|
;;;438    					{
;;;439    						/* 键值放入按键FIFO */
;;;440    						bsp_PutKey((uint8_t)(3 * i + 3));
00005c  eb050145          ADD      r1,r5,r5,LSL #1
000060  1cc9              ADDS     r1,r1,#3
000062  b2c8              UXTB     r0,r1
000064  f7fffffe          BL       bsp_PutKey
000068  e02c              B        |L12.196|
                  |L12.106|
;;;441    					}
;;;442    				}
;;;443    				else
;;;444    				{
;;;445    					if (pBtn->RepeatSpeed > 0)
00006a  7ae0              LDRB     r0,[r4,#0xb]
00006c  2800              CMP      r0,#0
00006e  dd29              BLE      |L12.196|
;;;446    					{
;;;447    						if (++pBtn->RepeatCount >= pBtn->RepeatSpeed)
000070  7b20              LDRB     r0,[r4,#0xc]
000072  1c40              ADDS     r0,r0,#1
000074  b2c0              UXTB     r0,r0
000076  7320              STRB     r0,[r4,#0xc]
000078  7ae1              LDRB     r1,[r4,#0xb]
00007a  4288              CMP      r0,r1
00007c  db22              BLT      |L12.196|
;;;448    						{
;;;449    							pBtn->RepeatCount = 0;
00007e  2000              MOVS     r0,#0
000080  7320              STRB     r0,[r4,#0xc]
;;;450    							/* 常按键后，每隔10ms发送1个按键 */
;;;451    							bsp_PutKey((uint8_t)(3 * i + 1));
000082  eb050145          ADD      r1,r5,r5,LSL #1
000086  1c49              ADDS     r1,r1,#1
000088  b2c8              UXTB     r0,r1
00008a  f7fffffe          BL       bsp_PutKey
00008e  e019              B        |L12.196|
                  |L12.144|
;;;452    						}
;;;453    					}
;;;454    				}
;;;455    			}
;;;456    		}
;;;457    	}
;;;458    	else
;;;459    	{
;;;460    		if(pBtn->Count > KEY_FILTER_TIME)
000090  7920              LDRB     r0,[r4,#4]
000092  2805              CMP      r0,#5
000094  dd02              BLE      |L12.156|
;;;461    		{
;;;462    			pBtn->Count = KEY_FILTER_TIME;
000096  2005              MOVS     r0,#5
000098  7120              STRB     r0,[r4,#4]
00009a  e010              B        |L12.190|
                  |L12.156|
;;;463    		}
;;;464    		else if(pBtn->Count != 0)
00009c  7920              LDRB     r0,[r4,#4]
00009e  b118              CBZ      r0,|L12.168|
;;;465    		{
;;;466    			pBtn->Count--;
0000a0  7920              LDRB     r0,[r4,#4]
0000a2  1e40              SUBS     r0,r0,#1
0000a4  7120              STRB     r0,[r4,#4]
0000a6  e00a              B        |L12.190|
                  |L12.168|
;;;467    		}
;;;468    		else
;;;469    		{
;;;470    			if (pBtn->State == 1)
0000a8  7aa0              LDRB     r0,[r4,#0xa]
0000aa  2801              CMP      r0,#1
0000ac  d107              BNE      |L12.190|
;;;471    			{
;;;472    				pBtn->State = 0;
0000ae  2000              MOVS     r0,#0
0000b0  72a0              STRB     r0,[r4,#0xa]
;;;473    
;;;474    				/* 发送按钮弹起的消息 */
;;;475    				bsp_PutKey((uint8_t)(3 * i + 2));
0000b2  eb050145          ADD      r1,r5,r5,LSL #1
0000b6  1c89              ADDS     r1,r1,#2
0000b8  b2c8              UXTB     r0,r1
0000ba  f7fffffe          BL       bsp_PutKey
                  |L12.190|
;;;476    			}
;;;477    		}
;;;478    
;;;479    		pBtn->LongCount = 0;
0000be  2000              MOVS     r0,#0
0000c0  80e0              STRH     r0,[r4,#6]
;;;480    		pBtn->RepeatCount = 0;
0000c2  7320              STRB     r0,[r4,#0xc]
                  |L12.196|
;;;481    	}
;;;482    }
0000c4  bd70              POP      {r4-r6,pc}
;;;483    
                          ENDP

0000c6  0000              DCW      0x0000
                  |L12.200|
                          DCD      s_tBtn

                          AREA ||i.bsp_GetKey||, CODE, READONLY, ALIGN=2

                  bsp_GetKey PROC
;;;190    */
;;;191    uint8_t bsp_GetKey(void)
000000  480b              LDR      r0,|L13.48|
;;;192    {
;;;193    	uint8_t ret;
;;;194    
;;;195    	if (s_tKey.Read == s_tKey.Write)
000002  7a80              LDRB     r0,[r0,#0xa]  ; s_tKey
000004  4a0a              LDR      r2,|L13.48|
000006  7ad2              LDRB     r2,[r2,#0xb]  ; s_tKey
000008  4290              CMP      r0,r2
00000a  d101              BNE      |L13.16|
;;;196    	{
;;;197    		return KEY_NONE;
00000c  2000              MOVS     r0,#0
                  |L13.14|
;;;198    	}
;;;199    	else
;;;200    	{
;;;201    		ret = s_tKey.Buf[s_tKey.Read];
;;;202    
;;;203    		if (++s_tKey.Read >= KEY_FIFO_SIZE)
;;;204    		{
;;;205    			s_tKey.Read = 0;
;;;206    		}
;;;207    		return ret;
;;;208    	}
;;;209    }
00000e  4770              BX       lr
                  |L13.16|
000010  4807              LDR      r0,|L13.48|
000012  7a80              LDRB     r0,[r0,#0xa]          ;201  ; s_tKey
000014  4a06              LDR      r2,|L13.48|
000016  5c11              LDRB     r1,[r2,r0]            ;201
000018  4610              MOV      r0,r2                 ;203
00001a  7a80              LDRB     r0,[r0,#0xa]          ;203  ; s_tKey
00001c  1c40              ADDS     r0,r0,#1              ;203
00001e  b2c0              UXTB     r0,r0                 ;203
000020  7290              STRB     r0,[r2,#0xa]          ;203
000022  280a              CMP      r0,#0xa               ;203
000024  db01              BLT      |L13.42|
000026  2000              MOVS     r0,#0                 ;205
000028  7290              STRB     r0,[r2,#0xa]          ;205
                  |L13.42|
00002a  4608              MOV      r0,r1                 ;207
00002c  e7ef              B        |L13.14|
;;;210    
                          ENDP

00002e  0000              DCW      0x0000
                  |L13.48|
                          DCD      s_tKey

                          AREA ||i.bsp_GetKey2||, CODE, READONLY, ALIGN=2

                  bsp_GetKey2 PROC
;;;218    */
;;;219    uint8_t bsp_GetKey2(void)
000000  480b              LDR      r0,|L14.48|
;;;220    {
;;;221    	uint8_t ret;
;;;222    
;;;223    	if (s_tKey.Read2 == s_tKey.Write)
000002  7b00              LDRB     r0,[r0,#0xc]  ; s_tKey
000004  4a0a              LDR      r2,|L14.48|
000006  7ad2              LDRB     r2,[r2,#0xb]  ; s_tKey
000008  4290              CMP      r0,r2
00000a  d101              BNE      |L14.16|
;;;224    	{
;;;225    		return KEY_NONE;
00000c  2000              MOVS     r0,#0
                  |L14.14|
;;;226    	}
;;;227    	else
;;;228    	{
;;;229    		ret = s_tKey.Buf[s_tKey.Read2];
;;;230    
;;;231    		if (++s_tKey.Read2 >= KEY_FIFO_SIZE)
;;;232    		{
;;;233    			s_tKey.Read2 = 0;
;;;234    		}
;;;235    		return ret;
;;;236    	}
;;;237    }
00000e  4770              BX       lr
                  |L14.16|
000010  4807              LDR      r0,|L14.48|
000012  7b00              LDRB     r0,[r0,#0xc]          ;229  ; s_tKey
000014  4a06              LDR      r2,|L14.48|
000016  5c11              LDRB     r1,[r2,r0]            ;229
000018  4610              MOV      r0,r2                 ;231
00001a  7b00              LDRB     r0,[r0,#0xc]          ;231  ; s_tKey
00001c  1c40              ADDS     r0,r0,#1              ;231
00001e  b2c0              UXTB     r0,r0                 ;231
000020  7310              STRB     r0,[r2,#0xc]          ;231
000022  280a              CMP      r0,#0xa               ;231
000024  db01              BLT      |L14.42|
000026  2000              MOVS     r0,#0                 ;233
000028  7310              STRB     r0,[r2,#0xc]          ;233
                  |L14.42|
00002a  4608              MOV      r0,r1                 ;235
00002c  e7ef              B        |L14.14|
;;;238    
                          ENDP

00002e  0000              DCW      0x0000
                  |L14.48|
                          DCD      s_tKey

                          AREA ||i.bsp_GetKeyState||, CODE, READONLY, ALIGN=2

                  bsp_GetKeyState PROC
;;;246    */
;;;247    uint8_t bsp_GetKeyState(KEY_ID_E _ucKeyID)
000000  4601              MOV      r1,r0
;;;248    {
;;;249    	return s_tBtn[_ucKeyID].State;
000002  4802              LDR      r0,|L15.12|
000004  eb001001          ADD      r0,r0,r1,LSL #4
000008  7a80              LDRB     r0,[r0,#0xa]
;;;250    }
00000a  4770              BX       lr
;;;251    
                          ENDP

                  |L15.12|
                          DCD      s_tBtn

                          AREA ||i.bsp_InitKey||, CODE, READONLY, ALIGN=1

                  bsp_InitKey PROC
;;;158    */
;;;159    void bsp_InitKey(void)
000000  b510              PUSH     {r4,lr}
;;;160    {
;;;161    	bsp_InitKeyVar();		/* 初始化按键变量 */
000002  f7fffffe          BL       bsp_InitKeyVar
;;;162    	bsp_InitKeyHard();		/* 初始化按键硬件 */
000006  f7fffffe          BL       bsp_InitKeyHard
;;;163    }
00000a  bd10              POP      {r4,pc}
;;;164    
                          ENDP


                          AREA ||i.bsp_InitKeyHard||, CODE, READONLY, ALIGN=2

                  bsp_InitKeyHard PROC
;;;290    */
;;;291    static void bsp_InitKeyHard(void)
000000  b508              PUSH     {r3,lr}
;;;292    {
;;;293    	GPIO_InitTypeDef GPIO_InitStructure;
;;;294    
;;;295    	/* 第1步：打开GPIO时钟 */
;;;296    	RCC_APB2PeriphClockCmd(RCC_ALL_KEY, ENABLE);
000002  2101              MOVS     r1,#1
000004  2014              MOVS     r0,#0x14
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;297    
;;;298    	/* 第2步：配置所有的按键GPIO为浮动输入模式(实际上CPU复位后就是输入状态) */
;;;299    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00000a  2003              MOVS     r0,#3
00000c  f88d0002          STRB     r0,[sp,#2]
;;;300    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;	/* 输入浮空模式 */
000010  2004              MOVS     r0,#4
000012  f88d0003          STRB     r0,[sp,#3]
;;;301    	
;;;302    	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_K1;
000016  2001              MOVS     r0,#1
000018  f8ad0000          STRH     r0,[sp,#0]
;;;303    	GPIO_Init(GPIO_PORT_K1, &GPIO_InitStructure);
00001c  4669              MOV      r1,sp
00001e  481e              LDR      r0,|L17.152|
000020  f7fffffe          BL       GPIO_Init
;;;304    
;;;305    	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_K2;
000024  2002              MOVS     r0,#2
000026  f8ad0000          STRH     r0,[sp,#0]
;;;306    	GPIO_Init(GPIO_PORT_K2, &GPIO_InitStructure);
00002a  4669              MOV      r1,sp
00002c  481a              LDR      r0,|L17.152|
00002e  f7fffffe          BL       GPIO_Init
;;;307    
;;;308    	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_K3;
000032  2001              MOVS     r0,#1
000034  f8ad0000          STRH     r0,[sp,#0]
;;;309    	GPIO_Init(GPIO_PORT_K3, &GPIO_InitStructure);
000038  4669              MOV      r1,sp
00003a  4817              LDR      r0,|L17.152|
00003c  f7fffffe          BL       GPIO_Init
;;;310    
;;;311    	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_K4;
000040  2001              MOVS     r0,#1
000042  f8ad0000          STRH     r0,[sp,#0]
;;;312    	GPIO_Init(GPIO_PORT_K4, &GPIO_InitStructure);
000046  4669              MOV      r1,sp
000048  4813              LDR      r0,|L17.152|
00004a  f7fffffe          BL       GPIO_Init
;;;313    
;;;314    	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_K5;
00004e  2001              MOVS     r0,#1
000050  f8ad0000          STRH     r0,[sp,#0]
;;;315    	GPIO_Init(GPIO_PORT_K5, &GPIO_InitStructure);
000054  4669              MOV      r1,sp
000056  4810              LDR      r0,|L17.152|
000058  f7fffffe          BL       GPIO_Init
;;;316    
;;;317    	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_K6;
00005c  2001              MOVS     r0,#1
00005e  f8ad0000          STRH     r0,[sp,#0]
;;;318    	GPIO_Init(GPIO_PORT_K6, &GPIO_InitStructure);
000062  4669              MOV      r1,sp
000064  480c              LDR      r0,|L17.152|
000066  f7fffffe          BL       GPIO_Init
;;;319    
;;;320    	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_K7;
00006a  2001              MOVS     r0,#1
00006c  f8ad0000          STRH     r0,[sp,#0]
;;;321    	GPIO_Init(GPIO_PORT_K7, &GPIO_InitStructure);
000070  4669              MOV      r1,sp
000072  4809              LDR      r0,|L17.152|
000074  f7fffffe          BL       GPIO_Init
;;;322    
;;;323    	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_K8;
000078  2001              MOVS     r0,#1
00007a  f8ad0000          STRH     r0,[sp,#0]
;;;324    	GPIO_Init(GPIO_PORT_K8, &GPIO_InitStructure);
00007e  4669              MOV      r1,sp
000080  4805              LDR      r0,|L17.152|
000082  f7fffffe          BL       GPIO_Init
;;;325        
;;;326    
;;;327        
;;;328        GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0|GPIO_Pin_1|GPIO_Pin_2|GPIO_Pin_3|GPIO_Pin_4|GPIO_Pin_5|GPIO_Pin_6|GPIO_Pin_7;
000086  20ff              MOVS     r0,#0xff
000088  f8ad0000          STRH     r0,[sp,#0]
;;;329    	GPIO_Init(GPIOC, &GPIO_InitStructure);
00008c  4669              MOV      r1,sp
00008e  4803              LDR      r0,|L17.156|
000090  f7fffffe          BL       GPIO_Init
;;;330    }
000094  bd08              POP      {r3,pc}
;;;331    
                          ENDP

000096  0000              DCW      0x0000
                  |L17.152|
                          DCD      0x40010800
                  |L17.156|
                          DCD      0x40011000

                          AREA ||i.bsp_InitKeyVar||, CODE, READONLY, ALIGN=2

                  bsp_InitKeyVar PROC
;;;339    */
;;;340    static void bsp_InitKeyVar(void)
000000  2100              MOVS     r1,#0
;;;341    {
;;;342    	uint8_t i;
;;;343    
;;;344    	/* 对按键FIFO读写指针清零 */
;;;345    	s_tKey.Read = 0;
000002  4a28              LDR      r2,|L18.164|
000004  7291              STRB     r1,[r2,#0xa]
;;;346    	s_tKey.Write = 0;
000006  72d1              STRB     r1,[r2,#0xb]
;;;347    	s_tKey.Read2 = 0;
000008  7311              STRB     r1,[r2,#0xc]
;;;348    
;;;349    	/* 给每个按键结构体成员变量赋一组缺省值 */
;;;350    	for (i = 0; i < KEY_COUNT; i++)
00000a  2000              MOVS     r0,#0
00000c  e018              B        |L18.64|
                  |L18.14|
;;;351    	{
;;;352    		s_tBtn[i].LongTime = KEY_LONG_TIME;			/* 长按时间 0 表示不检测长按键事件 */
00000e  2164              MOVS     r1,#0x64
000010  4a25              LDR      r2,|L18.168|
000012  eb021200          ADD      r2,r2,r0,LSL #4
000016  8111              STRH     r1,[r2,#8]
;;;353    		s_tBtn[i].Count = KEY_FILTER_TIME / 2;		/* 计数器设置为滤波时间的一半 */
000018  2102              MOVS     r1,#2
00001a  4a23              LDR      r2,|L18.168|
00001c  eb021200          ADD      r2,r2,r0,LSL #4
000020  7111              STRB     r1,[r2,#4]
;;;354    		s_tBtn[i].State = 0;							/* 按键缺省状态，0为未按下 */
000022  2100              MOVS     r1,#0
000024  4a20              LDR      r2,|L18.168|
000026  eb021200          ADD      r2,r2,r0,LSL #4
00002a  7291              STRB     r1,[r2,#0xa]
;;;355    		//s_tBtn[i].KeyCodeDown = 3 * i + 1;				/* 按键按下的键值代码 */
;;;356    		//s_tBtn[i].KeyCodeUp   = 3 * i + 2;				/* 按键弹起的键值代码 */
;;;357    		//s_tBtn[i].KeyCodeLong = 3 * i + 3;				/* 按键被持续按下的键值代码 */
;;;358    		s_tBtn[i].RepeatSpeed = 0;						/* 按键连发的速度，0表示不支持连发 */
00002c  4a1e              LDR      r2,|L18.168|
00002e  eb021200          ADD      r2,r2,r0,LSL #4
000032  72d1              STRB     r1,[r2,#0xb]
;;;359    		s_tBtn[i].RepeatCount = 0;						/* 连发计数器 */
000034  4a1c              LDR      r2,|L18.168|
000036  eb021200          ADD      r2,r2,r0,LSL #4
00003a  7311              STRB     r1,[r2,#0xc]
00003c  1c41              ADDS     r1,r0,#1              ;350
00003e  b2c8              UXTB     r0,r1                 ;350
                  |L18.64|
000040  280a              CMP      r0,#0xa               ;350
000042  dbe4              BLT      |L18.14|
;;;360    	}
;;;361    
;;;362    	/* 如果需要单独更改某个按键的参数，可以在此单独重新赋值 */
;;;363    	/* 比如，我们希望按键1按下超过1秒后，自动重发相同键值 */
;;;364    	s_tBtn[KID_JOY_U].LongTime = 100;
000044  2264              MOVS     r2,#0x64
000046  4918              LDR      r1,|L18.168|
000048  870a              STRH     r2,[r1,#0x38]
;;;365    	s_tBtn[KID_JOY_U].RepeatSpeed = 5;	/* 每隔50ms自动发送键值 */
00004a  2205              MOVS     r2,#5
00004c  f881203b          STRB     r2,[r1,#0x3b]
;;;366    
;;;367    	s_tBtn[KID_JOY_D].LongTime = 100;
000050  2264              MOVS     r2,#0x64
000052  f8a12048          STRH     r2,[r1,#0x48]
;;;368    	s_tBtn[KID_JOY_D].RepeatSpeed = 5;	/* 每隔50ms自动发送键值 */
000056  2205              MOVS     r2,#5
000058  f881204b          STRB     r2,[r1,#0x4b]
;;;369    
;;;370    	s_tBtn[KID_JOY_L].LongTime = 100;
00005c  2264              MOVS     r2,#0x64
00005e  f8a12058          STRH     r2,[r1,#0x58]
;;;371    	s_tBtn[KID_JOY_L].RepeatSpeed = 5;	/* 每隔50ms自动发送键值 */
000062  2205              MOVS     r2,#5
000064  f881205b          STRB     r2,[r1,#0x5b]
;;;372    
;;;373    	s_tBtn[KID_JOY_R].LongTime = 100;
000068  2264              MOVS     r2,#0x64
00006a  f8a12068          STRH     r2,[r1,#0x68]
;;;374    	s_tBtn[KID_JOY_R].RepeatSpeed = 5;	/* 每隔50ms自动发送键值 */
00006e  2205              MOVS     r2,#5
000070  f881206b          STRB     r2,[r1,#0x6b]
;;;375    
;;;376    	/* 判断按键按下的函数 */
;;;377    	s_tBtn[0].IsKeyDownFunc = IsKeyDown1;
000074  490d              LDR      r1,|L18.172|
000076  4a0c              LDR      r2,|L18.168|
000078  6011              STR      r1,[r2,#0]  ; s_tBtn
;;;378    	s_tBtn[1].IsKeyDownFunc = IsKeyDown2;
00007a  490d              LDR      r1,|L18.176|
00007c  6111              STR      r1,[r2,#0x10]  ; s_tBtn
;;;379    	s_tBtn[2].IsKeyDownFunc = IsKeyDown3;
00007e  490d              LDR      r1,|L18.180|
000080  6211              STR      r1,[r2,#0x20]  ; s_tBtn
;;;380    	s_tBtn[3].IsKeyDownFunc = IsKeyDown4;
000082  490d              LDR      r1,|L18.184|
000084  6311              STR      r1,[r2,#0x30]  ; s_tBtn
;;;381    	s_tBtn[4].IsKeyDownFunc = IsKeyDown5;
000086  490d              LDR      r1,|L18.188|
000088  6411              STR      r1,[r2,#0x40]  ; s_tBtn
;;;382    	s_tBtn[5].IsKeyDownFunc = IsKeyDown6;
00008a  490d              LDR      r1,|L18.192|
00008c  6511              STR      r1,[r2,#0x50]  ; s_tBtn
;;;383    	s_tBtn[6].IsKeyDownFunc = IsKeyDown7;
00008e  490d              LDR      r1,|L18.196|
000090  6611              STR      r1,[r2,#0x60]  ; s_tBtn
;;;384    	s_tBtn[7].IsKeyDownFunc = IsKeyDown8;
000092  490d              LDR      r1,|L18.200|
000094  6711              STR      r1,[r2,#0x70]  ; s_tBtn
;;;385    
;;;386    	/* 组合键 */
;;;387    	s_tBtn[8].IsKeyDownFunc = IsKeyDown9;
000096  490d              LDR      r1,|L18.204|
000098  f8c21080          STR      r1,[r2,#0x80]  ; s_tBtn
;;;388    	s_tBtn[9].IsKeyDownFunc = IsKeyDown10;
00009c  490c              LDR      r1,|L18.208|
00009e  f8c21090          STR      r1,[r2,#0x90]  ; s_tBtn
;;;389    }
0000a2  4770              BX       lr
;;;390    
                          ENDP

                  |L18.164|
                          DCD      s_tKey
                  |L18.168|
                          DCD      s_tBtn
                  |L18.172|
                          DCD      IsKeyDown1
                  |L18.176|
                          DCD      IsKeyDown2
                  |L18.180|
                          DCD      IsKeyDown3
                  |L18.184|
                          DCD      IsKeyDown4
                  |L18.188|
                          DCD      IsKeyDown5
                  |L18.192|
                          DCD      IsKeyDown6
                  |L18.196|
                          DCD      IsKeyDown7
                  |L18.200|
                          DCD      IsKeyDown8
                  |L18.204|
                          DCD      IsKeyDown9
                  |L18.208|
                          DCD      IsKeyDown10

                          AREA ||i.bsp_KeyScan||, CODE, READONLY, ALIGN=1

                  bsp_KeyScan PROC
;;;491    */
;;;492    void bsp_KeyScan(void)
000000  b510              PUSH     {r4,lr}
;;;493    {
;;;494    	uint8_t i;
;;;495    
;;;496    	for (i = 0; i < KEY_COUNT; i++)
000002  2400              MOVS     r4,#0
000004  e004              B        |L19.16|
                  |L19.6|
;;;497    	{
;;;498    		bsp_DetectKey(i);
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       bsp_DetectKey
00000c  1c60              ADDS     r0,r4,#1              ;496
00000e  b2c4              UXTB     r4,r0                 ;496
                  |L19.16|
000010  2c0a              CMP      r4,#0xa               ;496
000012  dbf8              BLT      |L19.6|
;;;499    	}
;;;500    }
000014  bd10              POP      {r4,pc}
;;;501    
                          ENDP


                          AREA ||i.bsp_PutKey||, CODE, READONLY, ALIGN=2

                  bsp_PutKey PROC
;;;172    */
;;;173    void bsp_PutKey(uint8_t _KeyCode)
000000  4906              LDR      r1,|L20.28|
;;;174    {
;;;175    	s_tKey.Buf[s_tKey.Write] = _KeyCode;
000002  7ac9              LDRB     r1,[r1,#0xb]  ; s_tKey
000004  4a05              LDR      r2,|L20.28|
000006  5450              STRB     r0,[r2,r1]
;;;176    
;;;177    	if (++s_tKey.Write  >= KEY_FIFO_SIZE)
000008  4611              MOV      r1,r2
00000a  7ac9              LDRB     r1,[r1,#0xb]  ; s_tKey
00000c  1c49              ADDS     r1,r1,#1
00000e  b2c9              UXTB     r1,r1
000010  72d1              STRB     r1,[r2,#0xb]
000012  290a              CMP      r1,#0xa
000014  db01              BLT      |L20.26|
;;;178    	{
;;;179    		s_tKey.Write = 0;
000016  2100              MOVS     r1,#0
000018  72d1              STRB     r1,[r2,#0xb]
                  |L20.26|
;;;180    	}
;;;181    }
00001a  4770              BX       lr
;;;182    
                          ENDP

                  |L20.28|
                          DCD      s_tKey

                          AREA ||i.bsp_Read485Address||, CODE, READONLY, ALIGN=2

                  bsp_Read485Address PROC
;;;501    
;;;502    uint8_t bsp_Read485Address(void)//连接时 ON 在上面 ON表示闭合 接地 低电平
000000  b510              PUSH     {r4,lr}
;;;503    {
;;;504        uint8_t temp=0x00;
000002  2400              MOVS     r4,#0
;;;505        if(GPIO_ReadInputDataBit(GPIOC,GPIO_Pin_0) == 0) //SEL0 -低电平 打到ON上 -表示最高位逻辑1
000004  2101              MOVS     r1,#1
000006  480e              LDR      r0,|L21.64|
000008  f7fffffe          BL       GPIO_ReadInputDataBit
00000c  b908              CBNZ     r0,|L21.18|
;;;506        {
;;;507           temp|= 0x08;//00001000
00000e  f0440408          ORR      r4,r4,#8
                  |L21.18|
;;;508        }
;;;509        
;;;510        if(GPIO_ReadInputDataBit(GPIOC,GPIO_Pin_1) == 0) //SEL0 -低电平 打到ON上 -表示次高位逻辑1
000012  2102              MOVS     r1,#2
000014  480a              LDR      r0,|L21.64|
000016  f7fffffe          BL       GPIO_ReadInputDataBit
00001a  b908              CBNZ     r0,|L21.32|
;;;511        {
;;;512           temp|= 0x04;//00001000
00001c  f0440404          ORR      r4,r4,#4
                  |L21.32|
;;;513        }
;;;514        
;;;515        if(GPIO_ReadInputDataBit(GPIOC,GPIO_Pin_2) == 0) //SEL0 -低电平 打到ON上 -表示第三位逻辑1
000020  2104              MOVS     r1,#4
000022  4807              LDR      r0,|L21.64|
000024  f7fffffe          BL       GPIO_ReadInputDataBit
000028  b908              CBNZ     r0,|L21.46|
;;;516        {
;;;517           temp|= 0x02;//00001000
00002a  f0440402          ORR      r4,r4,#2
                  |L21.46|
;;;518        }
;;;519        
;;;520        if(GPIO_ReadInputDataBit(GPIOC,GPIO_Pin_3) == 0) //SEL0 -低电平 打到ON上 -表示最低位逻辑1
00002e  2108              MOVS     r1,#8
000030  4803              LDR      r0,|L21.64|
000032  f7fffffe          BL       GPIO_ReadInputDataBit
000036  b908              CBNZ     r0,|L21.60|
;;;521        {
;;;522           temp|= 0x01;//00001000
000038  f0440401          ORR      r4,r4,#1
                  |L21.60|
;;;523        }
;;;524     //   temp = (uint8_t)GPIO_ReadInputData(GPIOC)&0x0f;
;;;525        return temp;
00003c  4620              MOV      r0,r4
;;;526    }
00003e  bd10              POP      {r4,pc}
;;;527    
                          ENDP

                  |L21.64|
                          DCD      0x40011000

                          AREA ||i.bsp_SetKeyParam||, CODE, READONLY, ALIGN=2

                  bsp_SetKeyParam PROC
;;;261    */
;;;262    void bsp_SetKeyParam(uint8_t _ucKeyID, uint16_t _LongTime, uint8_t  _RepeatSpeed)
000000  b510              PUSH     {r4,lr}
;;;263    {
;;;264    	s_tBtn[_ucKeyID].LongTime = _LongTime;			/* 长按时间 0 表示不检测长按键事件 */
000002  4b07              LDR      r3,|L22.32|
000004  eb031300          ADD      r3,r3,r0,LSL #4
000008  8119              STRH     r1,[r3,#8]
;;;265    	s_tBtn[_ucKeyID].RepeatSpeed = _RepeatSpeed;			/* 按键连发的速度，0表示不支持连发 */
00000a  4b05              LDR      r3,|L22.32|
00000c  eb031300          ADD      r3,r3,r0,LSL #4
000010  72da              STRB     r2,[r3,#0xb]
;;;266    	s_tBtn[_ucKeyID].RepeatCount = 0;						/* 连发计数器 */
000012  2300              MOVS     r3,#0
000014  4c02              LDR      r4,|L22.32|
000016  eb041400          ADD      r4,r4,r0,LSL #4
00001a  7323              STRB     r3,[r4,#0xc]
;;;267    }
00001c  bd10              POP      {r4,pc}
;;;268    
                          ENDP

00001e  0000              DCW      0x0000
                  |L22.32|
                          DCD      s_tBtn

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  s_tBtn
                          %        160
                  s_tKey
                          %        13

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp\\src\\bsp_key.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_bsp_key_c_dc6aca1d____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_bsp_key_c_dc6aca1d____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_bsp_key_c_dc6aca1d____REVSH|
#line 128
|__asm___9_bsp_key_c_dc6aca1d____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
