; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_hc.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_hc.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Include -I..\..\User -I..\..\User\bsp\inc -I..\..\User\bsp -I..\..\User\app\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -D__MICROLIB -D__UVISION_VERSION=527 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\bsp_hc.crf ..\..\User\bsp\src\bsp_hc.c]
                          THUMB

                          AREA ||i.HC_Analyze||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_sizespec
                  HC_Analyze PROC
;;;89      
;;;90     void HC_Analyze(void)
000000  b510              PUSH     {r4,lr}
;;;91     {
;;;92         if (g_hc_timeout == 0)	
000002  487f              LDR      r0,|L1.512|
000004  7800              LDRB     r0,[r0,#0]  ; g_hc_timeout
000006  b900              CBNZ     r0,|L1.10|
                  |L1.8|
;;;93     	{
;;;94     		return;								/* 没有超时，继续接收。不要清零 g_tHC.RxCount */
;;;95     	}
;;;96     	
;;;97     	g_hc_timeout = 0;	 					/* 清标志 */
;;;98     
;;;99     	if (g_tHC.RxCount < 5)				/* 接收到的数据小于个字节就认为错误 */
;;;100    	{
;;;101    		goto err_ret;
;;;102    	}
;;;103        if((g_tHC.RxBuf[0] == 0xA5)&&(g_tHC.RxBuf[1] == 0x5A)&&(g_tHC.RxBuf[3] == 0x83)) //属于变量自动上传
;;;104        {
;;;105            if(g_tHC.RxBuf[5] ==0x01)  //0x0001 --对应长度
;;;106            {
;;;107                g_lenth = ((uint16_t)g_tHC.RxBuf[7]<<8)+g_tHC.RxBuf[8];
;;;108                eeResult[1] = g_tHC.RxBuf[7];
;;;109                eeResult[2] = g_tHC.RxBuf[8];     
;;;110                eeResult[0] |= 0x01;             //标志 长度已经设置
;;;111                ee_WriteBytes(0,eeResult,0x00,0x01); //写标志
;;;112                ee_WriteBytes(0,&eeResult[1],0x01,0x02); //写长度
;;;113                #ifdef USEDEBUG
;;;114                
;;;115                  printf("legth = %d\r\n",g_lenth/10);
;;;116                
;;;117                #endif 
;;;118            }
;;;119            if(g_tHC.RxBuf[5] ==0x02)  //0x0002 --对应宽度
;;;120            {
;;;121                g_width= ((uint16_t)g_tHC.RxBuf[7]<<8)+g_tHC.RxBuf[8];
;;;122                
;;;123                eeResult[3] = g_tHC.RxBuf[7];
;;;124                eeResult[4] = g_tHC.RxBuf[8];     
;;;125                eeResult[0] |= 0x02;             //标志 长度已经设置
;;;126                ee_WriteBytes(0,eeResult,0x00,0x01); //写标志
;;;127                ee_WriteBytes(0,&eeResult[3],0x03,0x02); //写长度
;;;128                
;;;129                #ifdef USEDEBUG
;;;130                
;;;131                  printf("width = %d\r\n",g_width/10);
;;;132                
;;;133                #endif 
;;;134                
;;;135            }
;;;136            if(g_tHC.RxBuf[5] ==0x03)  //0x0003 --对应高度
;;;137            {
;;;138                g_height = ((uint16_t)g_tHC.RxBuf[7]<<8)+g_tHC.RxBuf[8];
;;;139                eeResult[5] = g_tHC.RxBuf[7];
;;;140                eeResult[6] = g_tHC.RxBuf[8];     
;;;141                eeResult[0] |= 0x04;             //标志 长度已经设置
;;;142                ee_WriteBytes(0,eeResult,0x00,0x01); //写标志
;;;143                ee_WriteBytes(0,&eeResult[5],0x05,0x02); //写长度
;;;144                
;;;145                #ifdef USEDEBUG
;;;146                
;;;147                  printf("height = %d\r\n",g_height/10);
;;;148                
;;;149                #endif 
;;;150            }
;;;151            // A5 5A 08 83 00 07 02 00 01 E2 40  -- 密码屏返回值   123456   01 e2 40
;;;152            if(g_tHC.RxBuf[5] ==0x07)  //0x0007 --对应密码
;;;153            {
;;;154                g_password = g_tHC.RxBuf[8]*65536+g_tHC.RxBuf[9]*256+g_tHC.RxBuf[10];
;;;155                if(g_password == PASSWORD) //密码正确
;;;156                {
;;;157                    g_touch = 1;
;;;158                 //   bsp_DelayMS(100);
;;;159                   // bsp_SendKey(3); //跳转到设置体积
;;;160                   // bsp_DelayMS(5);
;;;161                   // bsp_DisableTouch();//关闭触摸
;;;162                }
;;;163                else //密码错误 回到状态界面
;;;164                {
;;;165                  //  bsp_SendKey(4); //回到状态界面
;;;166                   // bsp_DelayMS(5);
;;;167                  //  bsp_DisableTouch();//关闭触摸
;;;168                    g_touch = 2;
;;;169                }
;;;170                
;;;171                #ifdef USEDEBUG
;;;172                
;;;173                  printf("g_password = %ld\r\n",g_password);
;;;174                  g_password =0;
;;;175                 
;;;176                #endif 
;;;177            }
;;;178            // 开启和关闭各种模式--begin
;;;179            //页面   功能           地址   字长   功能              对应变量值
;;;180            //3	    启动手动模式	0x000A	1	确定设置值   			1
;;;181            //3	    启动循环模式	0x000A	1	开启数据上传			2
;;;182            //3	    启动自动浓度	0x000A	1	关闭数据上传			3
;;;183                    
;;;184            if(g_tHC.RxBuf[5] ==0x0A)  //按键键值返回，对应开启和关闭功能
;;;185            {
;;;186                g_funcTouch = ((uint16_t)g_tHC.RxBuf[7]<<8)+g_tHC.RxBuf[8];
;;;187                
;;;188                if(g_funcTouch ==1 )  //确定
;;;189                {
;;;190                   // bsp_DisableTouch(); //关闭触摸
;;;191                    g_touch= 3;
;;;192                    
;;;193                }
;;;194                else if(g_funcTouch ==2)
;;;195                {
;;;196                   g_WithoutOnenet = 0; //开启数据上传 
;;;197                 //  bsp_ScreenUpdateNet(g_status,g_WithoutOnenet);
;;;198                    g_touch = 4;
;;;199                }
;;;200                else if(g_funcTouch ==3)
;;;201                {
;;;202                   g_WithoutOnenet = 1; //关闭数据上传 
;;;203                 //  bsp_ScreenUpdateNet(g_status,g_WithoutOnenet);
;;;204                    g_touch = 5;
;;;205                }
;;;206               
;;;207                #ifdef USEDEBUG
;;;208                
;;;209                printf("g_funcTouch = %d\r\n",g_funcTouch);
;;;210                 g_funcTouch = 0xff;  //处理完毕，恢复原始值
;;;211                #endif 
;;;212              //  bsp_LedFlash(g_func+1);
;;;213            }
;;;214        }
;;;215    
;;;216    			
;;;217    	
;;;218    err_ret:
;;;219    #if 0										/* 此部分为了串口打印结果,实际运用中可不要 */
;;;220    	g_tPrint.Rxlen = g_tHC.RxCount;
;;;221    	memcpy(g_tPrint.RxBuf, g_tHC.RxBuf, g_tHC.RxCount);
;;;222    #endif
;;;223    	
;;;224    	g_tHC.RxCount = 0;					/* 必须清零计数器，方便下次帧同步 */
;;;225        g_hcRevOK =1; //表示接受解码ok
;;;226    }
000008  bd10              POP      {r4,pc}
                  |L1.10|
00000a  2000              MOVS     r0,#0                 ;97
00000c  497c              LDR      r1,|L1.512|
00000e  7008              STRB     r0,[r1,#0]            ;97
000010  487c              LDR      r0,|L1.516|
000012  7f80              LDRB     r0,[r0,#0x1e]         ;99  ; g_tHC
000014  2805              CMP      r0,#5                 ;99
000016  da00              BGE      |L1.26|
000018  e0ea              B        |L1.496|
                  |L1.26|
00001a  487a              LDR      r0,|L1.516|
00001c  7800              LDRB     r0,[r0,#0]            ;103  ; g_tHC
00001e  28a5              CMP      r0,#0xa5              ;103
                  |L1.32|
000020  d17d              BNE      |L1.286|
000022  4878              LDR      r0,|L1.516|
000024  7840              LDRB     r0,[r0,#1]            ;103  ; g_tHC
000026  285a              CMP      r0,#0x5a              ;103
000028  d1fa              BNE      |L1.32|
00002a  4876              LDR      r0,|L1.516|
00002c  78c0              LDRB     r0,[r0,#3]            ;103  ; g_tHC
00002e  2883              CMP      r0,#0x83              ;103
000030  d1f6              BNE      |L1.32|
000032  4874              LDR      r0,|L1.516|
000034  7940              LDRB     r0,[r0,#5]            ;105  ; g_tHC
000036  2801              CMP      r0,#1                 ;105
000038  d128              BNE      |L1.140|
00003a  4872              LDR      r0,|L1.516|
00003c  7a00              LDRB     r0,[r0,#8]            ;107  ; g_tHC
00003e  4971              LDR      r1,|L1.516|
000040  79c9              LDRB     r1,[r1,#7]            ;107  ; g_tHC
000042  eb002001          ADD      r0,r0,r1,LSL #8       ;107
000046  4970              LDR      r1,|L1.520|
000048  8008              STRH     r0,[r1,#0]            ;107
00004a  486e              LDR      r0,|L1.516|
00004c  79c0              LDRB     r0,[r0,#7]            ;108  ; g_tHC
00004e  496f              LDR      r1,|L1.524|
000050  7048              STRB     r0,[r1,#1]            ;108
000052  486c              LDR      r0,|L1.516|
000054  7a00              LDRB     r0,[r0,#8]            ;109  ; g_tHC
000056  7088              STRB     r0,[r1,#2]            ;109
000058  4608              MOV      r0,r1                 ;110
00005a  7800              LDRB     r0,[r0,#0]            ;110  ; eeResult
00005c  f0400001          ORR      r0,r0,#1              ;110
000060  7008              STRB     r0,[r1,#0]            ;110
000062  2301              MOVS     r3,#1                 ;111
000064  2200              MOVS     r2,#0                 ;111
000066  4610              MOV      r0,r2                 ;111
000068  f7fffffe          BL       ee_WriteBytes
00006c  2302              MOVS     r3,#2                 ;112
00006e  2201              MOVS     r2,#1                 ;112
000070  4966              LDR      r1,|L1.524|
000072  1c49              ADDS     r1,r1,#1              ;112
000074  2000              MOVS     r0,#0                 ;112
000076  f7fffffe          BL       ee_WriteBytes
00007a  4863              LDR      r0,|L1.520|
00007c  8800              LDRH     r0,[r0,#0]            ;115  ; g_lenth
00007e  210a              MOVS     r1,#0xa               ;115
000080  fb90f4f1          SDIV     r4,r0,r1              ;115
000084  4621              MOV      r1,r4                 ;115
000086  a062              ADR      r0,|L1.528|
000088  f7fffffe          BL       __2printf
                  |L1.140|
00008c  485d              LDR      r0,|L1.516|
00008e  7940              LDRB     r0,[r0,#5]            ;119  ; g_tHC
000090  2802              CMP      r0,#2                 ;119
000092  d128              BNE      |L1.230|
000094  485b              LDR      r0,|L1.516|
000096  7a00              LDRB     r0,[r0,#8]            ;121  ; g_tHC
000098  495a              LDR      r1,|L1.516|
00009a  79c9              LDRB     r1,[r1,#7]            ;121  ; g_tHC
00009c  eb002001          ADD      r0,r0,r1,LSL #8       ;121
0000a0  495f              LDR      r1,|L1.544|
0000a2  8008              STRH     r0,[r1,#0]            ;121
0000a4  4857              LDR      r0,|L1.516|
0000a6  79c0              LDRB     r0,[r0,#7]            ;123  ; g_tHC
0000a8  4958              LDR      r1,|L1.524|
0000aa  70c8              STRB     r0,[r1,#3]            ;123
0000ac  4855              LDR      r0,|L1.516|
0000ae  7a00              LDRB     r0,[r0,#8]            ;124  ; g_tHC
0000b0  7108              STRB     r0,[r1,#4]            ;124
0000b2  4608              MOV      r0,r1                 ;125
0000b4  7800              LDRB     r0,[r0,#0]            ;125  ; eeResult
0000b6  f0400002          ORR      r0,r0,#2              ;125
0000ba  7008              STRB     r0,[r1,#0]            ;125
0000bc  2301              MOVS     r3,#1                 ;126
0000be  2200              MOVS     r2,#0                 ;126
0000c0  4610              MOV      r0,r2                 ;126
0000c2  f7fffffe          BL       ee_WriteBytes
0000c6  2302              MOVS     r3,#2                 ;127
0000c8  2203              MOVS     r2,#3                 ;127
0000ca  4950              LDR      r1,|L1.524|
0000cc  1cc9              ADDS     r1,r1,#3              ;127
0000ce  2000              MOVS     r0,#0                 ;127
0000d0  f7fffffe          BL       ee_WriteBytes
0000d4  4852              LDR      r0,|L1.544|
0000d6  8800              LDRH     r0,[r0,#0]            ;131  ; g_width
0000d8  210a              MOVS     r1,#0xa               ;131
0000da  fb90f4f1          SDIV     r4,r0,r1              ;131
0000de  4621              MOV      r1,r4                 ;131
0000e0  a050              ADR      r0,|L1.548|
0000e2  f7fffffe          BL       __2printf
                  |L1.230|
0000e6  4847              LDR      r0,|L1.516|
0000e8  7940              LDRB     r0,[r0,#5]            ;136  ; g_tHC
0000ea  2803              CMP      r0,#3                 ;136
0000ec  d12a              BNE      |L1.324|
0000ee  4845              LDR      r0,|L1.516|
0000f0  7a00              LDRB     r0,[r0,#8]            ;138  ; g_tHC
0000f2  4944              LDR      r1,|L1.516|
0000f4  79c9              LDRB     r1,[r1,#7]            ;138  ; g_tHC
0000f6  eb002001          ADD      r0,r0,r1,LSL #8       ;138
0000fa  494e              LDR      r1,|L1.564|
0000fc  8008              STRH     r0,[r1,#0]            ;138
0000fe  4841              LDR      r0,|L1.516|
000100  79c0              LDRB     r0,[r0,#7]            ;139  ; g_tHC
000102  4942              LDR      r1,|L1.524|
000104  7148              STRB     r0,[r1,#5]            ;139
000106  483f              LDR      r0,|L1.516|
000108  7a00              LDRB     r0,[r0,#8]            ;140  ; g_tHC
00010a  7188              STRB     r0,[r1,#6]            ;140
00010c  4608              MOV      r0,r1                 ;141
00010e  7800              LDRB     r0,[r0,#0]            ;141  ; eeResult
000110  f0400004          ORR      r0,r0,#4              ;141
000114  7008              STRB     r0,[r1,#0]            ;141
000116  2301              MOVS     r3,#1                 ;142
000118  2200              MOVS     r2,#0                 ;142
00011a  4610              MOV      r0,r2                 ;142
00011c  e000              B        |L1.288|
                  |L1.286|
00011e  e066              B        |L1.494|
                  |L1.288|
000120  f7fffffe          BL       ee_WriteBytes
000124  2302              MOVS     r3,#2                 ;143
000126  2205              MOVS     r2,#5                 ;143
000128  4938              LDR      r1,|L1.524|
00012a  1d49              ADDS     r1,r1,#5              ;143
00012c  2000              MOVS     r0,#0                 ;143
00012e  f7fffffe          BL       ee_WriteBytes
000132  4840              LDR      r0,|L1.564|
000134  8800              LDRH     r0,[r0,#0]            ;147  ; g_height
000136  210a              MOVS     r1,#0xa               ;147
000138  fb90f4f1          SDIV     r4,r0,r1              ;147
00013c  4621              MOV      r1,r4                 ;147
00013e  a03e              ADR      r0,|L1.568|
000140  f7fffffe          BL       __2printf
                  |L1.324|
000144  482f              LDR      r0,|L1.516|
000146  7940              LDRB     r0,[r0,#5]            ;152  ; g_tHC
000148  2807              CMP      r0,#7                 ;152
00014a  d11f              BNE      |L1.396|
00014c  482d              LDR      r0,|L1.516|
00014e  7a00              LDRB     r0,[r0,#8]            ;154  ; g_tHC
000150  0401              LSLS     r1,r0,#16             ;154
000152  482c              LDR      r0,|L1.516|
000154  7a40              LDRB     r0,[r0,#9]            ;154  ; g_tHC
000156  eb012000          ADD      r0,r1,r0,LSL #8       ;154
00015a  492a              LDR      r1,|L1.516|
00015c  7a89              LDRB     r1,[r1,#0xa]          ;154  ; g_tHC
00015e  4408              ADD      r0,r0,r1              ;154
000160  4939              LDR      r1,|L1.584|
000162  6008              STR      r0,[r1,#0]            ;154  ; g_password
000164  4608              MOV      r0,r1                 ;155
000166  6800              LDR      r0,[r0,#0]            ;155  ; g_password
000168  4938              LDR      r1,|L1.588|
00016a  4288              CMP      r0,r1                 ;155
00016c  d103              BNE      |L1.374|
00016e  2001              MOVS     r0,#1                 ;157
000170  4937              LDR      r1,|L1.592|
000172  7008              STRB     r0,[r1,#0]            ;157
000174  e002              B        |L1.380|
                  |L1.374|
000176  2002              MOVS     r0,#2                 ;168
000178  4935              LDR      r1,|L1.592|
00017a  7008              STRB     r0,[r1,#0]            ;168
                  |L1.380|
00017c  4832              LDR      r0,|L1.584|
00017e  6801              LDR      r1,[r0,#0]            ;173  ; g_password
000180  a034              ADR      r0,|L1.596|
000182  f7fffffe          BL       __2printf
000186  2000              MOVS     r0,#0                 ;174
000188  492f              LDR      r1,|L1.584|
00018a  6008              STR      r0,[r1,#0]            ;174  ; g_password
                  |L1.396|
00018c  481d              LDR      r0,|L1.516|
00018e  7940              LDRB     r0,[r0,#5]            ;184  ; g_tHC
000190  280a              CMP      r0,#0xa               ;184
000192  d12c              BNE      |L1.494|
000194  481b              LDR      r0,|L1.516|
000196  7a00              LDRB     r0,[r0,#8]            ;186  ; g_tHC
000198  491a              LDR      r1,|L1.516|
00019a  79c9              LDRB     r1,[r1,#7]            ;186  ; g_tHC
00019c  eb002001          ADD      r0,r0,r1,LSL #8       ;186
0001a0  4931              LDR      r1,|L1.616|
0001a2  8008              STRH     r0,[r1,#0]            ;186
0001a4  4608              MOV      r0,r1                 ;188
0001a6  8800              LDRH     r0,[r0,#0]            ;188  ; g_funcTouch
0001a8  2801              CMP      r0,#1                 ;188
0001aa  d103              BNE      |L1.436|
0001ac  2003              MOVS     r0,#3                 ;191
0001ae  4928              LDR      r1,|L1.592|
0001b0  7008              STRB     r0,[r1,#0]            ;191
0001b2  e014              B        |L1.478|
                  |L1.436|
0001b4  482c              LDR      r0,|L1.616|
0001b6  8800              LDRH     r0,[r0,#0]            ;194  ; g_funcTouch
0001b8  2802              CMP      r0,#2                 ;194
0001ba  d106              BNE      |L1.458|
0001bc  2000              MOVS     r0,#0                 ;196
0001be  492b              LDR      r1,|L1.620|
0001c0  7008              STRB     r0,[r1,#0]            ;196
0001c2  2004              MOVS     r0,#4                 ;198
0001c4  4922              LDR      r1,|L1.592|
0001c6  7008              STRB     r0,[r1,#0]            ;198
0001c8  e009              B        |L1.478|
                  |L1.458|
0001ca  4827              LDR      r0,|L1.616|
0001cc  8800              LDRH     r0,[r0,#0]            ;200  ; g_funcTouch
0001ce  2803              CMP      r0,#3                 ;200
0001d0  d105              BNE      |L1.478|
0001d2  2001              MOVS     r0,#1                 ;202
0001d4  4925              LDR      r1,|L1.620|
0001d6  7008              STRB     r0,[r1,#0]            ;202
0001d8  2005              MOVS     r0,#5                 ;204
0001da  491d              LDR      r1,|L1.592|
0001dc  7008              STRB     r0,[r1,#0]            ;204
                  |L1.478|
0001de  4822              LDR      r0,|L1.616|
0001e0  8801              LDRH     r1,[r0,#0]            ;209  ; g_funcTouch
0001e2  a023              ADR      r0,|L1.624|
0001e4  f7fffffe          BL       __2printf
0001e8  20ff              MOVS     r0,#0xff              ;210
0001ea  491f              LDR      r1,|L1.616|
0001ec  8008              STRH     r0,[r1,#0]            ;210
                  |L1.494|
0001ee  bf00              NOP                            ;218
                  |L1.496|
0001f0  2000              MOVS     r0,#0                 ;224
0001f2  4904              LDR      r1,|L1.516|
0001f4  7788              STRB     r0,[r1,#0x1e]         ;224
0001f6  2001              MOVS     r0,#1                 ;225
0001f8  4922              LDR      r1,|L1.644|
0001fa  7008              STRB     r0,[r1,#0]            ;225
0001fc  bf00              NOP      
0001fe  e703              B        |L1.8|
                          ENDP

                  |L1.512|
                          DCD      g_hc_timeout
                  |L1.516|
                          DCD      g_tHC
                  |L1.520|
                          DCD      g_lenth
                  |L1.524|
                          DCD      eeResult
                  |L1.528|
000210  6c656774          DCB      "legth = %d\r\n",0
000214  68203d20
000218  25640d0a
00021c  00      
00021d  00                DCB      0
00021e  00                DCB      0
00021f  00                DCB      0
                  |L1.544|
                          DCD      g_width
                  |L1.548|
000224  77696474          DCB      "width = %d\r\n",0
000228  68203d20
00022c  25640d0a
000230  00      
000231  00                DCB      0
000232  00                DCB      0
000233  00                DCB      0
                  |L1.564|
                          DCD      g_height
                  |L1.568|
000238  68656967          DCB      "height = %d\r\n",0
00023c  6874203d
000240  2025640d
000244  0a00    
000246  00                DCB      0
000247  00                DCB      0
                  |L1.584|
                          DCD      g_password
                  |L1.588|
                          DCD      0x0001e240
                  |L1.592|
                          DCD      g_touch
                  |L1.596|
000254  675f7061          DCB      "g_password = %ld\r\n",0
000258  7373776f
00025c  7264203d
000260  20256c64
000264  0d0a00  
000267  00                DCB      0
                  |L1.616|
                          DCD      g_funcTouch
                  |L1.620|
                          DCD      g_WithoutOnenet
                  |L1.624|
000270  675f6675          DCB      "g_funcTouch = %d\r\n",0
000274  6e63546f
000278  75636820
00027c  3d202564
000280  0d0a00  
000283  00                DCB      0
                  |L1.644|
                          DCD      g_hcRevOK

                          AREA ||i.HC_AskForData||, CODE, READONLY, ALIGN=1

                  HC_AskForData PROC
;;;49     
;;;50     void HC_AskForData(void)
000000  4770              BX       lr
;;;51     {
;;;52      //  comSendBuf(COM2, send,9);
;;;53         
;;;54     }
;;;55     
                          ENDP


                          AREA ||i.HC_ReciveNew||, CODE, READONLY, ALIGN=2

                  HC_ReciveNew PROC
;;;21     }
;;;22     void HC_ReciveNew(uint8_t _data)
000000  b570              PUSH     {r4-r6,lr}
;;;23     {
000002  4604              MOV      r4,r0
;;;24             /*
;;;25     		3.5个字符的时间间隔，只是用在RTU模式下面，因为RTU模式没有开始符和结束符，
;;;26     		两个数据包之间只能靠时间间隔来区分，Modbus定义在不同的波特率下，间隔时间是不一样的，
;;;27     		所以就是3.5个字符的时间，波特率高，这个时间间隔就小，波特率低，这个时间间隔相应就大
;;;28     
;;;29     		4800  = 7.297ms
;;;30     		9600  = 3.646ms
;;;31     		19200  = 1.771ms
;;;32     		38400  = 0.885ms
;;;33     	*/
;;;34     	uint32_t timeout;
;;;35     
;;;36     	g_hc_timeout = 0;
000004  2000              MOVS     r0,#0
000006  490b              LDR      r1,|L3.52|
000008  7008              STRB     r0,[r1,#0]
;;;37     	
;;;38     	timeout = 45000000 / 115200;		/* 计算超时时间，单位us 35000000*/
00000a  f44f75c3          MOV      r5,#0x186
;;;39     	
;;;40     	/* 硬件定时中断，定时精度us 硬件定时器2用于MODBUS从机, 定时器3用于MODBUS从机主机*/
;;;41     	bsp_StartHardTimer(3, timeout, (void *)HC_RxTimeOut);
00000e  4a0a              LDR      r2,|L3.56|
000010  4629              MOV      r1,r5
000012  2003              MOVS     r0,#3
000014  f7fffffe          BL       bsp_StartHardTimer
;;;42     
;;;43     	if (g_tHC.RxCount < HC_RX_BUF_SIZE)
000018  4808              LDR      r0,|L3.60|
00001a  7f80              LDRB     r0,[r0,#0x1e]  ; g_tHC
00001c  281e              CMP      r0,#0x1e
00001e  da07              BGE      |L3.48|
;;;44     	{
;;;45     		g_tHC.RxBuf[g_tHC.RxCount++] = _data;
000020  4806              LDR      r0,|L3.60|
000022  7f81              LDRB     r1,[r0,#0x1e]  ; g_tHC
000024  7f80              LDRB     r0,[r0,#0x1e]  ; g_tHC
000026  1c40              ADDS     r0,r0,#1
000028  4a04              LDR      r2,|L3.60|
00002a  7790              STRB     r0,[r2,#0x1e]
00002c  4610              MOV      r0,r2
00002e  5444              STRB     r4,[r0,r1]
                  |L3.48|
;;;46     	}
;;;47         
;;;48     }
000030  bd70              POP      {r4-r6,pc}
;;;49     
                          ENDP

000032  0000              DCW      0x0000
                  |L3.52|
                          DCD      g_hc_timeout
                  |L3.56|
                          DCD      HC_RxTimeOut
                  |L3.60|
                          DCD      g_tHC

                          AREA ||i.HC_RxTimeOut||, CODE, READONLY, ALIGN=2

                  HC_RxTimeOut PROC
;;;17     */
;;;18     static void HC_RxTimeOut(void)
000000  2001              MOVS     r0,#1
;;;19     {
;;;20     	g_hc_timeout = 1;
000002  4901              LDR      r1,|L4.8|
000004  7008              STRB     r0,[r1,#0]
;;;21     }
000006  4770              BX       lr
;;;22     void HC_ReciveNew(uint8_t _data)
                          ENDP

                  |L4.8|
                          DCD      g_hc_timeout

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  g_tHC
                          %        62

                          AREA ||.data||, DATA, ALIGN=2

                  g_hc_timeout
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  g_password
                          DCD      0x00000000
                  g_lenth
000008  0000              DCW      0x0000
                  g_width
00000a  0000              DCW      0x0000
                  g_height
00000c  0000              DCW      0x0000
                  g_funcTouch
00000e  00ff              DCW      0x00ff
                  g_funcKey
000010  00ff              DCW      0x00ff
                  g_hcRevOK
000012  00                DCB      0x00
                  g_FailTime
000013  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp\\src\\bsp_hc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___8_bsp_hc_c_2dba6064____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___8_bsp_hc_c_2dba6064____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___8_bsp_hc_c_2dba6064____REVSH|
#line 128
|__asm___8_bsp_hc_c_2dba6064____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
