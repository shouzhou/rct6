; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_uart_fifo.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_uart_fifo.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Include -I..\..\User -I..\..\User\bsp\inc -I..\..\User\bsp -I..\..\User\app\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -D__MICROLIB -D__UVISION_VERSION=527 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\bsp_uart_fifo.crf ..\..\User\bsp\src\bsp_uart_fifo.c]
                          THUMB

                          AREA ||i.ComToUart||, CODE, READONLY, ALIGN=2

                  ComToUart PROC
;;;89     */
;;;90     UART_T *ComToUart(COM_PORT_E _ucPort)
000000  4601              MOV      r1,r0
;;;91     {
;;;92     	if (_ucPort == COM1)
000002  b909              CBNZ     r1,|L1.8|
;;;93     	{
;;;94     		#if UART1_FIFO_EN == 1
;;;95     			return &g_tUart1;
000004  4809              LDR      r0,|L1.44|
                  |L1.6|
;;;96     		#else
;;;97     			return 0;
;;;98     		#endif
;;;99     	}
;;;100    	else if (_ucPort == COM2)
;;;101    	{
;;;102    		#if UART2_FIFO_EN == 1
;;;103    			return &g_tUart2;
;;;104    		#else
;;;105    			return;
;;;106    		#endif
;;;107    	}
;;;108    	else if (_ucPort == COM3)
;;;109    	{
;;;110    		#if UART3_FIFO_EN == 1
;;;111    			return &g_tUart3;
;;;112    		#else
;;;113    			return 0;
;;;114    		#endif
;;;115    	}
;;;116    	else if (_ucPort == COM4)
;;;117    	{
;;;118    		#if UART4_FIFO_EN == 1
;;;119    			return &g_tUart4;
;;;120    		#else
;;;121    			return 0;
;;;122    		#endif
;;;123    	}
;;;124    	else if (_ucPort == COM5)
;;;125    	{
;;;126    		#if UART5_FIFO_EN == 1
;;;127    			return &g_tUart5;
;;;128    		#else
;;;129    			return 0;
;;;130    		#endif
;;;131    	}
;;;132    	else
;;;133    	{
;;;134    		/* 不做任何处理 */
;;;135    		return 0;
;;;136    	}
;;;137    }
000006  4770              BX       lr
                  |L1.8|
000008  2901              CMP      r1,#1                 ;100
00000a  d101              BNE      |L1.16|
00000c  4808              LDR      r0,|L1.48|
00000e  e7fa              B        |L1.6|
                  |L1.16|
000010  2902              CMP      r1,#2                 ;108
000012  d101              BNE      |L1.24|
000014  4807              LDR      r0,|L1.52|
000016  e7f6              B        |L1.6|
                  |L1.24|
000018  2903              CMP      r1,#3                 ;116
00001a  d101              BNE      |L1.32|
00001c  2000              MOVS     r0,#0                 ;121
00001e  e7f2              B        |L1.6|
                  |L1.32|
000020  2904              CMP      r1,#4                 ;124
000022  d101              BNE      |L1.40|
000024  2000              MOVS     r0,#0                 ;129
000026  e7ee              B        |L1.6|
                  |L1.40|
000028  2000              MOVS     r0,#0                 ;135
00002a  e7ec              B        |L1.6|
;;;138    
                          ENDP

                  |L1.44|
                          DCD      g_tUart1
                  |L1.48|
                          DCD      g_tUart2
                  |L1.52|
                          DCD      g_tUart3

                          AREA ||i.ConfigUartNVIC||, CODE, READONLY, ALIGN=1

                  ConfigUartNVIC PROC
;;;774    */
;;;775    static void ConfigUartNVIC(void)
000000  b508              PUSH     {r3,lr}
;;;776    {
;;;777    	NVIC_InitTypeDef NVIC_InitStructure;
;;;778    
;;;779    	/* Configure the NVIC Preemption Priority Bits */
;;;780    	/*	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_0);  --- 在 bsp.c 中 bsp_Init() 中配置中断优先级组 */
;;;781    
;;;782    #if UART1_FIFO_EN == 1
;;;783    	/* 使能串口1中断 */
;;;784    	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
000002  2025              MOVS     r0,#0x25
000004  f88d0000          STRB     r0,[sp,#0]
;;;785    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
000008  2000              MOVS     r0,#0
00000a  f88d0002          STRB     r0,[sp,#2]
;;;786    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
00000e  2001              MOVS     r0,#1
000010  f88d0003          STRB     r0,[sp,#3]
;;;787    	NVIC_Init(&NVIC_InitStructure);
000014  4668              MOV      r0,sp
000016  f7fffffe          BL       NVIC_Init
;;;788    #endif
;;;789    
;;;790    #if UART2_FIFO_EN == 1
;;;791    	/* 使能串口2中断 */
;;;792    	NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
00001a  2026              MOVS     r0,#0x26
00001c  f88d0000          STRB     r0,[sp,#0]
;;;793    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
000020  2001              MOVS     r0,#1
000022  f88d0002          STRB     r0,[sp,#2]
;;;794    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
000026  f88d0003          STRB     r0,[sp,#3]
;;;795    	NVIC_Init(&NVIC_InitStructure);
00002a  4668              MOV      r0,sp
00002c  f7fffffe          BL       NVIC_Init
;;;796    #endif
;;;797    
;;;798    #if UART3_FIFO_EN == 1
;;;799    	/* 使能串口3中断t */
;;;800    	NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn;
000030  2027              MOVS     r0,#0x27
000032  f88d0000          STRB     r0,[sp,#0]
;;;801    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 2;
000036  2002              MOVS     r0,#2
000038  f88d0002          STRB     r0,[sp,#2]
;;;802    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
00003c  2001              MOVS     r0,#1
00003e  f88d0003          STRB     r0,[sp,#3]
;;;803    	NVIC_Init(&NVIC_InitStructure);
000042  4668              MOV      r0,sp
000044  f7fffffe          BL       NVIC_Init
;;;804    #endif
;;;805    
;;;806    #if UART4_FIFO_EN == 1
;;;807    	/* 使能串口4中断t */
;;;808    	NVIC_InitStructure.NVIC_IRQChannel = UART4_IRQn;
;;;809    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;
;;;810    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
;;;811    	NVIC_Init(&NVIC_InitStructure);
;;;812    #endif
;;;813    
;;;814    #if UART5_FIFO_EN == 1
;;;815    	/* 使能串口5中断t */
;;;816    	NVIC_InitStructure.NVIC_IRQChannel = UART5_IRQn;
;;;817    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 4;
;;;818    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
;;;819    	NVIC_Init(&NVIC_InitStructure);
;;;820    #endif
;;;821    
;;;822    #if UART6_FIFO_EN == 1
;;;823    	/* 使能串口6中断t */
;;;824    	NVIC_InitStructure.NVIC_IRQChannel = USART6_IRQn;
;;;825    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 5;
;;;826    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
;;;827    	NVIC_Init(&NVIC_InitStructure);
;;;828    #endif
;;;829    }
000048  bd08              POP      {r3,pc}
;;;830    
                          ENDP


                          AREA ||i.InitHardUart||, CODE, READONLY, ALIGN=2

                  InitHardUart PROC
;;;534    */
;;;535    static void InitHardUart(void)
000000  b500              PUSH     {lr}
;;;536    {
000002  b085              SUB      sp,sp,#0x14
;;;537    	GPIO_InitTypeDef GPIO_InitStructure;
;;;538    	USART_InitTypeDef USART_InitStructure;
;;;539    
;;;540    #if UART1_FIFO_EN == 1		/* 串口1 TX = PA9   RX = PA10 或 TX = PB6   RX = PB7*/
;;;541    
;;;542    	/* 第1步：打开GPIO和USART部件的时钟 */
;;;543    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
000004  2101              MOVS     r1,#1
000006  2005              MOVS     r0,#5
000008  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;544    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
00000c  2101              MOVS     r1,#1
00000e  0388              LSLS     r0,r1,#14
000010  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;545    
;;;546    	/* 第2步：将USART Tx的GPIO配置为推挽复用模式 */
;;;547    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
000014  f44f7000          MOV      r0,#0x200
000018  f8ad0010          STRH     r0,[sp,#0x10]
;;;548    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
00001c  2018              MOVS     r0,#0x18
00001e  f88d0013          STRB     r0,[sp,#0x13]
;;;549    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000022  2003              MOVS     r0,#3
000024  f88d0012          STRB     r0,[sp,#0x12]
;;;550    	GPIO_Init(GPIOA, &GPIO_InitStructure);
000028  a904              ADD      r1,sp,#0x10
00002a  4866              LDR      r0,|L3.452|
00002c  f7fffffe          BL       GPIO_Init
;;;551    
;;;552    	/* 第3步：将USART Rx的GPIO配置为浮空输入模式
;;;553    		由于CPU复位后，GPIO缺省都是浮空输入模式，因此下面这个步骤不是必须的
;;;554    		但是，我还是建议加上便于阅读，并且防止其它地方修改了这个口线的设置参数
;;;555    	*/
;;;556    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
000030  f44f6080          MOV      r0,#0x400
000034  f8ad0010          STRH     r0,[sp,#0x10]
;;;557    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
000038  2004              MOVS     r0,#4
00003a  f88d0013          STRB     r0,[sp,#0x13]
;;;558    	GPIO_Init(GPIOA, &GPIO_InitStructure);
00003e  a904              ADD      r1,sp,#0x10
000040  4860              LDR      r0,|L3.452|
000042  f7fffffe          BL       GPIO_Init
;;;559    	
;;;560    	/* 第4步： 配置串口硬件参数 */
;;;561    	USART_InitStructure.USART_BaudRate = UART1_BAUD;	/* 波特率 */
000046  f44f30e1          MOV      r0,#0x1c200
00004a  9000              STR      r0,[sp,#0]
;;;562    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
00004c  2000              MOVS     r0,#0
00004e  f8ad0004          STRH     r0,[sp,#4]
;;;563    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
000052  f8ad0006          STRH     r0,[sp,#6]
;;;564    	USART_InitStructure.USART_Parity = USART_Parity_No ;
000056  f8ad0008          STRH     r0,[sp,#8]
;;;565    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
00005a  f8ad000c          STRH     r0,[sp,#0xc]
;;;566    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
00005e  200c              MOVS     r0,#0xc
000060  f8ad000a          STRH     r0,[sp,#0xa]
;;;567    	USART_Init(USART1, &USART_InitStructure);
000064  4669              MOV      r1,sp
000066  4858              LDR      r0,|L3.456|
000068  f7fffffe          BL       USART_Init
;;;568    
;;;569    	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);	/* 使能接收中断 */
00006c  2201              MOVS     r2,#1
00006e  f2405125          MOV      r1,#0x525
000072  4855              LDR      r0,|L3.456|
000074  f7fffffe          BL       USART_ITConfig
;;;570    	/*
;;;571    		USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
;;;572    		注意: 不要在此处打开发送中断
;;;573    		发送中断使能在SendUart()函数打开
;;;574    	*/
;;;575    	USART_Cmd(USART1, ENABLE);		/* 使能串口 */
000078  2101              MOVS     r1,#1
00007a  4853              LDR      r0,|L3.456|
00007c  f7fffffe          BL       USART_Cmd
;;;576    
;;;577    	/* CPU的小缺陷：串口配置好，如果直接Send，则第1个字节发送不出去
;;;578    		如下语句解决第1个字节无法正确发送出去的问题 */
;;;579    	USART_ClearFlag(USART1, USART_FLAG_TC);     /* 清发送完成标志，Transmission Complete flag */
000080  2140              MOVS     r1,#0x40
000082  4851              LDR      r0,|L3.456|
000084  f7fffffe          BL       USART_ClearFlag
;;;580    #endif
;;;581    
;;;582    #if UART2_FIFO_EN == 1		/* 串口2 TX = PA2， RX = PA3  */
;;;583    	/* 第1步：打开GPIO和USART部件的时钟 */
;;;584    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
000088  2101              MOVS     r1,#1
00008a  2005              MOVS     r0,#5
00008c  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;585    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
000090  2101              MOVS     r1,#1
000092  0448              LSLS     r0,r1,#17
000094  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;586    
;;;587    	/* 第2步：将USART Tx的GPIO配置为推挽复用模式 */
;;;588    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
000098  2004              MOVS     r0,#4
00009a  f8ad0010          STRH     r0,[sp,#0x10]
;;;589    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
00009e  2018              MOVS     r0,#0x18
0000a0  f88d0013          STRB     r0,[sp,#0x13]
;;;590    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
0000a4  2003              MOVS     r0,#3
0000a6  f88d0012          STRB     r0,[sp,#0x12]
;;;591    	GPIO_Init(GPIOA, &GPIO_InitStructure);
0000aa  a904              ADD      r1,sp,#0x10
0000ac  4845              LDR      r0,|L3.452|
0000ae  f7fffffe          BL       GPIO_Init
;;;592    
;;;593    	/* 第3步：将USART Rx的GPIO配置为浮空输入模式
;;;594    		由于CPU复位后，GPIO缺省都是浮空输入模式，因此下面这个步骤不是必须的
;;;595    		但是，我还是建议加上便于阅读，并且防止其它地方修改了这个口线的设置参数
;;;596    	*/
;;;597    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
0000b2  2008              MOVS     r0,#8
0000b4  f8ad0010          STRH     r0,[sp,#0x10]
;;;598    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
0000b8  2004              MOVS     r0,#4
0000ba  f88d0013          STRB     r0,[sp,#0x13]
;;;599    	GPIO_Init(GPIOA, &GPIO_InitStructure);
0000be  a904              ADD      r1,sp,#0x10
0000c0  4840              LDR      r0,|L3.452|
0000c2  f7fffffe          BL       GPIO_Init
;;;600    	/*  第3步已经做了，因此这步可以不做
;;;601    		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;602    	*/
;;;603    	GPIO_Init(GPIOA, &GPIO_InitStructure);
0000c6  a904              ADD      r1,sp,#0x10
0000c8  483e              LDR      r0,|L3.452|
0000ca  f7fffffe          BL       GPIO_Init
;;;604    
;;;605    	/* 第4步： 配置串口硬件参数 */
;;;606    	USART_InitStructure.USART_BaudRate = UART2_BAUD;	/* 波特率 */
0000ce  f44f30e1          MOV      r0,#0x1c200
0000d2  9000              STR      r0,[sp,#0]
;;;607    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
0000d4  2000              MOVS     r0,#0
0000d6  f8ad0004          STRH     r0,[sp,#4]
;;;608    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
0000da  f8ad0006          STRH     r0,[sp,#6]
;;;609    	USART_InitStructure.USART_Parity = USART_Parity_No ;
0000de  f8ad0008          STRH     r0,[sp,#8]
;;;610    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
0000e2  f8ad000c          STRH     r0,[sp,#0xc]
;;;611    	USART_InitStructure.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;		/* 仅选择接收模式 */
0000e6  200c              MOVS     r0,#0xc
0000e8  f8ad000a          STRH     r0,[sp,#0xa]
;;;612    	USART_Init(USART2, &USART_InitStructure);
0000ec  4669              MOV      r1,sp
0000ee  4837              LDR      r0,|L3.460|
0000f0  f7fffffe          BL       USART_Init
;;;613    
;;;614    	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);	/* 使能接收中断 */
0000f4  2201              MOVS     r2,#1
0000f6  f2405125          MOV      r1,#0x525
0000fa  4834              LDR      r0,|L3.460|
0000fc  f7fffffe          BL       USART_ITConfig
;;;615    	/*
;;;616    		USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
;;;617    		注意: 不要在此处打开发送中断
;;;618    		发送中断使能在SendUart()函数打开
;;;619    	*/
;;;620    	USART_Cmd(USART2, ENABLE);		/* 使能串口 */
000100  2101              MOVS     r1,#1
000102  4832              LDR      r0,|L3.460|
000104  f7fffffe          BL       USART_Cmd
;;;621    
;;;622    	/* CPU的小缺陷：串口配置好，如果直接Send，则第1个字节发送不出去
;;;623    		如下语句解决第1个字节无法正确发送出去的问题 */
;;;624    	USART_ClearFlag(USART2, USART_FLAG_TC);     /* 清发送完成标志，Transmission Complete flag */
000108  2140              MOVS     r1,#0x40
00010a  4830              LDR      r0,|L3.460|
00010c  f7fffffe          BL       USART_ClearFlag
;;;625    #endif
;;;626    
;;;627    #if UART3_FIFO_EN == 1			/* 串口3 TX = PB10   RX = PB11 */
;;;628    
;;;629    	/* 配置 PB2为推挽输出，用于切换 RS485芯片的收发状态 */
;;;630    	{
;;;631    		RCC_APB2PeriphClockCmd(RCC_RS485_TXEN, ENABLE);
000110  2101              MOVS     r1,#1
000112  2004              MOVS     r0,#4
000114  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;632    
;;;633    		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
000118  2010              MOVS     r0,#0x10
00011a  f88d0013          STRB     r0,[sp,#0x13]
;;;634    		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00011e  2003              MOVS     r0,#3
000120  f88d0012          STRB     r0,[sp,#0x12]
;;;635    		GPIO_InitStructure.GPIO_Pin = PIN_RS485_TXEN;
000124  f44f6000          MOV      r0,#0x800
000128  f8ad0010          STRH     r0,[sp,#0x10]
;;;636    		GPIO_Init(PORT_RS485_TXEN, &GPIO_InitStructure);
00012c  a904              ADD      r1,sp,#0x10
00012e  4825              LDR      r0,|L3.452|
000130  f7fffffe          BL       GPIO_Init
;;;637    	}
;;;638    
;;;639    	/* 第1步： 开启GPIO和UART时钟 */
;;;640    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB | RCC_APB2Periph_AFIO, ENABLE);
000134  2101              MOVS     r1,#1
000136  2009              MOVS     r0,#9
000138  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;641    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
00013c  2101              MOVS     r1,#1
00013e  0488              LSLS     r0,r1,#18
000140  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;642    
;;;643    	/* 第2步：将USART Tx的GPIO配置为推挽复用模式 */
;;;644    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
000144  f44f6080          MOV      r0,#0x400
000148  f8ad0010          STRH     r0,[sp,#0x10]
;;;645    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
00014c  2018              MOVS     r0,#0x18
00014e  f88d0013          STRB     r0,[sp,#0x13]
;;;646    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000152  2003              MOVS     r0,#3
000154  f88d0012          STRB     r0,[sp,#0x12]
;;;647    	GPIO_Init(GPIOB, &GPIO_InitStructure);
000158  a904              ADD      r1,sp,#0x10
00015a  481d              LDR      r0,|L3.464|
00015c  f7fffffe          BL       GPIO_Init
;;;648    
;;;649    	/* 第3步：将USART Rx的GPIO配置为浮空输入模式
;;;650    		由于CPU复位后，GPIO缺省都是浮空输入模式，因此下面这个步骤不是必须的
;;;651    		但是，我还是建议加上便于阅读，并且防止其它地方修改了这个口线的设置参数
;;;652    	*/
;;;653    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
000160  f44f6000          MOV      r0,#0x800
000164  f8ad0010          STRH     r0,[sp,#0x10]
;;;654    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
000168  2004              MOVS     r0,#4
00016a  f88d0013          STRB     r0,[sp,#0x13]
;;;655    	GPIO_Init(GPIOB, &GPIO_InitStructure);
00016e  a904              ADD      r1,sp,#0x10
000170  4817              LDR      r0,|L3.464|
000172  f7fffffe          BL       GPIO_Init
;;;656    	/*  第3步已经做了，因此这步可以不做
;;;657    		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;658    	*/
;;;659    	GPIO_Init(GPIOB, &GPIO_InitStructure);
000176  a904              ADD      r1,sp,#0x10
000178  4815              LDR      r0,|L3.464|
00017a  f7fffffe          BL       GPIO_Init
;;;660    
;;;661    	/* 第4步： 配置串口硬件参数 */
;;;662    	USART_InitStructure.USART_BaudRate = UART3_BAUD;	/* 波特率 */
00017e  f44f30e1          MOV      r0,#0x1c200
000182  9000              STR      r0,[sp,#0]
;;;663    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000184  2000              MOVS     r0,#0
000186  f8ad0004          STRH     r0,[sp,#4]
;;;664    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
00018a  f8ad0006          STRH     r0,[sp,#6]
;;;665    	USART_InitStructure.USART_Parity = USART_Parity_No ;
00018e  f8ad0008          STRH     r0,[sp,#8]
;;;666    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
000192  f8ad000c          STRH     r0,[sp,#0xc]
;;;667    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000196  200c              MOVS     r0,#0xc
000198  f8ad000a          STRH     r0,[sp,#0xa]
;;;668    	USART_Init(USART3, &USART_InitStructure);
00019c  4669              MOV      r1,sp
00019e  480d              LDR      r0,|L3.468|
0001a0  f7fffffe          BL       USART_Init
;;;669    
;;;670    	USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);	/* 使能接收中断 */
0001a4  2201              MOVS     r2,#1
0001a6  f2405125          MOV      r1,#0x525
0001aa  480a              LDR      r0,|L3.468|
0001ac  f7fffffe          BL       USART_ITConfig
;;;671    	/*
;;;672    		USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
;;;673    		注意: 不要在此处打开发送中断
;;;674    		发送中断使能在SendUart()函数打开
;;;675    	*/
;;;676    	USART_Cmd(USART3, ENABLE);		/* 使能串口 */
0001b0  2101              MOVS     r1,#1
0001b2  4808              LDR      r0,|L3.468|
0001b4  f7fffffe          BL       USART_Cmd
;;;677    
;;;678    	/* CPU的小缺陷：串口配置好，如果直接Send，则第1个字节发送不出去
;;;679    		如下语句解决第1个字节无法正确发送出去的问题 */
;;;680    	USART_ClearFlag(USART3, USART_FLAG_TC);     /* 清发送完成标志，Transmission Complete flag */
0001b8  2140              MOVS     r1,#0x40
0001ba  4806              LDR      r0,|L3.468|
0001bc  f7fffffe          BL       USART_ClearFlag
;;;681    #endif
;;;682    
;;;683    #if UART4_FIFO_EN == 1			/* 串口4 TX = PC10   RX = PC11 */
;;;684    	/* 第1步： 开启GPIO和UART时钟 */
;;;685    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC | RCC_APB2Periph_AFIO, ENABLE);
;;;686    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4, ENABLE);
;;;687    
;;;688    	/* 第2步：将USART Tx的GPIO配置为推挽复用模式 */
;;;689    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
;;;690    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
;;;691    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;692    	GPIO_Init(GPIOC, &GPIO_InitStructure);
;;;693    
;;;694    	/* 第3步：将USART Rx的GPIO配置为浮空输入模式
;;;695    		由于CPU复位后，GPIO缺省都是浮空输入模式，因此下面这个步骤不是必须的
;;;696    		但是，我还是建议加上便于阅读，并且防止其它地方修改了这个口线的设置参数
;;;697    	*/
;;;698    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
;;;699    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
;;;700    	GPIO_Init(GPIOC, &GPIO_InitStructure);
;;;701    
;;;702    	/* 第4步： 配置串口硬件参数 */
;;;703    	USART_InitStructure.USART_BaudRate = UART4_BAUD;	/* 波特率 */
;;;704    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
;;;705    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
;;;706    	USART_InitStructure.USART_Parity = USART_Parity_No ;
;;;707    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
;;;708    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
;;;709    	USART_Init(UART4, &USART_InitStructure);
;;;710    
;;;711    	USART_ITConfig(UART4, USART_IT_RXNE, ENABLE);	/* 使能接收中断 */
;;;712    	/*
;;;713    		USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
;;;714    		注意: 不要在此处打开发送中断
;;;715    		发送中断使能在SendUart()函数打开
;;;716    	*/
;;;717    	USART_Cmd(UART4, ENABLE);		/* 使能串口 */
;;;718    
;;;719    	/* CPU的小缺陷：串口配置好，如果直接Send，则第1个字节发送不出去
;;;720    		如下语句解决第1个字节无法正确发送出去的问题 */
;;;721    	USART_ClearFlag(UART4, USART_FLAG_TC);     /* 清发送完成标志，Transmission Complete flag */
;;;722    #endif
;;;723    
;;;724    #if UART5_FIFO_EN == 1			/* 串口5 TX = PC12   RX = PD2 */
;;;725    	/* 第1步： 开启GPIO和UART时钟 */
;;;726    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC | RCC_APB2Periph_GPIOD | RCC_APB2Periph_AFIO, ENABLE);
;;;727    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART5, ENABLE);
;;;728    
;;;729    	/* 第2步：将USART Tx的GPIO配置为推挽复用模式 */
;;;730    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
;;;731    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
;;;732    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;733    	GPIO_Init(GPIOC, &GPIO_InitStructure);
;;;734    
;;;735    	/* 第3步：将USART Rx的GPIO配置为浮空输入模式
;;;736    		由于CPU复位后，GPIO缺省都是浮空输入模式，因此下面这个步骤不是必须的
;;;737    		但是，我还是建议加上便于阅读，并且防止其它地方修改了这个口线的设置参数
;;;738    	*/
;;;739    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
;;;740    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
;;;741    	GPIO_Init(GPIOD, &GPIO_InitStructure);
;;;742    
;;;743    
;;;744    	/* 第4步： 配置串口硬件参数 */
;;;745    	USART_InitStructure.USART_BaudRate = UART5_BAUD;	/* 波特率 */
;;;746    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
;;;747    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
;;;748    	USART_InitStructure.USART_Parity = USART_Parity_No ;
;;;749    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
;;;750    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
;;;751    	USART_Init(UART5, &USART_InitStructure);
;;;752    
;;;753    	USART_ITConfig(UART5, USART_IT_RXNE, ENABLE);	/* 使能接收中断 */
;;;754    	/*
;;;755    		USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
;;;756    		注意: 不要在此处打开发送中断
;;;757    		发送中断使能在SendUart()函数打开
;;;758    	*/
;;;759    	USART_Cmd(UART5, ENABLE);		/* 使能串口 */
;;;760    
;;;761    	/* CPU的小缺陷：串口配置好，如果直接Send，则第1个字节发送不出去
;;;762    		如下语句解决第1个字节无法正确发送出去的问题 */
;;;763    	USART_ClearFlag(UART5, USART_FLAG_TC);     /* 清发送完成标志，Transmission Complete flag */
;;;764    #endif
;;;765    }
0001c0  b005              ADD      sp,sp,#0x14
0001c2  bd00              POP      {pc}
;;;766    
                          ENDP

                  |L3.452|
                          DCD      0x40010800
                  |L3.456|
                          DCD      0x40013800
                  |L3.460|
                          DCD      0x40004400
                  |L3.464|
                          DCD      0x40010c00
                  |L3.468|
                          DCD      0x40004800

                          AREA ||i.RS485_InitTXE||, CODE, READONLY, ALIGN=2

                  RS485_InitTXE PROC
;;;303    */
;;;304    void RS485_InitTXE(void)
000000  b508              PUSH     {r3,lr}
;;;305    {
;;;306    	GPIO_InitTypeDef GPIO_InitStructure;
;;;307    
;;;308    	RCC_APB2PeriphClockCmd(RCC_RS485_TXEN, ENABLE);	/* 打开GPIO时钟 */
000002  2101              MOVS     r1,#1
000004  2004              MOVS     r0,#4
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;309    
;;;310    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00000a  2003              MOVS     r0,#3
00000c  f88d0002          STRB     r0,[sp,#2]
;;;311    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;	/* 推挽输出模式 */
000010  2010              MOVS     r0,#0x10
000012  f88d0003          STRB     r0,[sp,#3]
;;;312    	GPIO_InitStructure.GPIO_Pin = PIN_RS485_TXEN;
000016  01c0              LSLS     r0,r0,#7
000018  f8ad0000          STRH     r0,[sp,#0]
;;;313    	GPIO_Init(PORT_RS485_TXEN, &GPIO_InitStructure);
00001c  4669              MOV      r1,sp
00001e  4802              LDR      r0,|L4.40|
000020  f7fffffe          BL       GPIO_Init
;;;314    }
000024  bd08              POP      {r3,pc}
;;;315    
                          ENDP

000026  0000              DCW      0x0000
                  |L4.40|
                          DCD      0x40010800

                          AREA ||i.RS485_ReciveNew||, CODE, READONLY, ALIGN=1

                  RS485_ReciveNew PROC
;;;404    extern void MODS_ReciveNew(uint8_t _byte);
;;;405    void RS485_ReciveNew(uint8_t _byte)
000000  b510              PUSH     {r4,lr}
;;;406    {
000002  4604              MOV      r4,r0
;;;407    	MODS_ReciveNew(_byte);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       MODS_ReciveNew
;;;408    }
00000a  bd10              POP      {r4,pc}
;;;409    
                          ENDP


                          AREA ||i.RS485_SendBefor||, CODE, READONLY, ALIGN=2

                  RS485_SendBefor PROC
;;;346    */
;;;347    void RS485_SendBefor(void)
000000  f44f6000          MOV      r0,#0x800
;;;348    {
;;;349    	RS485_TX_EN();	/* 切换RS485收发芯片为发送模式 */
000004  4901              LDR      r1,|L6.12|
000006  6008              STR      r0,[r1,#0]
;;;350    }
000008  4770              BX       lr
;;;351    
                          ENDP

00000a  0000              DCW      0x0000
                  |L6.12|
                          DCD      0x40010810

                          AREA ||i.RS485_SendBuf||, CODE, READONLY, ALIGN=1

                  RS485_SendBuf PROC
;;;374    */
;;;375    void RS485_SendBuf(uint8_t *_ucaBuf, uint16_t _usLen)
000000  b570              PUSH     {r4-r6,lr}
;;;376    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;377    	comSendBuf(COM3, _ucaBuf, _usLen);//默认是COM3
000006  462a              MOV      r2,r5
000008  4621              MOV      r1,r4
00000a  2002              MOVS     r0,#2
00000c  f7fffffe          BL       comSendBuf
;;;378        //comSendBuf(COM2, _ucaBuf, _usLen);
;;;379    }
000010  bd70              POP      {r4-r6,pc}
;;;380    
                          ENDP


                          AREA ||i.RS485_SendOver||, CODE, READONLY, ALIGN=2

                  RS485_SendOver PROC
;;;360    */
;;;361    void RS485_SendOver(void)
000000  f44f6000          MOV      r0,#0x800
;;;362    {
;;;363    	RS485_RX_EN();	/* 切换RS485收发芯片为接收模式 */
000004  4901              LDR      r1,|L8.12|
000006  6008              STR      r0,[r1,#0]
;;;364    }
000008  4770              BX       lr
;;;365    
                          ENDP

00000a  0000              DCW      0x0000
                  |L8.12|
                          DCD      0x40010814

                          AREA ||i.RS485_SendStr||, CODE, READONLY, ALIGN=1

                  RS485_SendStr PROC
;;;390    */
;;;391    void RS485_SendStr(char *_pBuf)
000000  b570              PUSH     {r4-r6,lr}
;;;392    {
000002  4604              MOV      r4,r0
;;;393    	RS485_SendBuf((uint8_t *)_pBuf, strlen(_pBuf));
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       strlen
00000a  b285              UXTH     r5,r0
00000c  4629              MOV      r1,r5
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       RS485_SendBuf
;;;394    }
000014  bd70              POP      {r4-r6,pc}
;;;395    
                          ENDP


                          AREA ||i.USART1_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART1_IRQHandler PROC
;;;1042   #if UART1_FIFO_EN == 1
;;;1043   void USART1_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;1044   {
;;;1045   	UartIRQ(&g_tUart1);
000002  4802              LDR      r0,|L10.12|
000004  f7fffffe          BL       UartIRQ
;;;1046   }
000008  bd10              POP      {r4,pc}
;;;1047   #endif
                          ENDP

00000a  0000              DCW      0x0000
                  |L10.12|
                          DCD      g_tUart1

                          AREA ||i.USART2_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART2_IRQHandler PROC
;;;1049   #if UART2_FIFO_EN == 1
;;;1050   void USART2_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;1051   {
;;;1052   	UartIRQ(&g_tUart2);
000002  4802              LDR      r0,|L11.12|
000004  f7fffffe          BL       UartIRQ
;;;1053   }
000008  bd10              POP      {r4,pc}
;;;1054   #endif
                          ENDP

00000a  0000              DCW      0x0000
                  |L11.12|
                          DCD      g_tUart2

                          AREA ||i.USART3_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART3_IRQHandler PROC
;;;1056   #if UART3_FIFO_EN == 1
;;;1057   void USART3_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;1058   {
;;;1059   	UartIRQ(&g_tUart3);
000002  4802              LDR      r0,|L12.12|
000004  f7fffffe          BL       UartIRQ
;;;1060   }
000008  bd10              POP      {r4,pc}
;;;1061   #endif
                          ENDP

00000a  0000              DCW      0x0000
                  |L12.12|
                          DCD      g_tUart3

                          AREA ||i.UartGetChar||, CODE, READONLY, ALIGN=1

                  UartGetChar PROC
;;;910    */
;;;911    static uint8_t UartGetChar(UART_T *_pUart, uint8_t *_pByte)
000000  b570              PUSH     {r4-r6,lr}
;;;912    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;913    	uint16_t usCount;
;;;914    
;;;915    	/* usRxWrite 变量在中断函数中被改写，主程序读取该变量时，必须进行临界区保护 */
;;;916    	DISABLE_INT();
000006  2001              MOVS     r0,#1
000008  f7fffffe          BL       __set_PRIMASK
;;;917    	usCount = _pUart->usRxCount;
00000c  8b66              LDRH     r6,[r4,#0x1a]
;;;918    	ENABLE_INT();
00000e  2000              MOVS     r0,#0
000010  f7fffffe          BL       __set_PRIMASK
;;;919    
;;;920    	/* 如果读和写索引相同，则返回0 */
;;;921    	//if (_pUart->usRxRead == usRxWrite)
;;;922    	if (usCount == 0)	/* 已经没有数据 */
000014  b90e              CBNZ     r6,|L13.26|
;;;923    	{
;;;924    		return 0;
000016  2000              MOVS     r0,#0
                  |L13.24|
;;;925    	}
;;;926    	else
;;;927    	{
;;;928    		*_pByte = _pUart->pRxBuf[_pUart->usRxRead];		/* 从串口接收FIFO取1个数据 */
;;;929    
;;;930    		/* 改写FIFO读索引 */
;;;931    		DISABLE_INT();
;;;932    		if (++_pUart->usRxRead >= _pUart->usRxBufSize)
;;;933    		{
;;;934    			_pUart->usRxRead = 0;
;;;935    		}
;;;936    		_pUart->usRxCount--;
;;;937    		ENABLE_INT();
;;;938    		return 1;
;;;939    	}
;;;940    }
000018  bd70              POP      {r4-r6,pc}
                  |L13.26|
00001a  8b21              LDRH     r1,[r4,#0x18]         ;928
00001c  68a0              LDR      r0,[r4,#8]            ;928
00001e  5c40              LDRB     r0,[r0,r1]            ;928
000020  7028              STRB     r0,[r5,#0]            ;928
000022  2001              MOVS     r0,#1                 ;931
000024  f7fffffe          BL       __set_PRIMASK
000028  8b20              LDRH     r0,[r4,#0x18]         ;932
00002a  1c40              ADDS     r0,r0,#1              ;932
00002c  b280              UXTH     r0,r0                 ;932
00002e  8320              STRH     r0,[r4,#0x18]         ;932
000030  89e1              LDRH     r1,[r4,#0xe]          ;932
000032  4288              CMP      r0,r1                 ;932
000034  db01              BLT      |L13.58|
000036  2000              MOVS     r0,#0                 ;934
000038  8320              STRH     r0,[r4,#0x18]         ;934
                  |L13.58|
00003a  8b60              LDRH     r0,[r4,#0x1a]         ;936
00003c  1e40              SUBS     r0,r0,#1              ;936
00003e  8360              STRH     r0,[r4,#0x1a]         ;936
000040  2000              MOVS     r0,#0                 ;937
000042  f7fffffe          BL       __set_PRIMASK
000046  2001              MOVS     r0,#1                 ;938
000048  e7e6              B        |L13.24|
;;;941    
                          ENDP


                          AREA ||i.UartIRQ||, CODE, READONLY, ALIGN=1

                  UartIRQ PROC
;;;949    */
;;;950    static void UartIRQ(UART_T *_pUart)
000000  b570              PUSH     {r4-r6,lr}
;;;951    {
000002  4604              MOV      r4,r0
;;;952    	/* 处理接收中断  */
;;;953    	if (USART_GetITStatus(_pUart->uart, USART_IT_RXNE) != RESET)
000004  f2405125          MOV      r1,#0x525
000008  6820              LDR      r0,[r4,#0]
00000a  f7fffffe          BL       USART_GetITStatus
00000e  b1e0              CBZ      r0,|L14.74|
;;;954    	{
;;;955    		/* 从串口接收数据寄存器读取数据存放到接收FIFO */
;;;956    		uint8_t ch;
;;;957    
;;;958    		ch = USART_ReceiveData(_pUart->uart);
000010  6820              LDR      r0,[r4,#0]
000012  f7fffffe          BL       USART_ReceiveData
000016  b2c5              UXTB     r5,r0
;;;959    		_pUart->pRxBuf[_pUart->usRxWrite] = ch;
000018  8ae1              LDRH     r1,[r4,#0x16]
00001a  68a0              LDR      r0,[r4,#8]
00001c  5445              STRB     r5,[r0,r1]
;;;960    		if (++_pUart->usRxWrite >= _pUart->usRxBufSize)
00001e  8ae0              LDRH     r0,[r4,#0x16]
000020  1c40              ADDS     r0,r0,#1
000022  b280              UXTH     r0,r0
000024  82e0              STRH     r0,[r4,#0x16]
000026  89e1              LDRH     r1,[r4,#0xe]
000028  4288              CMP      r0,r1
00002a  db01              BLT      |L14.48|
;;;961    		{
;;;962    			_pUart->usRxWrite = 0;
00002c  2000              MOVS     r0,#0
00002e  82e0              STRH     r0,[r4,#0x16]
                  |L14.48|
;;;963    		}
;;;964    		if (_pUart->usRxCount < _pUart->usRxBufSize)
000030  8b60              LDRH     r0,[r4,#0x1a]
000032  89e1              LDRH     r1,[r4,#0xe]
000034  4288              CMP      r0,r1
000036  da02              BGE      |L14.62|
;;;965    		{
;;;966    			_pUart->usRxCount++;
000038  8b60              LDRH     r0,[r4,#0x1a]
00003a  1c40              ADDS     r0,r0,#1
00003c  8360              STRH     r0,[r4,#0x1a]
                  |L14.62|
;;;967    		}
;;;968    
;;;969    		/* 回调函数,通知应用程序收到新数据,一般是发送1个消息或者设置一个标记 */
;;;970    		//if (_pUart->usRxWrite == _pUart->usRxRead)
;;;971    		//if (_pUart->usRxCount == 1)
;;;972    		{
;;;973    			if (_pUart->ReciveNew)
00003e  6a60              LDR      r0,[r4,#0x24]
000040  b110              CBZ      r0,|L14.72|
;;;974    			{
;;;975    				_pUart->ReciveNew(ch);
000042  4628              MOV      r0,r5
000044  6a61              LDR      r1,[r4,#0x24]
000046  4788              BLX      r1
                  |L14.72|
;;;976    			}
;;;977    		}
;;;978    	}
000048  bf00              NOP      
                  |L14.74|
;;;979    
;;;980    	/* 处理发送缓冲区空中断 */
;;;981    	if (USART_GetITStatus(_pUart->uart, USART_IT_TXE) != RESET)
00004a  f2407127          MOV      r1,#0x727
00004e  6820              LDR      r0,[r4,#0]
000050  f7fffffe          BL       USART_GetITStatus
000054  b308              CBZ      r0,|L14.154|
;;;982    	{
;;;983    		//if (_pUart->usTxRead == _pUart->usTxWrite)
;;;984    		if (_pUart->usTxCount == 0)
000056  8aa0              LDRH     r0,[r4,#0x14]
000058  b960              CBNZ     r0,|L14.116|
;;;985    		{
;;;986    			/* 发送缓冲区的数据已取完时， 禁止发送缓冲区空中断 （注意：此时最后1个数据还未真正发送完毕）*/
;;;987    			USART_ITConfig(_pUart->uart, USART_IT_TXE, DISABLE);
00005a  2200              MOVS     r2,#0
00005c  f2407127          MOV      r1,#0x727
000060  6820              LDR      r0,[r4,#0]
000062  f7fffffe          BL       USART_ITConfig
;;;988    
;;;989    			/* 使能数据发送完毕中断 */
;;;990    			USART_ITConfig(_pUart->uart, USART_IT_TC, ENABLE);
000066  2201              MOVS     r2,#1
000068  f2406126          MOV      r1,#0x626
00006c  6820              LDR      r0,[r4,#0]
00006e  f7fffffe          BL       USART_ITConfig
000072  e037              B        |L14.228|
                  |L14.116|
;;;991    		}
;;;992    		else
;;;993    		{
;;;994    			/* 从发送FIFO取1个字节写入串口发送数据寄存器 */
;;;995    			USART_SendData(_pUart->uart, _pUart->pTxBuf[_pUart->usTxRead]);
000074  8a63              LDRH     r3,[r4,#0x12]
000076  6862              LDR      r2,[r4,#4]
000078  5cd1              LDRB     r1,[r2,r3]
00007a  6820              LDR      r0,[r4,#0]
00007c  f7fffffe          BL       USART_SendData
;;;996    			if (++_pUart->usTxRead >= _pUart->usTxBufSize)
000080  8a60              LDRH     r0,[r4,#0x12]
000082  1c40              ADDS     r0,r0,#1
000084  b280              UXTH     r0,r0
000086  8260              STRH     r0,[r4,#0x12]
000088  89a1              LDRH     r1,[r4,#0xc]
00008a  4288              CMP      r0,r1
00008c  db01              BLT      |L14.146|
;;;997    			{
;;;998    				_pUart->usTxRead = 0;
00008e  2000              MOVS     r0,#0
000090  8260              STRH     r0,[r4,#0x12]
                  |L14.146|
;;;999    			}
;;;1000   			_pUart->usTxCount--;
000092  8aa0              LDRH     r0,[r4,#0x14]
000094  1e40              SUBS     r0,r0,#1
000096  82a0              STRH     r0,[r4,#0x14]
000098  e024              B        |L14.228|
                  |L14.154|
;;;1001   		}
;;;1002   
;;;1003   	}
;;;1004   	/* 数据bit位全部发送完毕的中断 */
;;;1005   	else if (USART_GetITStatus(_pUart->uart, USART_IT_TC) != RESET)
00009a  f2406126          MOV      r1,#0x626
00009e  6820              LDR      r0,[r4,#0]
0000a0  f7fffffe          BL       USART_GetITStatus
0000a4  b1f0              CBZ      r0,|L14.228|
;;;1006   	{
;;;1007   		//if (_pUart->usTxRead == _pUart->usTxWrite)
;;;1008   		if (_pUart->usTxCount == 0)
0000a6  8aa0              LDRH     r0,[r4,#0x14]
0000a8  b950              CBNZ     r0,|L14.192|
;;;1009   		{
;;;1010   			/* 如果发送FIFO的数据全部发送完毕，禁止数据发送完毕中断 */
;;;1011   			USART_ITConfig(_pUart->uart, USART_IT_TC, DISABLE);
0000aa  2200              MOVS     r2,#0
0000ac  f2406126          MOV      r1,#0x626
0000b0  6820              LDR      r0,[r4,#0]
0000b2  f7fffffe          BL       USART_ITConfig
;;;1012   
;;;1013   			/* 回调函数, 一般用来处理RS485通信，将RS485芯片设置为接收模式，避免抢占总线 */
;;;1014   			if (_pUart->SendOver)
0000b6  6a20              LDR      r0,[r4,#0x20]
0000b8  b1a0              CBZ      r0,|L14.228|
;;;1015   			{
;;;1016   				_pUart->SendOver();
0000ba  6a20              LDR      r0,[r4,#0x20]
0000bc  4780              BLX      r0
0000be  e011              B        |L14.228|
                  |L14.192|
;;;1017   			}
;;;1018   		}
;;;1019   		else
;;;1020   		{
;;;1021   			/* 正常情况下，不会进入此分支 */
;;;1022   
;;;1023   			/* 如果发送FIFO的数据还未完毕，则从发送FIFO取1个数据写入发送数据寄存器 */
;;;1024   			USART_SendData(_pUart->uart, _pUart->pTxBuf[_pUart->usTxRead]);
0000c0  8a63              LDRH     r3,[r4,#0x12]
0000c2  6862              LDR      r2,[r4,#4]
0000c4  5cd1              LDRB     r1,[r2,r3]
0000c6  6820              LDR      r0,[r4,#0]
0000c8  f7fffffe          BL       USART_SendData
;;;1025   			if (++_pUart->usTxRead >= _pUart->usTxBufSize)
0000cc  8a60              LDRH     r0,[r4,#0x12]
0000ce  1c40              ADDS     r0,r0,#1
0000d0  b280              UXTH     r0,r0
0000d2  8260              STRH     r0,[r4,#0x12]
0000d4  89a1              LDRH     r1,[r4,#0xc]
0000d6  4288              CMP      r0,r1
0000d8  db01              BLT      |L14.222|
;;;1026   			{
;;;1027   				_pUart->usTxRead = 0;
0000da  2000              MOVS     r0,#0
0000dc  8260              STRH     r0,[r4,#0x12]
                  |L14.222|
;;;1028   			}
;;;1029   			_pUart->usTxCount--;
0000de  8aa0              LDRH     r0,[r4,#0x14]
0000e0  1e40              SUBS     r0,r0,#1
0000e2  82a0              STRH     r0,[r4,#0x14]
                  |L14.228|
;;;1030   		}
;;;1031   	}
;;;1032   }
0000e4  bd70              POP      {r4-r6,pc}
;;;1033   
                          ENDP


                          AREA ||i.UartSend||, CODE, READONLY, ALIGN=1

                  UartSend PROC
;;;838    */
;;;839    static void UartSend(UART_T *_pUart, uint8_t *_ucaBuf, uint16_t _usLen)
000000  b5f8              PUSH     {r3-r7,lr}
;;;840    {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4617              MOV      r7,r2
;;;841    	uint16_t i;
;;;842    
;;;843    	for (i = 0; i < _usLen; i++)
000008  2500              MOVS     r5,#0
00000a  e029              B        |L15.96|
                  |L15.12|
;;;844    	{
;;;845    		/* 如果发送缓冲区已经满了，则等待缓冲区空 */
;;;846    	#if 0
;;;847    		/*
;;;848    			在调试GPRS例程时，下面的代码出现死机，while 死循环
;;;849    			原因： 发送第1个字节时 _pUart->usTxWrite = 1；_pUart->usTxRead = 0;
;;;850    			将导致while(1) 无法退出
;;;851    		*/
;;;852    		while (1)
;;;853    		{
;;;854    			uint16_t usRead;
;;;855    
;;;856    			DISABLE_INT();
;;;857    			usRead = _pUart->usTxRead;
;;;858    			ENABLE_INT();
;;;859    
;;;860    			if (++usRead >= _pUart->usTxBufSize)
;;;861    			{
;;;862    				usRead = 0;
;;;863    			}
;;;864    
;;;865    			if (usRead != _pUart->usTxWrite)
;;;866    			{
;;;867    				break;
;;;868    			}
;;;869    		}
;;;870    	#else
;;;871    		/* 当 _pUart->usTxBufSize == 1 时, 下面的函数会死掉(待完善) */
;;;872    		while (1)
00000c  e00e              B        |L15.44|
                  |L15.14|
;;;873    		{
;;;874    			__IO uint16_t usCount;
;;;875    
;;;876    			DISABLE_INT();
00000e  2001              MOVS     r0,#1
000010  f7fffffe          BL       __set_PRIMASK
;;;877    			usCount = _pUart->usTxCount;
000014  8aa0              LDRH     r0,[r4,#0x14]
000016  9000              STR      r0,[sp,#0]
;;;878    			ENABLE_INT();
000018  2000              MOVS     r0,#0
00001a  f7fffffe          BL       __set_PRIMASK
;;;879    
;;;880    			if (usCount < _pUart->usTxBufSize)
00001e  89a0              LDRH     r0,[r4,#0xc]
000020  f8bd1000          LDRH     r1,[sp,#0]
000024  4288              CMP      r0,r1
000026  dd00              BLE      |L15.42|
;;;881    			{
;;;882    				break;
000028  e001              B        |L15.46|
                  |L15.42|
;;;883    			}
;;;884    		}
00002a  bf00              NOP      
                  |L15.44|
00002c  e7ef              B        |L15.14|
                  |L15.46|
00002e  bf00              NOP                            ;882
;;;885    	#endif
;;;886    
;;;887    		/* 将新数据填入发送缓冲区 */
;;;888    		_pUart->pTxBuf[_pUart->usTxWrite] = _ucaBuf[i];
000030  5d70              LDRB     r0,[r6,r5]
000032  8a22              LDRH     r2,[r4,#0x10]
000034  6861              LDR      r1,[r4,#4]
000036  5488              STRB     r0,[r1,r2]
;;;889    
;;;890    		DISABLE_INT();
000038  2001              MOVS     r0,#1
00003a  f7fffffe          BL       __set_PRIMASK
;;;891    		if (++_pUart->usTxWrite >= _pUart->usTxBufSize)
00003e  8a20              LDRH     r0,[r4,#0x10]
000040  1c40              ADDS     r0,r0,#1
000042  b280              UXTH     r0,r0
000044  8220              STRH     r0,[r4,#0x10]
000046  89a1              LDRH     r1,[r4,#0xc]
000048  4288              CMP      r0,r1
00004a  db01              BLT      |L15.80|
;;;892    		{
;;;893    			_pUart->usTxWrite = 0;
00004c  2000              MOVS     r0,#0
00004e  8220              STRH     r0,[r4,#0x10]
                  |L15.80|
;;;894    		}
;;;895    		_pUart->usTxCount++;
000050  8aa0              LDRH     r0,[r4,#0x14]
000052  1c40              ADDS     r0,r0,#1
000054  82a0              STRH     r0,[r4,#0x14]
;;;896    		ENABLE_INT();
000056  2000              MOVS     r0,#0
000058  f7fffffe          BL       __set_PRIMASK
00005c  1c68              ADDS     r0,r5,#1              ;843
00005e  b285              UXTH     r5,r0                 ;843
                  |L15.96|
000060  42bd              CMP      r5,r7                 ;843
000062  dbd3              BLT      |L15.12|
;;;897    	}
;;;898    
;;;899    	USART_ITConfig(_pUart->uart, USART_IT_TXE, ENABLE);
000064  2201              MOVS     r2,#1
000066  f2407127          MOV      r1,#0x727
00006a  6820              LDR      r0,[r4,#0]
00006c  f7fffffe          BL       USART_ITConfig
;;;900    }
000070  bdf8              POP      {r3-r7,pc}
;;;901    
                          ENDP


                          AREA ||i.UartVarInit||, CODE, READONLY, ALIGN=2

                  UartVarInit PROC
;;;417    */
;;;418    static void UartVarInit(void)
000000  4821              LDR      r0,|L16.136|
;;;419    {
;;;420    #if UART1_FIFO_EN == 1
;;;421    	g_tUart1.uart = USART1;						/* STM32 串口设备 */
000002  4922              LDR      r1,|L16.140|
000004  6008              STR      r0,[r1,#0]  ; g_tUart1
;;;422    	g_tUart1.pTxBuf = g_TxBuf1;					/* 发送缓冲区指针 */
000006  4822              LDR      r0,|L16.144|
000008  6048              STR      r0,[r1,#4]  ; g_tUart1
;;;423    	g_tUart1.pRxBuf = g_RxBuf1;					/* 接收缓冲区指针 */
00000a  4822              LDR      r0,|L16.148|
00000c  6088              STR      r0,[r1,#8]  ; g_tUart1
;;;424    	g_tUart1.usTxBufSize = UART1_TX_BUF_SIZE;	/* 发送缓冲区大小 */
00000e  f44f7000          MOV      r0,#0x200
000012  8188              STRH     r0,[r1,#0xc]
;;;425    	g_tUart1.usRxBufSize = UART1_RX_BUF_SIZE;	/* 接收缓冲区大小 */
000014  81c8              STRH     r0,[r1,#0xe]
;;;426    	g_tUart1.usTxWrite = 0;						/* 发送FIFO写索引 */
000016  2000              MOVS     r0,#0
000018  8208              STRH     r0,[r1,#0x10]
;;;427    	g_tUart1.usTxRead = 0;						/* 发送FIFO读索引 */
00001a  8248              STRH     r0,[r1,#0x12]
;;;428    	g_tUart1.usRxWrite = 0;						/* 接收FIFO写索引 */
00001c  82c8              STRH     r0,[r1,#0x16]
;;;429    	g_tUart1.usRxRead = 0;						/* 接收FIFO读索引 */
00001e  8308              STRH     r0,[r1,#0x18]
;;;430    	g_tUart1.usRxCount = 0;						/* 接收到的新数据个数 */
000020  8348              STRH     r0,[r1,#0x1a]
;;;431    	g_tUart1.usTxCount = 0;						/* 待发送的数据个数 */
000022  8288              STRH     r0,[r1,#0x14]
;;;432    	g_tUart1.SendBefor = 0;						/* 发送数据前的回调函数 */
000024  61c8              STR      r0,[r1,#0x1c]  ; g_tUart1
;;;433    	g_tUart1.SendOver = 0;						/* 发送完毕后的回调函数 */
000026  6208              STR      r0,[r1,#0x20]  ; g_tUart1
;;;434    	g_tUart1.ReciveNew = 0;						/* 接收到新数据后的回调函数 */
000028  6248              STR      r0,[r1,#0x24]  ; g_tUart1
;;;435    #endif
;;;436    
;;;437    #if UART2_FIFO_EN == 1
;;;438    	g_tUart2.uart = USART2;						/* STM32 串口设备 */
00002a  481b              LDR      r0,|L16.152|
00002c  491b              LDR      r1,|L16.156|
00002e  6008              STR      r0,[r1,#0]  ; g_tUart2
;;;439    	g_tUart2.pTxBuf = g_TxBuf2;					/* 发送缓冲区指针 */
000030  481b              LDR      r0,|L16.160|
000032  6048              STR      r0,[r1,#4]  ; g_tUart2
;;;440    	g_tUart2.pRxBuf = g_RxBuf2;					/* 接收缓冲区指针 */
000034  481b              LDR      r0,|L16.164|
000036  6088              STR      r0,[r1,#8]  ; g_tUart2
;;;441    	g_tUart2.usTxBufSize = UART2_TX_BUF_SIZE;	/* 发送缓冲区大小 */
000038  f44f7000          MOV      r0,#0x200
00003c  8188              STRH     r0,[r1,#0xc]
;;;442    	g_tUart2.usRxBufSize = UART2_RX_BUF_SIZE;	/* 接收缓冲区大小 */
00003e  81c8              STRH     r0,[r1,#0xe]
;;;443    	g_tUart2.usTxWrite = 0;						/* 发送FIFO写索引 */
000040  2000              MOVS     r0,#0
000042  8208              STRH     r0,[r1,#0x10]
;;;444    	g_tUart2.usTxRead = 0;						/* 发送FIFO读索引 */
000044  8248              STRH     r0,[r1,#0x12]
;;;445    	g_tUart2.usRxWrite = 0;						/* 接收FIFO写索引 */
000046  82c8              STRH     r0,[r1,#0x16]
;;;446    	g_tUart2.usRxRead = 0;						/* 接收FIFO读索引 */
000048  8308              STRH     r0,[r1,#0x18]
;;;447    	g_tUart2.usRxCount = 0;						/* 接收到的新数据个数 */
00004a  8348              STRH     r0,[r1,#0x1a]
;;;448    	g_tUart2.usTxCount = 0;						/* 待发送的数据个数 */
00004c  8288              STRH     r0,[r1,#0x14]
;;;449    	g_tUart2.SendBefor = 0;						/* 发送数据前的回调函数 */
00004e  61c8              STR      r0,[r1,#0x1c]  ; g_tUart2
;;;450    	g_tUart2.SendOver = 0;						/* 发送完毕后的回调函数 */
000050  6208              STR      r0,[r1,#0x20]  ; g_tUart2
;;;451    	g_tUart2.ReciveNew = 0;						/* 接收到新数据后的回调函数 */
000052  6248              STR      r0,[r1,#0x24]  ; g_tUart2
;;;452    #endif
;;;453    
;;;454    #if UART3_FIFO_EN == 1
;;;455    	g_tUart3.uart = USART3;						/* STM32 串口设备 */
000054  4814              LDR      r0,|L16.168|
000056  4915              LDR      r1,|L16.172|
000058  6008              STR      r0,[r1,#0]  ; g_tUart3
;;;456    	g_tUart3.pTxBuf = g_TxBuf3;					/* 发送缓冲区指针 */
00005a  4815              LDR      r0,|L16.176|
00005c  6048              STR      r0,[r1,#4]  ; g_tUart3
;;;457    	g_tUart3.pRxBuf = g_RxBuf3;					/* 接收缓冲区指针 */
00005e  4815              LDR      r0,|L16.180|
000060  6088              STR      r0,[r1,#8]  ; g_tUart3
;;;458    	g_tUart3.usTxBufSize = UART3_TX_BUF_SIZE;	/* 发送缓冲区大小 */
000062  f44f7000          MOV      r0,#0x200
000066  8188              STRH     r0,[r1,#0xc]
;;;459    	g_tUart3.usRxBufSize = UART3_RX_BUF_SIZE;	/* 接收缓冲区大小 */
000068  81c8              STRH     r0,[r1,#0xe]
;;;460    	g_tUart3.usTxWrite = 0;						/* 发送FIFO写索引 */
00006a  2000              MOVS     r0,#0
00006c  8208              STRH     r0,[r1,#0x10]
;;;461    	g_tUart3.usTxRead = 0;						/* 发送FIFO读索引 */
00006e  8248              STRH     r0,[r1,#0x12]
;;;462    	g_tUart3.usRxWrite = 0;						/* 接收FIFO写索引 */
000070  82c8              STRH     r0,[r1,#0x16]
;;;463    	g_tUart3.usRxRead = 0;						/* 接收FIFO读索引 */
000072  8308              STRH     r0,[r1,#0x18]
;;;464    	g_tUart3.usRxCount = 0;						/* 接收到的新数据个数 */
000074  8348              STRH     r0,[r1,#0x1a]
;;;465    	g_tUart3.usTxCount = 0;						/* 待发送的数据个数 */
000076  8288              STRH     r0,[r1,#0x14]
;;;466        g_tUart3.SendBefor = RS485_SendBefor;		/* 发送数据前的回调函数 */
000078  480f              LDR      r0,|L16.184|
00007a  61c8              STR      r0,[r1,#0x1c]  ; g_tUart3
;;;467    	g_tUart3.SendOver = RS485_SendOver;			/* 发送完毕后的回调函数 */
00007c  480f              LDR      r0,|L16.188|
00007e  6208              STR      r0,[r1,#0x20]  ; g_tUart3
;;;468    	g_tUart3.ReciveNew = RS485_ReciveNew;		/* 接收到新数据后的回调函数 */
000080  480f              LDR      r0,|L16.192|
000082  6248              STR      r0,[r1,#0x24]  ; g_tUart3
;;;469    //	g_tUart3.SendBefor = RS485_SendBefor;		/* 发送数据前的回调函数 */
;;;470    //	g_tUart3.SendOver = RS485_SendOver;			/* 发送完毕后的回调函数 */
;;;471    //	g_tUart3.ReciveNew = RS485_ReciveNew;		/* 接收到新数据后的回调函数 */
;;;472    #endif
;;;473    
;;;474    #if UART4_FIFO_EN == 1
;;;475    	g_tUart4.uart = UART4;						/* STM32 串口设备 */
;;;476    	g_tUart4.pTxBuf = g_TxBuf4;					/* 发送缓冲区指针 */
;;;477    	g_tUart4.pRxBuf = g_RxBuf4;					/* 接收缓冲区指针 */
;;;478    	g_tUart4.usTxBufSize = UART4_TX_BUF_SIZE;	/* 发送缓冲区大小 */
;;;479    	g_tUart4.usRxBufSize = UART4_RX_BUF_SIZE;	/* 接收缓冲区大小 */
;;;480    	g_tUart4.usTxWrite = 0;						/* 发送FIFO写索引 */
;;;481    	g_tUart4.usTxRead = 0;						/* 发送FIFO读索引 */
;;;482    	g_tUart4.usRxWrite = 0;						/* 接收FIFO写索引 */
;;;483    	g_tUart4.usRxRead = 0;						/* 接收FIFO读索引 */
;;;484    	g_tUart4.usRxCount = 0;						/* 接收到的新数据个数 */
;;;485    	g_tUart4.usTxCount = 0;						/* 待发送的数据个数 */
;;;486    	g_tUart4.SendBefor = 0;						/* 发送数据前的回调函数 */
;;;487    	g_tUart4.SendOver = 0;						/* 发送完毕后的回调函数 */
;;;488    	g_tUart4.ReciveNew = 0;						/* 接收到新数据后的回调函数 */
;;;489    #endif
;;;490    
;;;491    #if UART5_FIFO_EN == 1
;;;492    	g_tUart5.uart = UART5;						/* STM32 串口设备 */
;;;493    	g_tUart5.pTxBuf = g_TxBuf5;					/* 发送缓冲区指针 */
;;;494    	g_tUart5.pRxBuf = g_RxBuf5;					/* 接收缓冲区指针 */
;;;495    	g_tUart5.usTxBufSize = UART5_TX_BUF_SIZE;	/* 发送缓冲区大小 */
;;;496    	g_tUart5.usRxBufSize = UART5_RX_BUF_SIZE;	/* 接收缓冲区大小 */
;;;497    	g_tUart5.usTxWrite = 0;						/* 发送FIFO写索引 */
;;;498    	g_tUart5.usTxRead = 0;						/* 发送FIFO读索引 */
;;;499    	g_tUart5.usRxWrite = 0;						/* 接收FIFO写索引 */
;;;500    	g_tUart5.usRxRead = 0;						/* 接收FIFO读索引 */
;;;501    	g_tUart5.usRxCount = 0;						/* 接收到的新数据个数 */
;;;502    	g_tUart5.usTxCount = 0;						/* 待发送的数据个数 */
;;;503    	g_tUart5.SendBefor = 0;						/* 发送数据前的回调函数 */
;;;504    	g_tUart5.SendOver = 0;						/* 发送完毕后的回调函数 */
;;;505    	g_tUart5.ReciveNew = 0;						/* 接收到新数据后的回调函数 */
;;;506    #endif
;;;507    
;;;508    
;;;509    #if UART6_FIFO_EN == 1
;;;510    	g_tUart6.uart = USART6;						/* STM32 串口设备 */
;;;511    	g_tUart6.pTxBuf = g_TxBuf6;					/* 发送缓冲区指针 */
;;;512    	g_tUart6.pRxBuf = g_RxBuf6;					/* 接收缓冲区指针 */
;;;513    	g_tUart6.usTxBufSize = UART6_TX_BUF_SIZE;	/* 发送缓冲区大小 */
;;;514    	g_tUart6.usRxBufSize = UART6_RX_BUF_SIZE;	/* 接收缓冲区大小 */
;;;515    	g_tUart6.usTxWrite = 0;						/* 发送FIFO写索引 */
;;;516    	g_tUart6.usTxRead = 0;						/* 发送FIFO读索引 */
;;;517    	g_tUart6.usRxWrite = 0;						/* 接收FIFO写索引 */
;;;518    	g_tUart6.usRxRead = 0;						/* 接收FIFO读索引 */
;;;519    	g_tUart6.usRxCount = 0;						/* 接收到的新数据个数 */
;;;520    	g_tUart6.usTxCount = 0;						/* 待发送的数据个数 */
;;;521    	g_tUart6.SendBefor = 0;						/* 发送数据前的回调函数 */
;;;522    	g_tUart6.SendOver = 0;						/* 发送完毕后的回调函数 */
;;;523    	g_tUart6.ReciveNew = 0;						/* 接收到新数据后的回调函数 */
;;;524    #endif
;;;525    }
000084  4770              BX       lr
;;;526    
                          ENDP

000086  0000              DCW      0x0000
                  |L16.136|
                          DCD      0x40013800
                  |L16.140|
                          DCD      g_tUart1
                  |L16.144|
                          DCD      g_TxBuf1
                  |L16.148|
                          DCD      g_RxBuf1
                  |L16.152|
                          DCD      0x40004400
                  |L16.156|
                          DCD      g_tUart2
                  |L16.160|
                          DCD      g_TxBuf2
                  |L16.164|
                          DCD      g_RxBuf2
                  |L16.168|
                          DCD      0x40004800
                  |L16.172|
                          DCD      g_tUart3
                  |L16.176|
                          DCD      g_TxBuf3
                  |L16.180|
                          DCD      g_RxBuf3
                  |L16.184|
                          DCD      RS485_SendBefor
                  |L16.188|
                          DCD      RS485_SendOver
                  |L16.192|
                          DCD      RS485_ReciveNew

                          AREA ||i.__set_PRIMASK||, CODE, READONLY, ALIGN=1

                  __set_PRIMASK PROC
;;;179     */
;;;180    __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
000000  f3808810          MSR      PRIMASK,r0
;;;181    {
;;;182      register uint32_t __regPriMask         __ASM("primask");
;;;183      __regPriMask = (priMask);
;;;184    }
000004  4770              BX       lr
;;;185    
                          ENDP


                          AREA ||i.bsp_InitUart||, CODE, READONLY, ALIGN=1

                  bsp_InitUart PROC
;;;70     */
;;;71     void bsp_InitUart(void)
000000  b510              PUSH     {r4,lr}
;;;72     {
;;;73     	UartVarInit();		/* 必须先初始化全局变量,再配置硬件 */
000002  f7fffffe          BL       UartVarInit
;;;74     
;;;75     	InitHardUart();		/* 配置串口的硬件参数(波特率等) */
000006  f7fffffe          BL       InitHardUart
;;;76     
;;;77     	RS485_InitTXE();	/* 配置RS485芯片的发送使能硬件，配置为推挽输出 */
00000a  f7fffffe          BL       RS485_InitTXE
;;;78     
;;;79     	ConfigUartNVIC();	/* 配置串口中断 */
00000e  f7fffffe          BL       ConfigUartNVIC
;;;80     }
000012  bd10              POP      {r4,pc}
;;;81     
                          ENDP


                          AREA ||i.bsp_Set485Baud||, CODE, READONLY, ALIGN=2

                  bsp_Set485Baud PROC
;;;323    */
;;;324    void bsp_Set485Baud(uint32_t _baud)
000000  b51f              PUSH     {r0-r4,lr}
;;;325    {
000002  4604              MOV      r4,r0
;;;326    	USART_InitTypeDef USART_InitStructure;
;;;327    
;;;328    	/* 第2步： 配置串口硬件参数 */
;;;329    	USART_InitStructure.USART_BaudRate = _baud;	/* 波特率 */
000004  9400              STR      r4,[sp,#0]
;;;330    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000006  2000              MOVS     r0,#0
000008  f8ad0004          STRH     r0,[sp,#4]
;;;331    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
00000c  f8ad0006          STRH     r0,[sp,#6]
;;;332    	USART_InitStructure.USART_Parity = USART_Parity_No ;
000010  f8ad0008          STRH     r0,[sp,#8]
;;;333    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
000014  f8ad000c          STRH     r0,[sp,#0xc]
;;;334    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000018  200c              MOVS     r0,#0xc
00001a  f8ad000a          STRH     r0,[sp,#0xa]
;;;335    	USART_Init(USART3, &USART_InitStructure);
00001e  4669              MOV      r1,sp
000020  4801              LDR      r0,|L19.40|
000022  f7fffffe          BL       USART_Init
;;;336    }
000026  bd1f              POP      {r0-r4,pc}
;;;337    
                          ENDP

                  |L19.40|
                          DCD      0x40004800

                          AREA ||i.bsp_SetUart1Baud||, CODE, READONLY, ALIGN=2

                  bsp_SetUart1Baud PROC
;;;256    */
;;;257    void bsp_SetUart1Baud(uint32_t _baud)
000000  b51f              PUSH     {r0-r4,lr}
;;;258    {
000002  4604              MOV      r4,r0
;;;259    	USART_InitTypeDef USART_InitStructure;
;;;260    
;;;261    	/* 第2步： 配置串口硬件参数 */
;;;262    	USART_InitStructure.USART_BaudRate = _baud;	/* 波特率 */
000004  9400              STR      r4,[sp,#0]
;;;263    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000006  2000              MOVS     r0,#0
000008  f8ad0004          STRH     r0,[sp,#4]
;;;264    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
00000c  f8ad0006          STRH     r0,[sp,#6]
;;;265    	USART_InitStructure.USART_Parity = USART_Parity_No ;
000010  f8ad0008          STRH     r0,[sp,#8]
;;;266    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
000014  f8ad000c          STRH     r0,[sp,#0xc]
;;;267    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000018  200c              MOVS     r0,#0xc
00001a  f8ad000a          STRH     r0,[sp,#0xa]
;;;268    	USART_Init(USART2, &USART_InitStructure);
00001e  4669              MOV      r1,sp
000020  4801              LDR      r0,|L20.40|
000022  f7fffffe          BL       USART_Init
;;;269    }
000026  bd1f              POP      {r0-r4,pc}
;;;270    
                          ENDP

                  |L20.40|
                          DCD      0x40004400

                          AREA ||i.bsp_SetUart2Baud||, CODE, READONLY, ALIGN=2

                  bsp_SetUart2Baud PROC
;;;278    */
;;;279    void bsp_SetUart2Baud(uint32_t _baud)
000000  b51f              PUSH     {r0-r4,lr}
;;;280    {
000002  4604              MOV      r4,r0
;;;281    	USART_InitTypeDef USART_InitStructure;
;;;282    
;;;283    	/* 第2步： 配置串口硬件参数 */
;;;284    	USART_InitStructure.USART_BaudRate = _baud;	/* 波特率 */
000004  9400              STR      r4,[sp,#0]
;;;285    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000006  2000              MOVS     r0,#0
000008  f8ad0004          STRH     r0,[sp,#4]
;;;286    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
00000c  f8ad0006          STRH     r0,[sp,#6]
;;;287    	USART_InitStructure.USART_Parity = USART_Parity_No ;
000010  f8ad0008          STRH     r0,[sp,#8]
;;;288    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
000014  f8ad000c          STRH     r0,[sp,#0xc]
;;;289    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000018  200c              MOVS     r0,#0xc
00001a  f8ad000a          STRH     r0,[sp,#0xa]
;;;290    	USART_Init(USART2, &USART_InitStructure);
00001e  4669              MOV      r1,sp
000020  4801              LDR      r0,|L21.40|
000022  f7fffffe          BL       USART_Init
;;;291    }
000026  bd1f              POP      {r0-r4,pc}
;;;292    
                          ENDP

                  |L21.40|
                          DCD      0x40004400

                          AREA ||i.comClearRxFifo||, CODE, READONLY, ALIGN=1

                  comClearRxFifo PROC
;;;233    */
;;;234    void comClearRxFifo(COM_PORT_E _ucPort)
000000  b500              PUSH     {lr}
;;;235    {
000002  4603              MOV      r3,r0
;;;236    	UART_T *pUart;
;;;237    
;;;238    	pUart = ComToUart(_ucPort);
000004  4618              MOV      r0,r3
000006  f7fffffe          BL       ComToUart
00000a  4602              MOV      r2,r0
;;;239    	if (pUart == 0)
00000c  b902              CBNZ     r2,|L22.16|
                  |L22.14|
;;;240    	{
;;;241    		return;
;;;242    	}
;;;243    
;;;244    	pUart->usRxWrite = 0;
;;;245    	pUart->usRxRead = 0;
;;;246    	pUart->usRxCount = 0;
;;;247    }
00000e  bd00              POP      {pc}
                  |L22.16|
000010  2000              MOVS     r0,#0                 ;244
000012  82d0              STRH     r0,[r2,#0x16]         ;244
000014  8310              STRH     r0,[r2,#0x18]         ;245
000016  8350              STRH     r0,[r2,#0x1a]         ;246
000018  bf00              NOP      
00001a  e7f8              B        |L22.14|
;;;248    
                          ENDP


                          AREA ||i.comClearTxFifo||, CODE, READONLY, ALIGN=1

                  comClearTxFifo PROC
;;;210    */
;;;211    void comClearTxFifo(COM_PORT_E _ucPort)
000000  b500              PUSH     {lr}
;;;212    {
000002  4603              MOV      r3,r0
;;;213    	UART_T *pUart;
;;;214    
;;;215    	pUart = ComToUart(_ucPort);
000004  4618              MOV      r0,r3
000006  f7fffffe          BL       ComToUart
00000a  4602              MOV      r2,r0
;;;216    	if (pUart == 0)
00000c  b902              CBNZ     r2,|L23.16|
                  |L23.14|
;;;217    	{
;;;218    		return;
;;;219    	}
;;;220    
;;;221    	pUart->usTxWrite = 0;
;;;222    	pUart->usTxRead = 0;
;;;223    	pUart->usTxCount = 0;
;;;224    }
00000e  bd00              POP      {pc}
                  |L23.16|
000010  2000              MOVS     r0,#0                 ;221
000012  8210              STRH     r0,[r2,#0x10]         ;221
000014  8250              STRH     r0,[r2,#0x12]         ;222
000016  8290              STRH     r0,[r2,#0x14]         ;223
000018  bf00              NOP      
00001a  e7f8              B        |L23.14|
;;;225    
                          ENDP


                          AREA ||i.comGetChar||, CODE, READONLY, ALIGN=1

                  comGetChar PROC
;;;189    */
;;;190    uint8_t comGetChar(COM_PORT_E _ucPort, uint8_t *_pByte)
000000  b570              PUSH     {r4-r6,lr}
;;;191    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;192    	UART_T *pUart;
;;;193    
;;;194    	pUart = ComToUart(_ucPort);
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       ComToUart
00000c  4604              MOV      r4,r0
;;;195    	if (pUart == 0)
00000e  b90c              CBNZ     r4,|L24.20|
;;;196    	{
;;;197    		return 0;
000010  2000              MOVS     r0,#0
                  |L24.18|
;;;198    	}
;;;199    
;;;200    	return UartGetChar(pUart, _pByte);
;;;201    }
000012  bd70              POP      {r4-r6,pc}
                  |L24.20|
000014  4631              MOV      r1,r6                 ;200
000016  4620              MOV      r0,r4                 ;200
000018  f7fffffe          BL       UartGetChar
00001c  e7f9              B        |L24.18|
;;;202    
                          ENDP


                          AREA ||i.comSendBuf||, CODE, READONLY, ALIGN=1

                  comSendBuf PROC
;;;148    */
;;;149    void comSendBuf(COM_PORT_E _ucPort, uint8_t *_ucaBuf, uint16_t _usLen)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;150    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;151    	UART_T *pUart;
;;;152    
;;;153    	pUart = ComToUart(_ucPort);
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       ComToUart
000010  4604              MOV      r4,r0
;;;154    	if (pUart == 0)
000012  b90c              CBNZ     r4,|L25.24|
                  |L25.20|
;;;155    	{
;;;156    		return;
;;;157    	}
;;;158    
;;;159    	if (pUart->SendBefor != 0)
;;;160    	{
;;;161    		pUart->SendBefor();		/* 如果是RS485通信，可以在这个函数中将RS485设置为发送模式 */
;;;162    	}
;;;163    
;;;164    	UartSend(pUart, _ucaBuf, _usLen);
;;;165    }
000014  e8bd81f0          POP      {r4-r8,pc}
                  |L25.24|
000018  69e0              LDR      r0,[r4,#0x1c]         ;159
00001a  b108              CBZ      r0,|L25.32|
00001c  69e0              LDR      r0,[r4,#0x1c]         ;161
00001e  4780              BLX      r0                    ;161
                  |L25.32|
000020  463a              MOV      r2,r7                 ;164
000022  4631              MOV      r1,r6                 ;164
000024  4620              MOV      r0,r4                 ;164
000026  f7fffffe          BL       UartSend
00002a  bf00              NOP      
00002c  e7f2              B        |L25.20|
;;;166    
                          ENDP


                          AREA ||i.comSendChar||, CODE, READONLY, ALIGN=1

                  comSendChar PROC
;;;175    */
;;;176    void comSendChar(COM_PORT_E _ucPort, uint8_t _ucByte)
000000  b513              PUSH     {r0,r1,r4,lr}
;;;177    {
000002  4604              MOV      r4,r0
;;;178    	comSendBuf(_ucPort, &_ucByte, 1);
000004  2201              MOVS     r2,#1
000006  a901              ADD      r1,sp,#4
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       comSendBuf
;;;179    }
00000e  bd1c              POP      {r2-r4,pc}
;;;180    
                          ENDP


                          AREA ||i.fgetc||, CODE, READONLY, ALIGN=1

                  fgetc PROC
;;;1117   */
;;;1118   int fgetc(FILE *f)
000000  b538              PUSH     {r3-r5,lr}
;;;1119   {
000002  4604              MOV      r4,r0
;;;1120   
;;;1121   #if 1	/* 从串口接收FIFO中取1个数据, 只有取到数据才返回 */
;;;1122   	uint8_t ucData;
;;;1123   
;;;1124   	while(comGetChar(COM1, &ucData) == 0);
000004  bf00              NOP      
                  |L27.6|
000006  4669              MOV      r1,sp
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       comGetChar
00000e  2800              CMP      r0,#0
000010  d0f9              BEQ      |L27.6|
;;;1125   
;;;1126   	return ucData;
000012  f89d0000          LDRB     r0,[sp,#0]
;;;1127   #else
;;;1128   	/* 等待串口1输入数据 */
;;;1129   	while (USART_GetFlagStatus(USART1, USART_FLAG_RXNE) == RESET);
;;;1130   
;;;1131   	return (int)USART_ReceiveData(USART1);
;;;1132   #endif
;;;1133   }
000016  bd38              POP      {r3-r5,pc}
;;;1134   
                          ENDP


                          AREA ||i.fputc||, CODE, READONLY, ALIGN=1

                  fputc PROC
;;;1091   */
;;;1092   int fputc(int ch, FILE *f)
000000  b570              PUSH     {r4-r6,lr}
;;;1093   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1094   #if 1	/* 将需要printf的字符通过串口中断FIFO发送出去，printf函数会立即返回 */
;;;1095   	comSendChar(COM1, ch);
000006  b2e1              UXTB     r1,r4
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       comSendChar
;;;1096   
;;;1097   	return ch;
00000e  4620              MOV      r0,r4
;;;1098   #else	/* 采用阻塞方式发送每个字符,等待数据发送完毕 */
;;;1099   	/* 写一个字节到USART1 */
;;;1100   	USART_SendData(USART1, (uint8_t) ch);
;;;1101   
;;;1102   	/* 等待发送结束 */
;;;1103   	while (USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET)
;;;1104   	{}
;;;1105   
;;;1106   	return ch;
;;;1107   #endif
;;;1108   }
000010  bd70              POP      {r4-r6,pc}
;;;1109   
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  g_tUart1
                          %        40
                  g_TxBuf1
                          %        512
                  g_RxBuf1
                          %        512
                  g_tUart2
                          %        40
                  g_TxBuf2
                          %        512
                  g_RxBuf2
                          %        512
                  g_tUart3
                          %        40
                  g_TxBuf3
                          %        512
                  g_RxBuf3
                          %        512

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp\\src\\bsp_uart_fifo.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_bsp_uart_fifo_c_b28b0d00____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_bsp_uart_fifo_c_b28b0d00____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_bsp_uart_fifo_c_b28b0d00____REVSH|
#line 128
|__asm___15_bsp_uart_fifo_c_b28b0d00____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
