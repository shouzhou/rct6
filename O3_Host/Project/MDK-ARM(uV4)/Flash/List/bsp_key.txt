; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_key.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_key.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Include -I..\..\User -I..\..\User\bsp\inc -I..\..\User\bsp -I..\..\User\app\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -D__MICROLIB -D__UVISION_VERSION=527 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\bsp_key.crf ..\..\User\bsp\src\bsp_key.c]
                          THUMB

                          AREA ||i.IsKeyDown1||, CODE, READONLY, ALIGN=2

                  IsKeyDown1 PROC
;;;91     #if 1	/* 为了区分3个事件:　K1单独按下, K2单独按下， K1和K2同时按下 */
;;;92     static uint8_t IsKeyDown1(void)
000000  4806              LDR      r0,|L1.28|
;;;93     {
;;;94     	if ((GPIO_PORT_K1->IDR & GPIO_PIN_K1) == 0 && (GPIO_PORT_K2->IDR & GPIO_PIN_K2) != 0)
000002  6800              LDR      r0,[r0,#0]
000004  f4005000          AND      r0,r0,#0x2000
000008  b930              CBNZ     r0,|L1.24|
00000a  4804              LDR      r0,|L1.28|
00000c  6800              LDR      r0,[r0,#0]
00000e  f4004080          AND      r0,r0,#0x4000
000012  b108              CBZ      r0,|L1.24|
;;;95     		return 1;
000014  2001              MOVS     r0,#1
                  |L1.22|
;;;96     	else 
;;;97     		return 0;
;;;98     }
000016  4770              BX       lr
                  |L1.24|
000018  2000              MOVS     r0,#0                 ;97
00001a  e7fc              B        |L1.22|
;;;99     static uint8_t IsKeyDown2(void)
                          ENDP

                  |L1.28|
                          DCD      0x40010c08

                          AREA ||i.IsKeyDown10||, CODE, READONLY, ALIGN=1

                  IsKeyDown10 PROC
;;;122    }
;;;123    static uint8_t IsKeyDown10(void)	/* K2 K3组合键 */
000000  2000              MOVS     r0,#0
;;;124    {
;;;125    //	if ((GPIO_PORT_K1->IDR & GPIO_PIN_K1) != 0 && (GPIO_PORT_K2->IDR & GPIO_PIN_K2) != 0
;;;126    //		&& (GPIO_PORT_K3->IDR & GPIO_PIN_K3) == 0)
;;;127    //		return 1;
;;;128    //	else 
;;;129    		return 0;
;;;130    }
000002  4770              BX       lr
;;;131    #else	
                          ENDP


                          AREA ||i.IsKeyDown2||, CODE, READONLY, ALIGN=2

                  IsKeyDown2 PROC
;;;98     }
;;;99     static uint8_t IsKeyDown2(void)
000000  4809              LDR      r0,|L3.40|
;;;100    {
;;;101    	if ((GPIO_PORT_K1->IDR & GPIO_PIN_K1) != 0 && (GPIO_PORT_K2->IDR & GPIO_PIN_K2) == 0
000002  6800              LDR      r0,[r0,#0]
000004  f4005000          AND      r0,r0,#0x2000
000008  b158              CBZ      r0,|L3.34|
00000a  4807              LDR      r0,|L3.40|
00000c  6800              LDR      r0,[r0,#0]
00000e  f4004080          AND      r0,r0,#0x4000
000012  b930              CBNZ     r0,|L3.34|
;;;102    		&& (GPIO_PORT_K3->IDR & GPIO_PIN_K3) != 0)
000014  4804              LDR      r0,|L3.40|
000016  6800              LDR      r0,[r0,#0]
000018  f4005000          AND      r0,r0,#0x2000
00001c  b108              CBZ      r0,|L3.34|
;;;103    		return 1;
00001e  2001              MOVS     r0,#1
                  |L3.32|
;;;104    	else 
;;;105    		return 0;
;;;106    }
000020  4770              BX       lr
                  |L3.34|
000022  2000              MOVS     r0,#0                 ;105
000024  e7fc              B        |L3.32|
;;;107    static uint8_t IsKeyDown3(void)
                          ENDP

000026  0000              DCW      0x0000
                  |L3.40|
                          DCD      0x40010c08

                          AREA ||i.IsKeyDown3||, CODE, READONLY, ALIGN=1

                  IsKeyDown3 PROC
;;;106    }
;;;107    static uint8_t IsKeyDown3(void)
000000  2000              MOVS     r0,#0
;;;108    {
;;;109    //	if ((GPIO_PORT_K1->IDR & GPIO_PIN_K1) != 0 && (GPIO_PORT_K2->IDR & GPIO_PIN_K2) != 0
;;;110    //		&& (GPIO_PORT_K3->IDR & GPIO_PIN_K3) == 0)
;;;111    //		return 1;
;;;112    //	else 
;;;113    		return 0;
;;;114    }
000002  4770              BX       lr
;;;115    static uint8_t IsKeyDown9(void)	/* K1 K2组合键 */
                          ENDP


                          AREA ||i.IsKeyDown4||, CODE, READONLY, ALIGN=1

                  IsKeyDown4 PROC
;;;145    //static uint8_t IsKeyDown8(void) {if ((GPIO_PORT_K8->IDR & GPIO_PIN_K8) == 0) return 1;else return 0;}
;;;146    static uint8_t IsKeyDown4(void) { return 0;}
000000  2000              MOVS     r0,#0
000002  4770              BX       lr
;;;147    static uint8_t IsKeyDown5(void) { return 0;}
                          ENDP


                          AREA ||i.IsKeyDown5||, CODE, READONLY, ALIGN=1

                  IsKeyDown5 PROC
;;;146    static uint8_t IsKeyDown4(void) { return 0;}
;;;147    static uint8_t IsKeyDown5(void) { return 0;}
000000  2000              MOVS     r0,#0
000002  4770              BX       lr
;;;148    static uint8_t IsKeyDown6(void) { return 0;}
                          ENDP


                          AREA ||i.IsKeyDown6||, CODE, READONLY, ALIGN=1

                  IsKeyDown6 PROC
;;;147    static uint8_t IsKeyDown5(void) { return 0;}
;;;148    static uint8_t IsKeyDown6(void) { return 0;}
000000  2000              MOVS     r0,#0
000002  4770              BX       lr
;;;149    static uint8_t IsKeyDown7(void) { return 0;}
                          ENDP


                          AREA ||i.IsKeyDown7||, CODE, READONLY, ALIGN=1

                  IsKeyDown7 PROC
;;;148    static uint8_t IsKeyDown6(void) { return 0;}
;;;149    static uint8_t IsKeyDown7(void) { return 0;}
000000  2000              MOVS     r0,#0
000002  4770              BX       lr
;;;150    static uint8_t IsKeyDown8(void) { return 0;}
                          ENDP


                          AREA ||i.IsKeyDown8||, CODE, READONLY, ALIGN=1

                  IsKeyDown8 PROC
;;;149    static uint8_t IsKeyDown7(void) { return 0;}
;;;150    static uint8_t IsKeyDown8(void) { return 0;}
000000  2000              MOVS     r0,#0
000002  4770              BX       lr
;;;151    
                          ENDP


                          AREA ||i.IsKeyDown9||, CODE, READONLY, ALIGN=1

                  IsKeyDown9 PROC
;;;114    }
;;;115    static uint8_t IsKeyDown9(void)	/* K1 K2组合键 */
000000  2000              MOVS     r0,#0
;;;116    {
;;;117    //	if ((GPIO_PORT_K1->IDR & GPIO_PIN_K1) == 0 && (GPIO_PORT_K2->IDR & GPIO_PIN_K2) != 0
;;;118    //		&& (GPIO_PORT_K3->IDR & GPIO_PIN_K3) != 0)
;;;119    //		return 1;
;;;120    //	else 
;;;121    		return 0;
;;;122    }
000002  4770              BX       lr
;;;123    static uint8_t IsKeyDown10(void)	/* K2 K3组合键 */
                          ENDP


                          AREA ||i.bsp_ClearKey||, CODE, READONLY, ALIGN=2

                  bsp_ClearKey PROC
;;;280    */
;;;281    void bsp_ClearKey(void)
000000  4802              LDR      r0,|L11.12|
;;;282    {
;;;283    	s_tKey.Read = s_tKey.Write;
000002  7ac0              LDRB     r0,[r0,#0xb]  ; s_tKey
000004  4901              LDR      r1,|L11.12|
000006  7288              STRB     r0,[r1,#0xa]
;;;284    }
000008  4770              BX       lr
;;;285    
                          ENDP

00000a  0000              DCW      0x0000
                  |L11.12|
                          DCD      s_tKey

                          AREA ||i.bsp_DetectKey||, CODE, READONLY, ALIGN=2

                  bsp_DetectKey PROC
;;;396    */
;;;397    static void bsp_DetectKey(uint8_t i)
000000  b570              PUSH     {r4-r6,lr}
;;;398    {
000002  4605              MOV      r5,r0
;;;399    	KEY_T *pBtn;
;;;400    
;;;401    	/*
;;;402    		如果没有初始化按键函数，则报错
;;;403    		if (s_tBtn[i].IsKeyDownFunc == 0)
;;;404    		{
;;;405    			printf("Fault : DetectButton(), s_tBtn[i].IsKeyDownFunc undefine");
;;;406    		}
;;;407    	*/
;;;408    
;;;409    	pBtn = &s_tBtn[i];
000004  4830              LDR      r0,|L12.200|
000006  eb001405          ADD      r4,r0,r5,LSL #4
;;;410    	if (pBtn->IsKeyDownFunc())
00000a  6820              LDR      r0,[r4,#0]
00000c  4780              BLX      r0
00000e  2800              CMP      r0,#0
000010  d03e              BEQ      |L12.144|
;;;411    	{
;;;412    		if (pBtn->Count < KEY_FILTER_TIME)
000012  7920              LDRB     r0,[r4,#4]
000014  2805              CMP      r0,#5
000016  da02              BGE      |L12.30|
;;;413    		{
;;;414    			pBtn->Count = KEY_FILTER_TIME;
000018  2005              MOVS     r0,#5
00001a  7120              STRB     r0,[r4,#4]
00001c  e052              B        |L12.196|
                  |L12.30|
;;;415    		}
;;;416    		else if(pBtn->Count < 2 * KEY_FILTER_TIME)
00001e  7920              LDRB     r0,[r4,#4]
000020  280a              CMP      r0,#0xa
000022  da03              BGE      |L12.44|
;;;417    		{
;;;418    			pBtn->Count++;
000024  7920              LDRB     r0,[r4,#4]
000026  1c40              ADDS     r0,r0,#1
000028  7120              STRB     r0,[r4,#4]
00002a  e04b              B        |L12.196|
                  |L12.44|
;;;419    		}
;;;420    		else
;;;421    		{
;;;422    			if (pBtn->State == 0)
00002c  7aa0              LDRB     r0,[r4,#0xa]
00002e  b938              CBNZ     r0,|L12.64|
;;;423    			{
;;;424    				pBtn->State = 1;
000030  2001              MOVS     r0,#1
000032  72a0              STRB     r0,[r4,#0xa]
;;;425    
;;;426    				/* 发送按钮按下的消息 */
;;;427    				bsp_PutKey((uint8_t)(3 * i + 1));
000034  eb050145          ADD      r1,r5,r5,LSL #1
000038  1c49              ADDS     r1,r1,#1
00003a  b2c8              UXTB     r0,r1
00003c  f7fffffe          BL       bsp_PutKey
                  |L12.64|
;;;428    			}
;;;429    
;;;430    			if (pBtn->LongTime > 0)
000040  8920              LDRH     r0,[r4,#8]
000042  2800              CMP      r0,#0
000044  dd3e              BLE      |L12.196|
;;;431    			{
;;;432    				if (pBtn->LongCount < pBtn->LongTime)
000046  88e0              LDRH     r0,[r4,#6]
000048  8921              LDRH     r1,[r4,#8]
00004a  4288              CMP      r0,r1
00004c  da0d              BGE      |L12.106|
;;;433    				{
;;;434    					/* 发送按钮持续按下的消息 */
;;;435    					if (++pBtn->LongCount == pBtn->LongTime)
00004e  88e0              LDRH     r0,[r4,#6]
000050  1c40              ADDS     r0,r0,#1
000052  b280              UXTH     r0,r0
000054  80e0              STRH     r0,[r4,#6]
000056  8921              LDRH     r1,[r4,#8]
000058  4288              CMP      r0,r1
00005a  d133              BNE      |L12.196|
;;;436    					{
;;;437    						/* 键值放入按键FIFO */
;;;438    						bsp_PutKey((uint8_t)(3 * i + 3));
00005c  eb050145          ADD      r1,r5,r5,LSL #1
000060  1cc9              ADDS     r1,r1,#3
000062  b2c8              UXTB     r0,r1
000064  f7fffffe          BL       bsp_PutKey
000068  e02c              B        |L12.196|
                  |L12.106|
;;;439    					}
;;;440    				}
;;;441    				else
;;;442    				{
;;;443    					if (pBtn->RepeatSpeed > 0)
00006a  7ae0              LDRB     r0,[r4,#0xb]
00006c  2800              CMP      r0,#0
00006e  dd29              BLE      |L12.196|
;;;444    					{
;;;445    						if (++pBtn->RepeatCount >= pBtn->RepeatSpeed)
000070  7b20              LDRB     r0,[r4,#0xc]
000072  1c40              ADDS     r0,r0,#1
000074  b2c0              UXTB     r0,r0
000076  7320              STRB     r0,[r4,#0xc]
000078  7ae1              LDRB     r1,[r4,#0xb]
00007a  4288              CMP      r0,r1
00007c  db22              BLT      |L12.196|
;;;446    						{
;;;447    							pBtn->RepeatCount = 0;
00007e  2000              MOVS     r0,#0
000080  7320              STRB     r0,[r4,#0xc]
;;;448    							/* 常按键后，每隔10ms发送1个按键 */
;;;449    							bsp_PutKey((uint8_t)(3 * i + 1));
000082  eb050145          ADD      r1,r5,r5,LSL #1
000086  1c49              ADDS     r1,r1,#1
000088  b2c8              UXTB     r0,r1
00008a  f7fffffe          BL       bsp_PutKey
00008e  e019              B        |L12.196|
                  |L12.144|
;;;450    						}
;;;451    					}
;;;452    				}
;;;453    			}
;;;454    		}
;;;455    	}
;;;456    	else
;;;457    	{
;;;458    		if(pBtn->Count > KEY_FILTER_TIME)
000090  7920              LDRB     r0,[r4,#4]
000092  2805              CMP      r0,#5
000094  dd02              BLE      |L12.156|
;;;459    		{
;;;460    			pBtn->Count = KEY_FILTER_TIME;
000096  2005              MOVS     r0,#5
000098  7120              STRB     r0,[r4,#4]
00009a  e010              B        |L12.190|
                  |L12.156|
;;;461    		}
;;;462    		else if(pBtn->Count != 0)
00009c  7920              LDRB     r0,[r4,#4]
00009e  b118              CBZ      r0,|L12.168|
;;;463    		{
;;;464    			pBtn->Count--;
0000a0  7920              LDRB     r0,[r4,#4]
0000a2  1e40              SUBS     r0,r0,#1
0000a4  7120              STRB     r0,[r4,#4]
0000a6  e00a              B        |L12.190|
                  |L12.168|
;;;465    		}
;;;466    		else
;;;467    		{
;;;468    			if (pBtn->State == 1)
0000a8  7aa0              LDRB     r0,[r4,#0xa]
0000aa  2801              CMP      r0,#1
0000ac  d107              BNE      |L12.190|
;;;469    			{
;;;470    				pBtn->State = 0;
0000ae  2000              MOVS     r0,#0
0000b0  72a0              STRB     r0,[r4,#0xa]
;;;471    
;;;472    				/* 发送按钮弹起的消息 */
;;;473    				bsp_PutKey((uint8_t)(3 * i + 2));
0000b2  eb050145          ADD      r1,r5,r5,LSL #1
0000b6  1c89              ADDS     r1,r1,#2
0000b8  b2c8              UXTB     r0,r1
0000ba  f7fffffe          BL       bsp_PutKey
                  |L12.190|
;;;474    			}
;;;475    		}
;;;476    
;;;477    		pBtn->LongCount = 0;
0000be  2000              MOVS     r0,#0
0000c0  80e0              STRH     r0,[r4,#6]
;;;478    		pBtn->RepeatCount = 0;
0000c2  7320              STRB     r0,[r4,#0xc]
                  |L12.196|
;;;479    	}
;;;480    }
0000c4  bd70              POP      {r4-r6,pc}
;;;481    
                          ENDP

0000c6  0000              DCW      0x0000
                  |L12.200|
                          DCD      s_tBtn

                          AREA ||i.bsp_GetKey||, CODE, READONLY, ALIGN=2

                  bsp_GetKey PROC
;;;193    */
;;;194    uint8_t bsp_GetKey(void)
000000  480b              LDR      r0,|L13.48|
;;;195    {
;;;196    	uint8_t ret;
;;;197    
;;;198    	if (s_tKey.Read == s_tKey.Write)
000002  7a80              LDRB     r0,[r0,#0xa]  ; s_tKey
000004  4a0a              LDR      r2,|L13.48|
000006  7ad2              LDRB     r2,[r2,#0xb]  ; s_tKey
000008  4290              CMP      r0,r2
00000a  d101              BNE      |L13.16|
;;;199    	{
;;;200    		return KEY_NONE;
00000c  2000              MOVS     r0,#0
                  |L13.14|
;;;201    	}
;;;202    	else
;;;203    	{
;;;204    		ret = s_tKey.Buf[s_tKey.Read];
;;;205    
;;;206    		if (++s_tKey.Read >= KEY_FIFO_SIZE)
;;;207    		{
;;;208    			s_tKey.Read = 0;
;;;209    		}
;;;210    		return ret;
;;;211    	}
;;;212    }
00000e  4770              BX       lr
                  |L13.16|
000010  4807              LDR      r0,|L13.48|
000012  7a80              LDRB     r0,[r0,#0xa]          ;204  ; s_tKey
000014  4a06              LDR      r2,|L13.48|
000016  5c11              LDRB     r1,[r2,r0]            ;204
000018  4610              MOV      r0,r2                 ;206
00001a  7a80              LDRB     r0,[r0,#0xa]          ;206  ; s_tKey
00001c  1c40              ADDS     r0,r0,#1              ;206
00001e  b2c0              UXTB     r0,r0                 ;206
000020  7290              STRB     r0,[r2,#0xa]          ;206
000022  280a              CMP      r0,#0xa               ;206
000024  db01              BLT      |L13.42|
000026  2000              MOVS     r0,#0                 ;208
000028  7290              STRB     r0,[r2,#0xa]          ;208
                  |L13.42|
00002a  4608              MOV      r0,r1                 ;210
00002c  e7ef              B        |L13.14|
;;;213    
                          ENDP

00002e  0000              DCW      0x0000
                  |L13.48|
                          DCD      s_tKey

                          AREA ||i.bsp_GetKey2||, CODE, READONLY, ALIGN=2

                  bsp_GetKey2 PROC
;;;221    */
;;;222    uint8_t bsp_GetKey2(void)
000000  480b              LDR      r0,|L14.48|
;;;223    {
;;;224    	uint8_t ret;
;;;225    
;;;226    	if (s_tKey.Read2 == s_tKey.Write)
000002  7b00              LDRB     r0,[r0,#0xc]  ; s_tKey
000004  4a0a              LDR      r2,|L14.48|
000006  7ad2              LDRB     r2,[r2,#0xb]  ; s_tKey
000008  4290              CMP      r0,r2
00000a  d101              BNE      |L14.16|
;;;227    	{
;;;228    		return KEY_NONE;
00000c  2000              MOVS     r0,#0
                  |L14.14|
;;;229    	}
;;;230    	else
;;;231    	{
;;;232    		ret = s_tKey.Buf[s_tKey.Read2];
;;;233    
;;;234    		if (++s_tKey.Read2 >= KEY_FIFO_SIZE)
;;;235    		{
;;;236    			s_tKey.Read2 = 0;
;;;237    		}
;;;238    		return ret;
;;;239    	}
;;;240    }
00000e  4770              BX       lr
                  |L14.16|
000010  4807              LDR      r0,|L14.48|
000012  7b00              LDRB     r0,[r0,#0xc]          ;232  ; s_tKey
000014  4a06              LDR      r2,|L14.48|
000016  5c11              LDRB     r1,[r2,r0]            ;232
000018  4610              MOV      r0,r2                 ;234
00001a  7b00              LDRB     r0,[r0,#0xc]          ;234  ; s_tKey
00001c  1c40              ADDS     r0,r0,#1              ;234
00001e  b2c0              UXTB     r0,r0                 ;234
000020  7310              STRB     r0,[r2,#0xc]          ;234
000022  280a              CMP      r0,#0xa               ;234
000024  db01              BLT      |L14.42|
000026  2000              MOVS     r0,#0                 ;236
000028  7310              STRB     r0,[r2,#0xc]          ;236
                  |L14.42|
00002a  4608              MOV      r0,r1                 ;238
00002c  e7ef              B        |L14.14|
;;;241    
                          ENDP

00002e  0000              DCW      0x0000
                  |L14.48|
                          DCD      s_tKey

                          AREA ||i.bsp_GetKeyState||, CODE, READONLY, ALIGN=2

                  bsp_GetKeyState PROC
;;;249    */
;;;250    uint8_t bsp_GetKeyState(KEY_ID_E _ucKeyID)
000000  4601              MOV      r1,r0
;;;251    {
;;;252    	return s_tBtn[_ucKeyID].State;
000002  4802              LDR      r0,|L15.12|
000004  eb001001          ADD      r0,r0,r1,LSL #4
000008  7a80              LDRB     r0,[r0,#0xa]
;;;253    }
00000a  4770              BX       lr
;;;254    
                          ENDP

                  |L15.12|
                          DCD      s_tBtn

                          AREA ||i.bsp_InitKey||, CODE, READONLY, ALIGN=1

                  bsp_InitKey PROC
;;;161    */
;;;162    void bsp_InitKey(void)
000000  b510              PUSH     {r4,lr}
;;;163    {
;;;164    	bsp_InitKeyVar();		/* 初始化按键变量 */
000002  f7fffffe          BL       bsp_InitKeyVar
;;;165    	bsp_InitKeyHard();		/* 初始化按键硬件 */
000006  f7fffffe          BL       bsp_InitKeyHard
;;;166    }
00000a  bd10              POP      {r4,pc}
;;;167    
                          ENDP


                          AREA ||i.bsp_InitKeyHard||, CODE, READONLY, ALIGN=2

                  bsp_InitKeyHard PROC
;;;293    */
;;;294    static void bsp_InitKeyHard(void)
000000  b508              PUSH     {r3,lr}
;;;295    {
;;;296    	GPIO_InitTypeDef GPIO_InitStructure;
;;;297    
;;;298    	/* 第1步：打开GPIO时钟 */
;;;299    	RCC_APB2PeriphClockCmd(RCC_ALL_KEY, ENABLE);
000002  2101              MOVS     r1,#1
000004  2008              MOVS     r0,#8
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;300    
;;;301    	/* 第2步：配置所有的按键GPIO为浮动输入模式(实际上CPU复位后就是输入状态) */
;;;302    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00000a  2003              MOVS     r0,#3
00000c  f88d0002          STRB     r0,[sp,#2]
;;;303    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;	/* 输入浮空模式 */
000010  2004              MOVS     r0,#4
000012  f88d0003          STRB     r0,[sp,#3]
;;;304    	
;;;305    	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_K1;
000016  02c0              LSLS     r0,r0,#11
000018  f8ad0000          STRH     r0,[sp,#0]
;;;306    	GPIO_Init(GPIO_PORT_K1, &GPIO_InitStructure);
00001c  4669              MOV      r1,sp
00001e  481e              LDR      r0,|L17.152|
000020  f7fffffe          BL       GPIO_Init
;;;307    
;;;308    	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_K2;
000024  f44f4080          MOV      r0,#0x4000
000028  f8ad0000          STRH     r0,[sp,#0]
;;;309    	GPIO_Init(GPIO_PORT_K2, &GPIO_InitStructure);
00002c  4669              MOV      r1,sp
00002e  481a              LDR      r0,|L17.152|
000030  f7fffffe          BL       GPIO_Init
;;;310    
;;;311    	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_K3;
000034  f44f5000          MOV      r0,#0x2000
000038  f8ad0000          STRH     r0,[sp,#0]
;;;312    	GPIO_Init(GPIO_PORT_K3, &GPIO_InitStructure);
00003c  4669              MOV      r1,sp
00003e  4816              LDR      r0,|L17.152|
000040  f7fffffe          BL       GPIO_Init
;;;313    
;;;314    	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_K4;
000044  f44f5000          MOV      r0,#0x2000
000048  f8ad0000          STRH     r0,[sp,#0]
;;;315    	GPIO_Init(GPIO_PORT_K4, &GPIO_InitStructure);
00004c  4669              MOV      r1,sp
00004e  4812              LDR      r0,|L17.152|
000050  f7fffffe          BL       GPIO_Init
;;;316    
;;;317    	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_K5;
000054  f44f5000          MOV      r0,#0x2000
000058  f8ad0000          STRH     r0,[sp,#0]
;;;318    	GPIO_Init(GPIO_PORT_K5, &GPIO_InitStructure);
00005c  4669              MOV      r1,sp
00005e  480e              LDR      r0,|L17.152|
000060  f7fffffe          BL       GPIO_Init
;;;319    
;;;320    	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_K6;
000064  f44f5000          MOV      r0,#0x2000
000068  f8ad0000          STRH     r0,[sp,#0]
;;;321    	GPIO_Init(GPIO_PORT_K6, &GPIO_InitStructure);
00006c  4669              MOV      r1,sp
00006e  480a              LDR      r0,|L17.152|
000070  f7fffffe          BL       GPIO_Init
;;;322    
;;;323    	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_K7;
000074  f44f5000          MOV      r0,#0x2000
000078  f8ad0000          STRH     r0,[sp,#0]
;;;324    	GPIO_Init(GPIO_PORT_K7, &GPIO_InitStructure);
00007c  4669              MOV      r1,sp
00007e  4806              LDR      r0,|L17.152|
000080  f7fffffe          BL       GPIO_Init
;;;325    
;;;326    	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_K8;
000084  f44f5000          MOV      r0,#0x2000
000088  f8ad0000          STRH     r0,[sp,#0]
;;;327    	GPIO_Init(GPIO_PORT_K8, &GPIO_InitStructure);
00008c  4669              MOV      r1,sp
00008e  4802              LDR      r0,|L17.152|
000090  f7fffffe          BL       GPIO_Init
;;;328    }
000094  bd08              POP      {r3,pc}
;;;329    
                          ENDP

000096  0000              DCW      0x0000
                  |L17.152|
                          DCD      0x40010c00

                          AREA ||i.bsp_InitKeyVar||, CODE, READONLY, ALIGN=2

                  bsp_InitKeyVar PROC
;;;337    */
;;;338    static void bsp_InitKeyVar(void)
000000  2100              MOVS     r1,#0
;;;339    {
;;;340    	uint8_t i;
;;;341    
;;;342    	/* 对按键FIFO读写指针清零 */
;;;343    	s_tKey.Read = 0;
000002  4a15              LDR      r2,|L18.88|
000004  7291              STRB     r1,[r2,#0xa]
;;;344    	s_tKey.Write = 0;
000006  72d1              STRB     r1,[r2,#0xb]
;;;345    	s_tKey.Read2 = 0;
000008  7311              STRB     r1,[r2,#0xc]
;;;346    
;;;347    	/* 给每个按键结构体成员变量赋一组缺省值 */
;;;348    	for (i = 0; i < KEY_COUNT; i++)
00000a  2000              MOVS     r0,#0
00000c  e018              B        |L18.64|
                  |L18.14|
;;;349    	{
;;;350    		s_tBtn[i].LongTime = KEY_LONG_TIME;			/* 长按时间 0 表示不检测长按键事件 */
00000e  2164              MOVS     r1,#0x64
000010  4a12              LDR      r2,|L18.92|
000012  eb021200          ADD      r2,r2,r0,LSL #4
000016  8111              STRH     r1,[r2,#8]
;;;351    		s_tBtn[i].Count = KEY_FILTER_TIME / 2;		/* 计数器设置为滤波时间的一半 */
000018  2102              MOVS     r1,#2
00001a  4a10              LDR      r2,|L18.92|
00001c  eb021200          ADD      r2,r2,r0,LSL #4
000020  7111              STRB     r1,[r2,#4]
;;;352    		s_tBtn[i].State = 0;							/* 按键缺省状态，0为未按下 */
000022  2100              MOVS     r1,#0
000024  4a0d              LDR      r2,|L18.92|
000026  eb021200          ADD      r2,r2,r0,LSL #4
00002a  7291              STRB     r1,[r2,#0xa]
;;;353    		//s_tBtn[i].KeyCodeDown = 3 * i + 1;				/* 按键按下的键值代码 */
;;;354    		//s_tBtn[i].KeyCodeUp   = 3 * i + 2;				/* 按键弹起的键值代码 */
;;;355    		//s_tBtn[i].KeyCodeLong = 3 * i + 3;				/* 按键被持续按下的键值代码 */
;;;356    		s_tBtn[i].RepeatSpeed = 0;						/* 按键连发的速度，0表示不支持连发 */
00002c  4a0b              LDR      r2,|L18.92|
00002e  eb021200          ADD      r2,r2,r0,LSL #4
000032  72d1              STRB     r1,[r2,#0xb]
;;;357    		s_tBtn[i].RepeatCount = 0;						/* 连发计数器 */
000034  4a09              LDR      r2,|L18.92|
000036  eb021200          ADD      r2,r2,r0,LSL #4
00003a  7311              STRB     r1,[r2,#0xc]
00003c  1c41              ADDS     r1,r0,#1              ;348
00003e  b2c8              UXTB     r0,r1                 ;348
                  |L18.64|
000040  2804              CMP      r0,#4                 ;348
000042  dbe4              BLT      |L18.14|
;;;358    	}
;;;359    
;;;360    	/* 如果需要单独更改某个按键的参数，可以在此单独重新赋值 */
;;;361    	/* 比如，我们希望按键1按下超过1秒后，自动重发相同键值 */
;;;362    //	s_tBtn[KID_JOY_U].LongTime = 100;
;;;363    //	s_tBtn[KID_JOY_U].RepeatSpeed = 5;	/* 每隔50ms自动发送键值 */
;;;364    
;;;365    //	s_tBtn[KID_JOY_D].LongTime = 100;
;;;366    //	s_tBtn[KID_JOY_D].RepeatSpeed = 5;	/* 每隔50ms自动发送键值 */
;;;367    
;;;368    //	s_tBtn[KID_JOY_L].LongTime = 100;
;;;369    //	s_tBtn[KID_JOY_L].RepeatSpeed = 5;	/* 每隔50ms自动发送键值 */
;;;370    
;;;371    //	s_tBtn[KID_JOY_R].LongTime = 100;
;;;372    //	s_tBtn[KID_JOY_R].RepeatSpeed = 5;	/* 每隔50ms自动发送键值 */
;;;373    
;;;374    	/* 判断按键按下的函数 */
;;;375    	s_tBtn[0].IsKeyDownFunc = IsKeyDown1;
000044  4906              LDR      r1,|L18.96|
000046  4a05              LDR      r2,|L18.92|
000048  6011              STR      r1,[r2,#0]  ; s_tBtn
;;;376    	s_tBtn[1].IsKeyDownFunc = IsKeyDown2;
00004a  4906              LDR      r1,|L18.100|
00004c  6111              STR      r1,[r2,#0x10]  ; s_tBtn
;;;377    	s_tBtn[2].IsKeyDownFunc = IsKeyDown3;
00004e  4906              LDR      r1,|L18.104|
000050  6211              STR      r1,[r2,#0x20]  ; s_tBtn
;;;378    	s_tBtn[3].IsKeyDownFunc = IsKeyDown4;
000052  4906              LDR      r1,|L18.108|
000054  6311              STR      r1,[r2,#0x30]  ; s_tBtn
;;;379    //	s_tBtn[4].IsKeyDownFunc = IsKeyDown5;
;;;380    //	s_tBtn[5].IsKeyDownFunc = IsKeyDown6;
;;;381    //	s_tBtn[6].IsKeyDownFunc = IsKeyDown7;
;;;382    //	s_tBtn[7].IsKeyDownFunc = IsKeyDown8;
;;;383    
;;;384    //	/* 组合键 */
;;;385    //	s_tBtn[8].IsKeyDownFunc = IsKeyDown9;
;;;386    //	s_tBtn[9].IsKeyDownFunc = IsKeyDown10;
;;;387    }
000056  4770              BX       lr
;;;388    
                          ENDP

                  |L18.88|
                          DCD      s_tKey
                  |L18.92|
                          DCD      s_tBtn
                  |L18.96|
                          DCD      IsKeyDown1
                  |L18.100|
                          DCD      IsKeyDown2
                  |L18.104|
                          DCD      IsKeyDown3
                  |L18.108|
                          DCD      IsKeyDown4

                          AREA ||i.bsp_KeyScan||, CODE, READONLY, ALIGN=1

                  bsp_KeyScan PROC
;;;489    */
;;;490    void bsp_KeyScan(void)
000000  b510              PUSH     {r4,lr}
;;;491    {
;;;492    	uint8_t i;
;;;493    
;;;494    	for (i = 0; i < KEY_COUNT; i++)
000002  2400              MOVS     r4,#0
000004  e004              B        |L19.16|
                  |L19.6|
;;;495    	{
;;;496    		bsp_DetectKey(i);
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       bsp_DetectKey
00000c  1c60              ADDS     r0,r4,#1              ;494
00000e  b2c4              UXTB     r4,r0                 ;494
                  |L19.16|
000010  2c04              CMP      r4,#4                 ;494
000012  dbf8              BLT      |L19.6|
;;;497    	}
;;;498    }
000014  bd10              POP      {r4,pc}
;;;499    
                          ENDP


                          AREA ||i.bsp_PutKey||, CODE, READONLY, ALIGN=2

                  bsp_PutKey PROC
;;;175    */
;;;176    void bsp_PutKey(uint8_t _KeyCode)
000000  4906              LDR      r1,|L20.28|
;;;177    {
;;;178    	s_tKey.Buf[s_tKey.Write] = _KeyCode;
000002  7ac9              LDRB     r1,[r1,#0xb]  ; s_tKey
000004  4a05              LDR      r2,|L20.28|
000006  5450              STRB     r0,[r2,r1]
;;;179    
;;;180    	if (++s_tKey.Write  >= KEY_FIFO_SIZE)
000008  4611              MOV      r1,r2
00000a  7ac9              LDRB     r1,[r1,#0xb]  ; s_tKey
00000c  1c49              ADDS     r1,r1,#1
00000e  b2c9              UXTB     r1,r1
000010  72d1              STRB     r1,[r2,#0xb]
000012  290a              CMP      r1,#0xa
000014  db01              BLT      |L20.26|
;;;181    	{
;;;182    		s_tKey.Write = 0;
000016  2100              MOVS     r1,#0
000018  72d1              STRB     r1,[r2,#0xb]
                  |L20.26|
;;;183    	}
;;;184    }
00001a  4770              BX       lr
;;;185    
                          ENDP

                  |L20.28|
                          DCD      s_tKey

                          AREA ||i.bsp_SetKeyParam||, CODE, READONLY, ALIGN=2

                  bsp_SetKeyParam PROC
;;;264    */
;;;265    void bsp_SetKeyParam(uint8_t _ucKeyID, uint16_t _LongTime, uint8_t  _RepeatSpeed)
000000  b510              PUSH     {r4,lr}
;;;266    {
;;;267    	s_tBtn[_ucKeyID].LongTime = _LongTime;			/* 长按时间 0 表示不检测长按键事件 */
000002  4b07              LDR      r3,|L21.32|
000004  eb031300          ADD      r3,r3,r0,LSL #4
000008  8119              STRH     r1,[r3,#8]
;;;268    	s_tBtn[_ucKeyID].RepeatSpeed = _RepeatSpeed;			/* 按键连发的速度，0表示不支持连发 */
00000a  4b05              LDR      r3,|L21.32|
00000c  eb031300          ADD      r3,r3,r0,LSL #4
000010  72da              STRB     r2,[r3,#0xb]
;;;269    	s_tBtn[_ucKeyID].RepeatCount = 0;						/* 连发计数器 */
000012  2300              MOVS     r3,#0
000014  4c02              LDR      r4,|L21.32|
000016  eb041400          ADD      r4,r4,r0,LSL #4
00001a  7323              STRB     r3,[r4,#0xc]
;;;270    }
00001c  bd10              POP      {r4,pc}
;;;271    
                          ENDP

00001e  0000              DCW      0x0000
                  |L21.32|
                          DCD      s_tBtn

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  s_tBtn
                          %        64
                  s_tKey
                          %        13

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp\\src\\bsp_key.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_bsp_key_c_dc6aca1d____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_bsp_key_c_dc6aca1d____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_bsp_key_c_dc6aca1d____REVSH|
#line 128
|__asm___9_bsp_key_c_dc6aca1d____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
