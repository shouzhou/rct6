; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\main.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\main.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Include -I..\..\User -I..\..\User\bsp\inc -I..\..\User\bsp -I..\..\User\app\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -D__MICROLIB -D__UVISION_VERSION=527 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\main.crf ..\..\User\app\src\main.c]
                          THUMB

                          AREA ||i.DispMenu||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  DispMenu PROC
;;;201    */
;;;202    static void DispMenu(void)
000000  b510              PUSH     {r4,lr}
;;;203    {	
;;;204    	uint8_t i;
;;;205    	
;;;206    	printf("\n\r");
000002  a01a              ADR      r0,|L1.108|
000004  f7fffffe          BL       __2printf
;;;207    	//printf("\33[K");						/* 清除从光标到行尾的内容 */ 
;;;208    	
;;;209    	printf(" 发送的命令 : 0x");				/* 打印发送命令 */
000008  a019              ADR      r0,|L1.112|
00000a  f7fffffe          BL       __2printf
;;;210    	for (i = 0; i < g_tPrint.Txlen; i++)
00000e  2400              MOVS     r4,#0
000010  e006              B        |L1.32|
                  |L1.18|
;;;211    	{
;;;212    		printf(" %02X", g_tPrint.TxBuf[i]);
000012  481c              LDR      r0,|L1.132|
000014  5d01              LDRB     r1,[r0,r4]
000016  a01c              ADR      r0,|L1.136|
000018  f7fffffe          BL       __2printf
00001c  1c60              ADDS     r0,r4,#1              ;210
00001e  b2c4              UXTB     r4,r0                 ;210
                  |L1.32|
000020  4818              LDR      r0,|L1.132|
000022  3816              SUBS     r0,r0,#0x16           ;210
000024  7d40              LDRB     r0,[r0,#0x15]         ;210  ; g_tPrint
000026  42a0              CMP      r0,r4                 ;210
000028  dcf3              BGT      |L1.18|
;;;213    	}
;;;214        g_tPrint.Txlen =0;
00002a  2000              MOVS     r0,#0
00002c  4915              LDR      r1,|L1.132|
00002e  3916              SUBS     r1,r1,#0x16
000030  7548              STRB     r0,[r1,#0x15]
;;;215    	printf("\n\r");
000032  a00e              ADR      r0,|L1.108|
000034  f7fffffe          BL       __2printf
;;;216    	//printf("\33[K");						/* 清除从光标到行尾的内容 */ 
;;;217    	
;;;218    	printf(" 接收的命令 : 0x");				/* 打印接收命令 */
000038  a015              ADR      r0,|L1.144|
00003a  f7fffffe          BL       __2printf
;;;219    	for (i = 0; i < g_tPrint.Rxlen; i++)
00003e  2400              MOVS     r4,#0
000040  e007              B        |L1.82|
                  |L1.66|
;;;220    	{
;;;221    		printf(" %02X", g_tPrint.RxBuf[i]);
000042  4810              LDR      r0,|L1.132|
000044  3815              SUBS     r0,r0,#0x15
000046  5d01              LDRB     r1,[r0,r4]
000048  a00f              ADR      r0,|L1.136|
00004a  f7fffffe          BL       __2printf
00004e  1c60              ADDS     r0,r4,#1              ;219
000050  b2c4              UXTB     r4,r0                 ;219
                  |L1.82|
000052  480c              LDR      r0,|L1.132|
000054  3816              SUBS     r0,r0,#0x16           ;219
000056  7800              LDRB     r0,[r0,#0]            ;219  ; g_tPrint
000058  42a0              CMP      r0,r4                 ;219
00005a  dcf2              BGT      |L1.66|
;;;222    	}
;;;223    	g_tPrint.Rxlen =0;
00005c  2000              MOVS     r0,#0
00005e  4909              LDR      r1,|L1.132|
000060  3916              SUBS     r1,r1,#0x16
000062  7008              STRB     r0,[r1,#0]
;;;224    	printf("\n\r");
000064  a001              ADR      r0,|L1.108|
000066  f7fffffe          BL       __2printf
;;;225    	//printf("\33[3A");						/* 光标上移3行 */
;;;226    }
00006a  bd10              POP      {r4,pc}
;;;227    
                          ENDP

                  |L1.108|
00006c  0a0d00            DCB      "\n\r",0
00006f  00                DCB      0
                  |L1.112|
000070  20b7a2cb          DCB      " ",183,162,203,205,181,196,195,252,193,238," : 0x",0
000074  cdb5c4c3
000078  fcc1ee20
00007c  3a203078
000080  00      
000081  00                DCB      0
000082  00                DCB      0
000083  00                DCB      0
                  |L1.132|
                          DCD      g_tPrint+0x16
                  |L1.136|
000088  20253032          DCB      " %02X",0
00008c  5800    
00008e  00                DCB      0
00008f  00                DCB      0
                  |L1.144|
000090  20bdd3ca          DCB      " ",189,211,202,213,181,196,195,252,193,238," : 0x",0
000094  d5b5c4c3
000098  fcc1ee20
00009c  3a203078
0000a0  00      
0000a1  00                DCB      0
0000a2  00                DCB      0
0000a3  00                DCB      0

                          AREA ||i.PrintfLogo||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  PrintfLogo PROC
;;;174    */
;;;175    static void PrintfLogo(void)
000000  b510              PUSH     {r4,lr}
;;;176    {
;;;177    	printf("\n\r");
000002  a017              ADR      r0,|L2.96|
000004  f7fffffe          BL       __2printf
;;;178    	printf("*************************************************************\n\r");
000008  a016              ADR      r0,|L2.100|
00000a  f7fffffe          BL       __2printf
;;;179    	printf("* 例程名称   : %s\r\n", EXAMPLE_NAME);	/* 打印例程名称 */
00000e  a125              ADR      r1,|L2.164|
000010  a02a              ADR      r0,|L2.188|
000012  f7fffffe          BL       __2printf
;;;180    	printf("* 例程版本   : %s\r\n", DEMO_VER);		/* 打印例程版本 */
000016  a12e              ADR      r1,|L2.208|
000018  a02e              ADR      r0,|L2.212|
00001a  f7fffffe          BL       __2printf
;;;181    	printf("* 发布日期   : %s\r\n", EXAMPLE_DATE);	/* 打印例程日期 */
00001e  a132              ADR      r1,|L2.232|
000020  a034              ADR      r0,|L2.244|
000022  f7fffffe          BL       __2printf
;;;182    
;;;183    	/* 打印ST固件库版本，这3个定义宏在stm32f10x.h文件中 */
;;;184    	printf("* 固件库版本 : V%d.%d.%d (STM32F10x_StdPeriph_Driver)\r\n", __STM32F10X_STDPERIPH_VERSION_MAIN,
000026  2301              MOVS     r3,#1
000028  2206              MOVS     r2,#6
00002a  2103              MOVS     r1,#3
00002c  a036              ADR      r0,|L2.264|
00002e  f7fffffe          BL       __2printf
;;;185    			__STM32F10X_STDPERIPH_VERSION_SUB1,__STM32F10X_STDPERIPH_VERSION_SUB2);
;;;186    	printf("* \n\r");	/* 打印一行空格 */
000032  a043              ADR      r0,|L2.320|
000034  f7fffffe          BL       __2printf
;;;187    	printf("* QQ    : 1295744630 \r\n");
000038  a043              ADR      r0,|L2.328|
00003a  f7fffffe          BL       __2printf
;;;188    	printf("* 旺旺  : armfly\r\n");
00003e  a048              ADR      r0,|L2.352|
000040  f7fffffe          BL       __2printf
;;;189    	printf("* Email : armfly@qq.com \r\n");
000044  a04b              ADR      r0,|L2.372|
000046  f7fffffe          BL       __2printf
;;;190    	printf("* 淘宝店: armfly.taobao.com\r\n");
00004a  a051              ADR      r0,|L2.400|
00004c  f7fffffe          BL       __2printf
;;;191    	printf("* Copyright www.armfly.com 安富莱电子\r\n");
000050  a057              ADR      r0,|L2.432|
000052  f7fffffe          BL       __2printf
;;;192    	printf("*************************************************************\n\r");
000056  a003              ADR      r0,|L2.100|
000058  f7fffffe          BL       __2printf
;;;193    }
00005c  bd10              POP      {r4,pc}
;;;194    /*
                          ENDP

00005e  0000              DCW      0x0000
                  |L2.96|
000060  0a0d00            DCB      "\n\r",0
000063  00                DCB      0
                  |L2.100|
000064  2a2a2a2a          DCB      "*******************************************************"
000068  2a2a2a2a
00006c  2a2a2a2a
000070  2a2a2a2a
000074  2a2a2a2a
000078  2a2a2a2a
00007c  2a2a2a2a
000080  2a2a2a2a
000084  2a2a2a2a
000088  2a2a2a2a
00008c  2a2a2a2a
000090  2a2a2a2a
000094  2a2a2a2a
000098  2a2a2a  
00009b  2a2a2a2a          DCB      "******\n\r",0
00009f  2a2a0a0d
0000a3  00      
                  |L2.164|
0000a4  56342d52          DCB      "V4-RS485 MODBUS",214,247,213,190,192,253,179,204,0
0000a8  53343835
0000ac  204d4f44
0000b0  425553d6
0000b4  f7d5bec0
0000b8  fdb3cc00
                  |L2.188|
0000bc  2a20c0fd          DCB      "* ",192,253,179,204,195,251,179,198,"   : %s\r\n",0
0000c0  b3ccc3fb
0000c4  b3c62020
0000c8  203a2025
0000cc  730d0a00
                  |L2.208|
0000d0  312e3000          DCB      "1.0",0
                  |L2.212|
0000d4  2a20c0fd          DCB      "* ",192,253,179,204,176,230,177,190,"   : %s\r\n",0
0000d8  b3ccb0e6
0000dc  b1be2020
0000e0  203a2025
0000e4  730d0a00
                  |L2.232|
0000e8  32303136          DCB      "2016-01-11",0
0000ec  2d30312d
0000f0  313100  
0000f3  00                DCB      0
                  |L2.244|
0000f4  2a20b7a2          DCB      "* ",183,162,178,188,200,213,198,218,"   : %s\r\n",0
0000f8  b2bcc8d5
0000fc  c6da2020
000100  203a2025
000104  730d0a00
                  |L2.264|
000108  2a20b9cc          DCB      "* ",185,204,188,254,191,226,176,230,177,190," : V%d.%d."
00010c  bcfebfe2
000110  b0e6b1be
000114  203a2056
000118  25642e25
00011c  642e    
00011e  25642028          DCB      "%d (STM32F10x_StdPeriph_Driver)\r\n",0
000122  53544d33
000126  32463130
00012a  785f5374
00012e  64506572
000132  6970685f
000136  44726976
00013a  6572290d
00013e  0a00    
                  |L2.320|
000140  2a200a0d          DCB      "* \n\r",0
000144  00      
000145  00                DCB      0
000146  00                DCB      0
000147  00                DCB      0
                  |L2.328|
000148  2a205151          DCB      "* QQ    : 1295744630 \r\n",0
00014c  20202020
000150  3a203132
000154  39353734
000158  34363330
00015c  200d0a00
                  |L2.352|
000160  2a20cdfa          DCB      "* ",205,250,205,250,"  : armfly\r\n",0
000164  cdfa2020
000168  3a206172
00016c  6d666c79
000170  0d0a00  
000173  00                DCB      0
                  |L2.372|
000174  2a20456d          DCB      "* Email : armfly@qq.com \r\n",0
000178  61696c20
00017c  3a206172
000180  6d666c79
000184  4071712e
000188  636f6d20
00018c  0d0a00  
00018f  00                DCB      0
                  |L2.400|
000190  2a20ccd4          DCB      "* ",204,212,177,166,181,234,": armfly.taobao.com\r\n",0
000194  b1a6b5ea
000198  3a206172
00019c  6d666c79
0001a0  2e74616f
0001a4  62616f2e
0001a8  636f6d0d
0001ac  0a00    
0001ae  00                DCB      0
0001af  00                DCB      0
                  |L2.432|
0001b0  2a20436f          DCB      "* Copyright www.armfly.com ",176,178,184,187,192,179,181
0001b4  70797269
0001b8  67687420
0001bc  7777772e
0001c0  61726d66
0001c4  6c792e63
0001c8  6f6d20b0
0001cc  b2b8bbc0
0001d0  b3b5    
0001d2  e7d7d30d          DCB      231,215,211,"\r\n",0
0001d6  0a00    

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;54     */
;;;55     int main(void)
000000  b086              SUB      sp,sp,#0x18
;;;56     {
;;;57     	uint8_t testvalue =0x01;
000002  2401              MOVS     r4,#1
;;;58         uint8_t ucKeyCode;				/* 按键代码 */
;;;59     	MSG_T ucMsg;					/* 消息代码 */
;;;60     
;;;61     	bsp_Init();						/* 硬件初始化 */
000004  f7fffffe          BL       bsp_Init
;;;62     	PrintfLogo();					/* 打印例程信息到串口1 */
000008  f7fffffe          BL       PrintfLogo
;;;63     	DispMenu();						/* 打印寄存器的值 */
00000c  f7fffffe          BL       DispMenu
;;;64     	
;;;65     	/* 进入主程序循环体 */
;;;66     	while (1)
000010  e051              B        |L3.182|
                  |L3.18|
;;;67     	{
;;;68     		bsp_Idle();					/* 这个函数在bsp.c文件。用户可以修改这个函数实现CPU休眠和喂狗 */
000012  f7fffffe          BL       bsp_Idle
;;;69     		
;;;70     		if (bsp_GetMsg(&ucMsg))		/* 读取消息代码 */
000016  a804              ADD      r0,sp,#0x10
000018  f7fffffe          BL       bsp_GetMsg
00001c  b140              CBZ      r0,|L3.48|
;;;71     		{
;;;72     			switch (ucMsg.MsgCode)
00001e  f8bd0010          LDRH     r0,[sp,#0x10]
000022  2808              CMP      r0,#8
000024  d102              BNE      |L3.44|
;;;73     			{
;;;74     				case MSG_MODS:		
;;;75     					DispMenu();		/* 打印实验结果 */
000026  f7fffffe          BL       DispMenu
;;;76     					break;
00002a  e000              B        |L3.46|
                  |L3.44|
;;;77     				
;;;78     				default:
;;;79     					break;
00002c  bf00              NOP      
                  |L3.46|
00002e  bf00              NOP                            ;76
                  |L3.48|
;;;80     			}
;;;81     		}
;;;82     	
;;;83     		/* 按键滤波和检测由后台systick中断服务程序实现，我们只需要调用bsp_GetKey读取键值即可。 */
;;;84     		ucKeyCode = bsp_GetKey();	/* 读取键值, 无键按下时返回 KEY_NONE = 0 */
000030  f7fffffe          BL       bsp_GetKey
000034  4605              MOV      r5,r0
;;;85     		if (ucKeyCode != KEY_NONE)
000036  2d00              CMP      r5,#0
000038  d03d              BEQ      |L3.182|
;;;86     		{
;;;87                 testvalue= testvalue + 0x01;
00003a  1c60              ADDS     r0,r4,#1
00003c  b2c4              UXTB     r4,r0
;;;88     			bsp_PutMsg(MSG_MODS, 0);
00003e  2100              MOVS     r1,#0
000040  2008              MOVS     r0,#8
000042  f7fffffe          BL       bsp_PutMsg
;;;89     			
;;;90     			switch (ucKeyCode)
000046  2d01              CMP      r5,#1
000048  d002              BEQ      |L3.80|
00004a  2d04              CMP      r5,#4
00004c  d131              BNE      |L3.178|
00004e  e028              B        |L3.162|
                  |L3.80|
;;;91     			{			
;;;92     				case KEY_DOWN_K1:				/* K1键按下 */
;;;93     					//if (MODH_ReadParam_01H(REG_D01, 4) == 1) ;else ;
;;;94                         {
;;;95     						uint8_t buf[16];
;;;96     						
;;;97     						buf[0] = testvalue;
000050  f88d4000          STRB     r4,[sp,#0]
;;;98     						buf[1] = testvalue;
000054  f88d4001          STRB     r4,[sp,#1]
;;;99     						buf[2] = testvalue;
000058  f88d4002          STRB     r4,[sp,#2]
;;;100    						buf[3] = testvalue;
00005c  f88d4003          STRB     r4,[sp,#3]
;;;101                            buf[4] = testvalue;
000060  f88d4004          STRB     r4,[sp,#4]
;;;102    						buf[5] = testvalue;
000064  f88d4005          STRB     r4,[sp,#5]
;;;103    						buf[6] = testvalue;
000068  f88d4006          STRB     r4,[sp,#6]
;;;104    						buf[7] = testvalue;
00006c  f88d4007          STRB     r4,[sp,#7]
;;;105                            buf[8] = testvalue;
000070  f88d4008          STRB     r4,[sp,#8]
;;;106    						buf[9] = testvalue;
000074  f88d4009          STRB     r4,[sp,#9]
;;;107    						buf[10] = testvalue;
000078  f88d400a          STRB     r4,[sp,#0xa]
;;;108    						buf[11] = testvalue;
00007c  f88d400b          STRB     r4,[sp,#0xb]
;;;109                            buf[12] = testvalue;
000080  f88d400c          STRB     r4,[sp,#0xc]
;;;110    						buf[13] = testvalue;
000084  f88d400d          STRB     r4,[sp,#0xd]
;;;111    						buf[14] = testvalue;
000088  f88d400e          STRB     r4,[sp,#0xe]
;;;112    						buf[15] = testvalue;
00008c  f88d400f          STRB     r4,[sp,#0xf]
;;;113    						if (MODH_WriteParam_10H(REG_P01, 8, buf) == 1) ;else ;
000090  466a              MOV      r2,sp
000092  2108              MOVS     r1,#8
000094  2000              MOVS     r0,#0
000096  f7fffffe          BL       MODH_WriteParam_10H
;;;114    					}
;;;115                        printf("k1 pressed \r\n");
00009a  a007              ADR      r0,|L3.184|
00009c  f7fffffe          BL       __2printf
;;;116    					break;
0000a0  e008              B        |L3.180|
                  |L3.162|
;;;117    				
;;;118    				case KEY_DOWN_K2:				/* K2键按下 */
;;;119    					if (MODH_ReadParam_03H(REG_P01, 8) == 1) ;else ;
0000a2  2108              MOVS     r1,#8
0000a4  2000              MOVS     r0,#0
0000a6  f7fffffe          BL       MODH_ReadParam_03H
;;;120                        printf("k2 pressed \r\n");
0000aa  a007              ADR      r0,|L3.200|
0000ac  f7fffffe          BL       __2printf
;;;121    					break;
0000b0  e000              B        |L3.180|
                  |L3.178|
;;;122    				
;;;123    //				case KEY_DOWN_K3:				/* K3键按下 */
;;;124    //					{
;;;125    //						uint8_t buf[4];
;;;126    //						
;;;127    //						buf[0] = 0x01;
;;;128    //						buf[1] = 0x02;
;;;129    //						buf[2] = 0x03;
;;;130    //						buf[3] = 0x04;
;;;131    //						if (MODH_WriteParam_10H(REG_P01, 2, buf) == 1) ;else ;
;;;132    //					}
;;;133    //					break;
;;;134    //				
;;;135    //				case JOY_DOWN_U:				/* 摇杆UP键弹起 */
;;;136    //					if (MODH_WriteParam_06H(REG_P01, 1) == 1) ;else ;
;;;137    //					break;
;;;138    //				
;;;139    //				case JOY_DOWN_D:				/* 摇杆DOWN键按下 */
;;;140    //					if (MODH_WriteParam_06H(REG_P01, 0) == 1) ;else ;
;;;141    //					break;
;;;142    //				
;;;143    //				case JOY_DOWN_L:				/* 摇杆LEFT键弹起 */
;;;144    //					if (MODH_WriteParam_05H(REG_D01, 1) == 1) ;else ;
;;;145    //					break;
;;;146    //				
;;;147    //				case JOY_DOWN_R:				/* 摇杆RIGHT键弹起 */
;;;148    //					if (MODH_WriteParam_05H(REG_D01, 0) == 1) ;else ;
;;;149    //					break;
;;;150    //				
;;;151    //				case JOY_DOWN_OK:				/* 摇杆OK键按下 */
;;;152    //					if (MODH_ReadParam_02H(REG_T01, 3) == 1) ;else ;
;;;153    //					break;
;;;154    
;;;155    //				case JOY_UP_OK:					/* 摇杆OK键弹起 */
;;;156    //					if (MODH_ReadParam_04H(REG_A01, 1) == 1) ;else ;	
;;;157    //					break;
;;;158    				
;;;159    				default:
;;;160    					/* 其它的键值不处理 */
;;;161    					break;
0000b2  bf00              NOP      
                  |L3.180|
0000b4  bf00              NOP                            ;116
                  |L3.182|
0000b6  e7ac              B        |L3.18|
;;;162    			}
;;;163    		}
;;;164    	}
;;;165    }
;;;166    
                          ENDP

                  |L3.184|
0000b8  6b312070          DCB      "k1 pressed \r\n",0
0000bc  72657373
0000c0  6564200d
0000c4  0a00    
0000c6  00                DCB      0
0000c7  00                DCB      0
                  |L3.200|
0000c8  6b322070          DCB      "k2 pressed \r\n",0
0000cc  72657373
0000d0  6564200d
0000d4  0a00    
0000d6  00                DCB      0
0000d7  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  g_tPrint
                          %        42

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\app\\src\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_main____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_main_c_main____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_main____REVSH|
#line 128
|__asm___6_main_c_main____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
