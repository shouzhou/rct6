; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_timer.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_timer.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Include -I..\..\User -I..\..\User\bsp\inc -I..\..\User\bsp -I..\..\User\app\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -D__MICROLIB -D__UVISION_VERSION=527 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\bsp_timer.crf ..\..\User\bsp\src\bsp_timer.c]
                          THUMB

                          AREA ||i.SysTick_Handler||, CODE, READONLY, ALIGN=1

                  SysTick_Handler PROC
;;;454    */
;;;455    void SysTick_Handler(void)
000000  b510              PUSH     {r4,lr}
;;;456    {
;;;457    	SysTick_ISR();
000002  f7fffffe          BL       SysTick_ISR
;;;458    }
000006  bd10              POP      {r4,pc}
;;;459    
                          ENDP


                          AREA ||i.SysTick_ISR||, CODE, READONLY, ALIGN=2

                  SysTick_ISR PROC
;;;132    extern void bsp_RunPer10ms(void);
;;;133    void SysTick_ISR(void)
000000  b510              PUSH     {r4,lr}
;;;134    {
;;;135    	static uint8_t s_count = 0;
;;;136    	uint8_t i;
;;;137    
;;;138    	/* 每隔1ms进来1次 （仅用于 bsp_DelayMS） */
;;;139    	if (s_uiDelayCount > 0)
000002  481b              LDR      r0,|L2.112|
000004  6800              LDR      r0,[r0,#0]  ; s_uiDelayCount
000006  b140              CBZ      r0,|L2.26|
;;;140    	{
;;;141    		if (--s_uiDelayCount == 0)
000008  4819              LDR      r0,|L2.112|
00000a  6800              LDR      r0,[r0,#0]  ; s_uiDelayCount
00000c  1e40              SUBS     r0,r0,#1
00000e  4918              LDR      r1,|L2.112|
000010  6008              STR      r0,[r1,#0]  ; s_uiDelayCount
000012  b910              CBNZ     r0,|L2.26|
;;;142    		{
;;;143    			s_ucTimeOutFlag = 1;
000014  2001              MOVS     r0,#1
000016  4917              LDR      r1,|L2.116|
000018  7008              STRB     r0,[r1,#0]
                  |L2.26|
;;;144    		}
;;;145    	}
;;;146    
;;;147    	/* 每隔1ms，对软件定时器的计数器进行减一操作 */
;;;148    	for (i = 0; i < TMR_COUNT; i++)
00001a  2400              MOVS     r4,#0
00001c  e008              B        |L2.48|
                  |L2.30|
;;;149    	{
;;;150    		bsp_SoftTimerDec(&s_tTmr[i]);
00001e  eb040144          ADD      r1,r4,r4,LSL #1
000022  4a15              LDR      r2,|L2.120|
000024  eb020081          ADD      r0,r2,r1,LSL #2
000028  f7fffffe          BL       bsp_SoftTimerDec
00002c  1c60              ADDS     r0,r4,#1              ;148
00002e  b2c4              UXTB     r4,r0                 ;148
                  |L2.48|
000030  2c04              CMP      r4,#4                 ;148
000032  dbf4              BLT      |L2.30|
;;;151    	}
;;;152    
;;;153    	/* 全局运行时间每1ms增1 */
;;;154    	g_iRunTime++;
000034  4811              LDR      r0,|L2.124|
000036  6800              LDR      r0,[r0,#0]  ; g_iRunTime
000038  1c40              ADDS     r0,r0,#1
00003a  4910              LDR      r1,|L2.124|
00003c  6008              STR      r0,[r1,#0]  ; g_iRunTime
;;;155    	if (g_iRunTime == 0x7FFFFFFF)	/* 这个变量是 int32_t 类型，最大数为 0x7FFFFFFF */
00003e  4608              MOV      r0,r1
000040  6800              LDR      r0,[r0,#0]  ; g_iRunTime
000042  f06f4100          MVN      r1,#0x80000000
000046  4288              CMP      r0,r1
000048  d102              BNE      |L2.80|
;;;156    	{
;;;157    		g_iRunTime = 0;
00004a  2000              MOVS     r0,#0
00004c  490b              LDR      r1,|L2.124|
00004e  6008              STR      r0,[r1,#0]  ; g_iRunTime
                  |L2.80|
;;;158    	}
;;;159    
;;;160    	bsp_RunPer1ms();		/* 每隔1ms调用一次此函数，此函数在 bsp.c */
000050  f7fffffe          BL       bsp_RunPer1ms
;;;161    
;;;162    	if (++s_count >= 10)
000054  480a              LDR      r0,|L2.128|
000056  7800              LDRB     r0,[r0,#0]  ; s_count
000058  1c40              ADDS     r0,r0,#1
00005a  b2c0              UXTB     r0,r0
00005c  4908              LDR      r1,|L2.128|
00005e  7008              STRB     r0,[r1,#0]
000060  280a              CMP      r0,#0xa
000062  db03              BLT      |L2.108|
;;;163    	{
;;;164    		s_count = 0;
000064  2000              MOVS     r0,#0
000066  7008              STRB     r0,[r1,#0]
;;;165    
;;;166    		bsp_RunPer10ms();	/* 每隔10ms调用一次此函数，此函数在 bsp.c */
000068  f7fffffe          BL       bsp_RunPer10ms
                  |L2.108|
;;;167    	}
;;;168    }
00006c  bd10              POP      {r4,pc}
;;;169    
                          ENDP

00006e  0000              DCW      0x0000
                  |L2.112|
                          DCD      s_uiDelayCount
                  |L2.116|
                          DCD      s_ucTimeOutFlag
                  |L2.120|
                          DCD      s_tTmr
                  |L2.124|
                          DCD      g_iRunTime
                  |L2.128|
                          DCD      s_count

                          AREA ||i.TIM2_IRQHandler||, CODE, READONLY, ALIGN=2

                  TIM2_IRQHandler PROC
;;;612    #ifdef USE_TIM2
;;;613    void TIM2_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;614    #endif
;;;615    
;;;616    #ifdef USE_TIM3
;;;617    void TIM3_IRQHandler(void)
;;;618    #endif
;;;619    
;;;620    #ifdef USE_TIM4
;;;621    void TIM4_IRQHandler(void)
;;;622    #endif
;;;623    
;;;624    #ifdef USE_TIM5
;;;625    void TIM5_IRQHandler(void)
;;;626    #endif
;;;627    {
;;;628        if (TIM_GetITStatus(TIM_HARD, TIM_IT_CC1))
000002  2102              MOVS     r1,#2
000004  0748              LSLS     r0,r1,#29
000006  f7fffffe          BL       TIM_GetITStatus
00000a  b158              CBZ      r0,|L3.36|
;;;629        {
;;;630            TIM_ClearITPendingBit(TIM_HARD, TIM_IT_CC1);
00000c  2102              MOVS     r1,#2
00000e  0748              LSLS     r0,r1,#29
000010  f7fffffe          BL       TIM_ClearITPendingBit
;;;631            TIM_ITConfig(TIM_HARD, TIM_IT_CC1, DISABLE);	/* 禁能CC1中断 */
000014  2200              MOVS     r2,#0
000016  2102              MOVS     r1,#2
000018  0748              LSLS     r0,r1,#29
00001a  f7fffffe          BL       TIM_ITConfig
;;;632    
;;;633            /* 先关闭中断，再执行回调函数。因为回调函数可能需要重启定时器 */
;;;634            s_TIM_CallBack1();
00001e  481b              LDR      r0,|L3.140|
000020  6800              LDR      r0,[r0,#0]  ; s_TIM_CallBack1
000022  4780              BLX      r0
                  |L3.36|
;;;635        }
;;;636    
;;;637        if (TIM_GetITStatus(TIM_HARD, TIM_IT_CC2))
000024  2104              MOVS     r1,#4
000026  0708              LSLS     r0,r1,#28
000028  f7fffffe          BL       TIM_GetITStatus
00002c  b158              CBZ      r0,|L3.70|
;;;638        {
;;;639            TIM_ClearITPendingBit(TIM_HARD, TIM_IT_CC2);
00002e  2104              MOVS     r1,#4
000030  0708              LSLS     r0,r1,#28
000032  f7fffffe          BL       TIM_ClearITPendingBit
;;;640            TIM_ITConfig(TIM_HARD, TIM_IT_CC2, DISABLE);	/* 禁能CC2中断 */
000036  2200              MOVS     r2,#0
000038  2104              MOVS     r1,#4
00003a  0708              LSLS     r0,r1,#28
00003c  f7fffffe          BL       TIM_ITConfig
;;;641    
;;;642            /* 先关闭中断，再执行回调函数。因为回调函数可能需要重启定时器 */
;;;643            s_TIM_CallBack2();
000040  4813              LDR      r0,|L3.144|
000042  6800              LDR      r0,[r0,#0]  ; s_TIM_CallBack2
000044  4780              BLX      r0
                  |L3.70|
;;;644        }
;;;645    
;;;646        if (TIM_GetITStatus(TIM_HARD, TIM_IT_CC3))
000046  2108              MOVS     r1,#8
000048  06c8              LSLS     r0,r1,#27
00004a  f7fffffe          BL       TIM_GetITStatus
00004e  b158              CBZ      r0,|L3.104|
;;;647        {
;;;648            TIM_ClearITPendingBit(TIM_HARD, TIM_IT_CC3);
000050  2108              MOVS     r1,#8
000052  06c8              LSLS     r0,r1,#27
000054  f7fffffe          BL       TIM_ClearITPendingBit
;;;649            TIM_ITConfig(TIM_HARD, TIM_IT_CC3, DISABLE);	/* 禁能CC3中断 */
000058  2200              MOVS     r2,#0
00005a  2108              MOVS     r1,#8
00005c  06c8              LSLS     r0,r1,#27
00005e  f7fffffe          BL       TIM_ITConfig
;;;650    
;;;651            /* 先关闭中断，再执行回调函数。因为回调函数可能需要重启定时器 */
;;;652            s_TIM_CallBack3();
000062  480c              LDR      r0,|L3.148|
000064  6800              LDR      r0,[r0,#0]  ; s_TIM_CallBack3
000066  4780              BLX      r0
                  |L3.104|
;;;653        }
;;;654    
;;;655        if (TIM_GetITStatus(TIM_HARD, TIM_IT_CC4))
000068  2110              MOVS     r1,#0x10
00006a  0688              LSLS     r0,r1,#26
00006c  f7fffffe          BL       TIM_GetITStatus
000070  b158              CBZ      r0,|L3.138|
;;;656        {
;;;657            TIM_ClearITPendingBit(TIM_HARD, TIM_IT_CC4);
000072  2110              MOVS     r1,#0x10
000074  0688              LSLS     r0,r1,#26
000076  f7fffffe          BL       TIM_ClearITPendingBit
;;;658            TIM_ITConfig(TIM_HARD, TIM_IT_CC4, DISABLE);	/* 禁能CC4中断 */
00007a  2200              MOVS     r2,#0
00007c  2110              MOVS     r1,#0x10
00007e  0688              LSLS     r0,r1,#26
000080  f7fffffe          BL       TIM_ITConfig
;;;659    
;;;660            /* 先关闭中断，再执行回调函数。因为回调函数可能需要重启定时器 */
;;;661            s_TIM_CallBack4();
000084  4804              LDR      r0,|L3.152|
000086  6800              LDR      r0,[r0,#0]  ; s_TIM_CallBack4
000088  4780              BLX      r0
                  |L3.138|
;;;662        }
;;;663    }
00008a  bd10              POP      {r4,pc}
;;;664    
                          ENDP

                  |L3.140|
                          DCD      s_TIM_CallBack1
                  |L3.144|
                          DCD      s_TIM_CallBack2
                  |L3.148|
                          DCD      s_TIM_CallBack3
                  |L3.152|
                          DCD      s_TIM_CallBack4

                          AREA ||i.__set_PRIMASK||, CODE, READONLY, ALIGN=1

                  __set_PRIMASK PROC
;;;179     */
;;;180    __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
000000  f3808810          MSR      PRIMASK,r0
;;;181    {
;;;182      register uint32_t __regPriMask         __ASM("primask");
;;;183      __regPriMask = (priMask);
;;;184    }
000004  4770              BX       lr
;;;185    
                          ENDP


                          AREA ||i.bsp_CheckRunTime||, CODE, READONLY, ALIGN=2

                  bsp_CheckRunTime PROC
;;;423    */
;;;424    int32_t bsp_CheckRunTime(int32_t _LastTime)
000000  b570              PUSH     {r4-r6,lr}
;;;425    {
000002  4604              MOV      r4,r0
;;;426    	int32_t now_time;
;;;427    	int32_t time_diff;
;;;428    
;;;429    	DISABLE_INT();  	/* 关中断 */
000004  2001              MOVS     r0,#1
000006  f7fffffe          BL       __set_PRIMASK
;;;430    
;;;431    	now_time = g_iRunTime;	/* 这个变量在Systick中断中被改写，因此需要关中断进行保护 */
00000a  4807              LDR      r0,|L5.40|
00000c  6806              LDR      r6,[r0,#0]  ; g_iRunTime
;;;432    
;;;433    	ENABLE_INT();  		/* 开中断 */
00000e  2000              MOVS     r0,#0
000010  f7fffffe          BL       __set_PRIMASK
;;;434    	
;;;435    	if (now_time >= _LastTime)
000014  42a6              CMP      r6,r4
000016  db01              BLT      |L5.28|
;;;436    	{
;;;437    		time_diff = now_time - _LastTime;
000018  1b35              SUBS     r5,r6,r4
00001a  e003              B        |L5.36|
                  |L5.28|
;;;438    	}
;;;439    	else
;;;440    	{
;;;441    		time_diff = 0x7FFFFFFF - _LastTime + now_time;
00001c  f06f4000          MVN      r0,#0x80000000
000020  1b00              SUBS     r0,r0,r4
000022  1985              ADDS     r5,r0,r6
                  |L5.36|
;;;442    	}
;;;443    
;;;444    	return time_diff;
000024  4628              MOV      r0,r5
;;;445    }
000026  bd70              POP      {r4-r6,pc}
;;;446    
                          ENDP

                  |L5.40|
                          DCD      g_iRunTime

                          AREA ||i.bsp_CheckTimer||, CODE, READONLY, ALIGN=2

                  bsp_CheckTimer PROC
;;;376    */
;;;377    uint8_t bsp_CheckTimer(uint8_t _id)
000000  4601              MOV      r1,r0
;;;378    {
;;;379    	if (_id >= TMR_COUNT)
000002  2904              CMP      r1,#4
000004  db01              BLT      |L6.10|
;;;380    	{
;;;381    		return 0;
000006  2000              MOVS     r0,#0
                  |L6.8|
;;;382    	}
;;;383    
;;;384    	if (s_tTmr[_id].Flag == 1)
;;;385    	{
;;;386    		s_tTmr[_id].Flag = 0;
;;;387    		return 1;
;;;388    	}
;;;389    	else
;;;390    	{
;;;391    		return 0;
;;;392    	}
;;;393    }
000008  4770              BX       lr
                  |L6.10|
00000a  eb010041          ADD      r0,r1,r1,LSL #1       ;384
00000e  4a08              LDR      r2,|L6.48|
000010  eb020080          ADD      r0,r2,r0,LSL #2       ;384
000014  7840              LDRB     r0,[r0,#1]            ;384
000016  2801              CMP      r0,#1                 ;384
000018  d108              BNE      |L6.44|
00001a  2000              MOVS     r0,#0                 ;386
00001c  eb010241          ADD      r2,r1,r1,LSL #1       ;386
000020  4b03              LDR      r3,|L6.48|
000022  eb030282          ADD      r2,r3,r2,LSL #2       ;386
000026  7050              STRB     r0,[r2,#1]            ;386
000028  2001              MOVS     r0,#1                 ;387
00002a  e7ed              B        |L6.8|
                  |L6.44|
00002c  2000              MOVS     r0,#0                 ;391
00002e  e7eb              B        |L6.8|
;;;394    
                          ENDP

                  |L6.48|
                          DCD      s_tTmr

                          AREA ||i.bsp_DelayMS||, CODE, READONLY, ALIGN=2

                  bsp_DelayMS PROC
;;;203    */
;;;204    void bsp_DelayMS(uint32_t n)
000000  b510              PUSH     {r4,lr}
;;;205    {
000002  4604              MOV      r4,r0
;;;206    	if (n == 0)
000004  b904              CBNZ     r4,|L7.8|
                  |L7.6|
;;;207    	{
;;;208    		return;
;;;209    	}
;;;210    	else if (n == 1)
;;;211    	{
;;;212    		n = 2;
;;;213    	}
;;;214    
;;;215    	DISABLE_INT();  			/* 关中断 */
;;;216    
;;;217    	s_uiDelayCount = n;
;;;218    	s_ucTimeOutFlag = 0;
;;;219    
;;;220    	ENABLE_INT();  				/* 开中断 */
;;;221    
;;;222    	while (1)
;;;223    	{
;;;224    		bsp_Idle();				/* CPU空闲执行的操作， 见 bsp.c 和 bsp.h 文件 */
;;;225    
;;;226    		/*
;;;227    			等待延迟时间到
;;;228    			注意：编译器认为 s_ucTimeOutFlag = 0，所以可能优化错误，因此 s_ucTimeOutFlag 变量必须申明为 volatile
;;;229    		*/
;;;230    		if (s_ucTimeOutFlag == 1)
;;;231    		{
;;;232    			break;
;;;233    		}
;;;234    	}
;;;235    }
000006  bd10              POP      {r4,pc}
                  |L7.8|
000008  2c01              CMP      r4,#1                 ;210
00000a  d100              BNE      |L7.14|
00000c  2402              MOVS     r4,#2                 ;212
                  |L7.14|
00000e  2001              MOVS     r0,#1                 ;215
000010  f7fffffe          BL       __set_PRIMASK
000014  4809              LDR      r0,|L7.60|
000016  6004              STR      r4,[r0,#0]            ;217  ; s_uiDelayCount
000018  2000              MOVS     r0,#0                 ;218
00001a  4909              LDR      r1,|L7.64|
00001c  7008              STRB     r0,[r1,#0]            ;218
00001e  f7fffffe          BL       __set_PRIMASK
000022  e006              B        |L7.50|
                  |L7.36|
000024  f7fffffe          BL       bsp_Idle
000028  4805              LDR      r0,|L7.64|
00002a  7800              LDRB     r0,[r0,#0]            ;230  ; s_ucTimeOutFlag
00002c  2801              CMP      r0,#1                 ;230
00002e  d100              BNE      |L7.50|
000030  e000              B        |L7.52|
                  |L7.50|
000032  e7f7              B        |L7.36|
                  |L7.52|
000034  bf00              NOP                            ;232
000036  bf00              NOP      
000038  e7e5              B        |L7.6|
;;;236    
                          ENDP

00003a  0000              DCW      0x0000
                  |L7.60|
                          DCD      s_uiDelayCount
                  |L7.64|
                          DCD      s_ucTimeOutFlag

                          AREA ||i.bsp_DelayUS||, CODE, READONLY, ALIGN=2

                  bsp_DelayUS PROC
;;;244    */
;;;245    void bsp_DelayUS(uint32_t n)
000000  b5f0              PUSH     {r4-r7,lr}
;;;246    {
000002  4603              MOV      r3,r0
;;;247        uint32_t ticks;
;;;248        uint32_t told;
;;;249        uint32_t tnow;
;;;250        uint32_t tcnt = 0;
000004  2200              MOVS     r2,#0
;;;251        uint32_t reload;
;;;252           
;;;253    	reload = SysTick->LOAD;                
000006  f04f26e0          MOV      r6,#0xe000e000
00000a  6975              LDR      r5,[r6,#0x14]
;;;254        ticks = n * (SystemCoreClock / 1000000);	 /* 需要的节拍数 */  
00000c  4e0f              LDR      r6,|L8.76|
00000e  6836              LDR      r6,[r6,#0]  ; SystemCoreClock
000010  4f0f              LDR      r7,|L8.80|
000012  fbb6f6f7          UDIV     r6,r6,r7
000016  fb06f403          MUL      r4,r6,r3
;;;255        
;;;256        tcnt = 0;
00001a  bf00              NOP      
;;;257        told = SysTick->VAL;             /* 刚进入时的计数器值 */
00001c  f04f26e0          MOV      r6,#0xe000e000
000020  69b1              LDR      r1,[r6,#0x18]
;;;258    
;;;259        while (1)
000022  e010              B        |L8.70|
                  |L8.36|
;;;260        {
;;;261            tnow = SysTick->VAL;    
000024  f04f26e0          MOV      r6,#0xe000e000
000028  69b0              LDR      r0,[r6,#0x18]
;;;262            if (tnow != told)
00002a  4288              CMP      r0,r1
00002c  d00b              BEQ      |L8.70|
;;;263            {    
;;;264                /* SYSTICK是一个递减的计数器 */    
;;;265                if (tnow < told)
00002e  4288              CMP      r0,r1
000030  d202              BCS      |L8.56|
;;;266                {
;;;267                    tcnt += told - tnow;    
000032  1a0e              SUBS     r6,r1,r0
000034  4432              ADD      r2,r2,r6
000036  e002              B        |L8.62|
                  |L8.56|
;;;268                }
;;;269                /* 重新装载递减 */
;;;270                else
;;;271                {
;;;272                    tcnt += reload - tnow + told;    
000038  1a2e              SUBS     r6,r5,r0
00003a  440e              ADD      r6,r6,r1
00003c  4432              ADD      r2,r2,r6
                  |L8.62|
;;;273                }        
;;;274                told = tnow;
00003e  4601              MOV      r1,r0
;;;275    
;;;276                /* 时间超过/等于要延迟的时间,则退出 */
;;;277                if (tcnt >= ticks)
000040  42a2              CMP      r2,r4
000042  d300              BCC      |L8.70|
;;;278                {
;;;279                	break;
000044  e000              B        |L8.72|
                  |L8.70|
000046  e7ed              B        |L8.36|
                  |L8.72|
000048  bf00              NOP      
;;;280                }
;;;281            }  
;;;282        }
;;;283    } 
00004a  bdf0              POP      {r4-r7,pc}
;;;284    
                          ENDP

                  |L8.76|
                          DCD      SystemCoreClock
                  |L8.80|
                          DCD      0x000f4240

                          AREA ||i.bsp_GetRunTime||, CODE, READONLY, ALIGN=2

                  bsp_GetRunTime PROC
;;;402    */
;;;403    int32_t bsp_GetRunTime(void)
000000  b510              PUSH     {r4,lr}
;;;404    {
;;;405    	int32_t runtime;
;;;406    
;;;407    	DISABLE_INT();  	/* 关中断 */
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       __set_PRIMASK
;;;408    
;;;409    	runtime = g_iRunTime;	/* 这个变量在Systick中断中被改写，因此需要关中断进行保护 */
000008  4803              LDR      r0,|L9.24|
00000a  6804              LDR      r4,[r0,#0]  ; g_iRunTime
;;;410    
;;;411    	ENABLE_INT();  		/* 开中断 */
00000c  2000              MOVS     r0,#0
00000e  f7fffffe          BL       __set_PRIMASK
;;;412    
;;;413    	return runtime;
000012  4620              MOV      r0,r4
;;;414    }
000014  bd10              POP      {r4,pc}
;;;415    
                          ENDP

000016  0000              DCW      0x0000
                  |L9.24|
                          DCD      g_iRunTime

                          AREA ||i.bsp_InitHardTimer||, CODE, READONLY, ALIGN=2

                  bsp_InitHardTimer PROC
;;;469    #if defined (USE_TIM2) || defined (USE_TIM3)  || defined (USE_TIM4)	|| defined (USE_TIM5)
;;;470    void bsp_InitHardTimer(void)
000000  b57f              PUSH     {r0-r6,lr}
;;;471    {
;;;472    	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
;;;473    	uint32_t usPeriod;
;;;474    	uint16_t usPrescaler;
;;;475    	uint32_t uiTIMxCLK;
;;;476    
;;;477      	/* 使能TIM时钟 */
;;;478    	RCC_APB1PeriphClockCmd(TIM_HARD_RCC, ENABLE);
000002  2101              MOVS     r1,#1
000004  4608              MOV      r0,r1
000006  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;479    
;;;480        /*-----------------------------------------------------------------------
;;;481    		system_stm32f4xx.c 文件中 void SetSysClock(void) 函数对时钟的配置如下：
;;;482    
;;;483    		HCLK = SYSCLK / 1     (AHB1Periph)
;;;484    		PCLK2 = HCLK / 2      (APB2Periph)
;;;485    		PCLK1 = HCLK / 4      (APB1Periph)
;;;486    
;;;487    		因为APB1 prescaler != 1, 所以 APB1上的TIMxCLK = PCLK1 x 2 = SystemCoreClock / 2;
;;;488    		因为APB2 prescaler != 1, 所以 APB2上的TIMxCLK = PCLK2 x 2 = SystemCoreClock;
;;;489    
;;;490    		APB1 定时器有 TIM2, TIM3 ,TIM4, TIM5, TIM6, TIM7, TIM12, TIM13,TIM14
;;;491    		APB2 定时器有 TIM1, TIM8 ,TIM9, TIM10, TIM11
;;;492    
;;;493    	----------------------------------------------------------------------- */
;;;494    	uiTIMxCLK = SystemCoreClock / 2;
00000a  4815              LDR      r0,|L10.96|
00000c  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
00000e  0846              LSRS     r6,r0,#1
;;;495    
;;;496    	usPrescaler = uiTIMxCLK / 1000000 ;	/* 分频到周期 1us */
000010  4814              LDR      r0,|L10.100|
000012  fbb6f0f0          UDIV     r0,r6,r0
000016  b285              UXTH     r5,r0
;;;497    	
;;;498    #if defined (USE_TIM2) || defined (USE_TIM5) 
;;;499    	//usPeriod = 0xFFFFFFFF;	/* 407支持32位定时器 */
;;;500    	usPeriod = 0xFFFF;	/* 103支持16位 */
000018  f64f74ff          MOV      r4,#0xffff
;;;501    #else
;;;502    	usPeriod = 0xFFFF;
;;;503    #endif
;;;504    	/* Time base configuration */
;;;505    	TIM_TimeBaseStructure.TIM_Period = usPeriod;
00001c  f8ad4008          STRH     r4,[sp,#8]
;;;506    	TIM_TimeBaseStructure.TIM_Prescaler = usPrescaler;
000020  f8ad5004          STRH     r5,[sp,#4]
;;;507    	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
000024  2000              MOVS     r0,#0
000026  f8ad000a          STRH     r0,[sp,#0xa]
;;;508    	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
00002a  f8ad0006          STRH     r0,[sp,#6]
;;;509    
;;;510    	TIM_TimeBaseInit(TIM_HARD, &TIM_TimeBaseStructure);
00002e  a901              ADD      r1,sp,#4
000030  f04f4080          MOV      r0,#0x40000000
000034  f7fffffe          BL       TIM_TimeBaseInit
;;;511    
;;;512    	//TIM_ARRPreloadConfig(TIMx, ENABLE);
;;;513    
;;;514    	/* TIMx enable counter */
;;;515    	TIM_Cmd(TIM_HARD, ENABLE);
000038  2101              MOVS     r1,#1
00003a  0788              LSLS     r0,r1,#30
00003c  f7fffffe          BL       TIM_Cmd
;;;516    
;;;517    	/* 配置TIM定时中断 (Update) */
;;;518    	{
;;;519    		NVIC_InitTypeDef NVIC_InitStructure;	/* 中断结构体在 misc.h 中定义 */
;;;520    
;;;521    		NVIC_InitStructure.NVIC_IRQChannel = TIM_HARD_IRQn;
000040  201c              MOVS     r0,#0x1c
000042  f88d0000          STRB     r0,[sp,#0]
;;;522    
;;;523    		NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 4;	/* 比串口优先级低 */
000046  2004              MOVS     r0,#4
000048  f88d0001          STRB     r0,[sp,#1]
;;;524    		NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
00004c  2000              MOVS     r0,#0
00004e  f88d0002          STRB     r0,[sp,#2]
;;;525    		NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
000052  2001              MOVS     r0,#1
000054  f88d0003          STRB     r0,[sp,#3]
;;;526    		NVIC_Init(&NVIC_InitStructure);
000058  4668              MOV      r0,sp
00005a  f7fffffe          BL       NVIC_Init
;;;527    	}
;;;528    }
00005e  bd7f              POP      {r0-r6,pc}
;;;529    
                          ENDP

                  |L10.96|
                          DCD      SystemCoreClock
                  |L10.100|
                          DCD      0x000f4240

                          AREA ||i.bsp_InitTimer||, CODE, READONLY, ALIGN=2

                  bsp_InitTimer PROC
;;;90     */
;;;91     void bsp_InitTimer(void)
000000  b570              PUSH     {r4-r6,lr}
;;;92     {
;;;93     	uint8_t i;
;;;94     
;;;95     	/* 清零所有的软件定时器 */
;;;96     	for (i = 0; i < TMR_COUNT; i++)
000002  2400              MOVS     r4,#0
000004  e016              B        |L11.52|
                  |L11.6|
;;;97     	{
;;;98     		s_tTmr[i].Count = 0;
000006  2000              MOVS     r0,#0
000008  eb040144          ADD      r1,r4,r4,LSL #1
00000c  4a20              LDR      r2,|L11.144|
00000e  eb020181          ADD      r1,r2,r1,LSL #2
000012  6048              STR      r0,[r1,#4]
;;;99     		s_tTmr[i].PreLoad = 0;
000014  eb040144          ADD      r1,r4,r4,LSL #1
000018  eb020181          ADD      r1,r2,r1,LSL #2
00001c  6088              STR      r0,[r1,#8]
;;;100    		s_tTmr[i].Flag = 0;
00001e  eb040144          ADD      r1,r4,r4,LSL #1
000022  eb020181          ADD      r1,r2,r1,LSL #2
000026  7048              STRB     r0,[r1,#1]
;;;101    		s_tTmr[i].Mode = TMR_ONCE_MODE;	/* 缺省是1次性工作模式 */
000028  eb040144          ADD      r1,r4,r4,LSL #1
00002c  f8020021          STRB     r0,[r2,r1,LSL #2]
000030  1c60              ADDS     r0,r4,#1              ;96
000032  b2c4              UXTB     r4,r0                 ;96
                  |L11.52|
000034  2c04              CMP      r4,#4                 ;96
000036  dbe6              BLT      |L11.6|
;;;102    	}
;;;103    
;;;104    	/*
;;;105    		配置systic中断周期为1ms，并启动systick中断。
;;;106    
;;;107        	SystemCoreClock 是固件中定义的系统内核时钟，对于STM32F4XX,一般为 168MHz
;;;108    
;;;109        	SysTick_Config() 函数的形参表示内核时钟多少个周期后触发一次Systick定时中断.
;;;110    	    	-- SystemCoreClock / 1000  表示定时频率为 1000Hz， 也就是定时周期为  1ms
;;;111    	    	-- SystemCoreClock / 500   表示定时频率为 500Hz，  也就是定时周期为  2ms
;;;112    	    	-- SystemCoreClock / 2000  表示定时频率为 2000Hz， 也就是定时周期为  500us
;;;113    
;;;114        	对于常规的应用，我们一般取定时周期1ms。对于低速CPU或者低功耗应用，可以设置定时周期为 10ms
;;;115        */
;;;116    	SysTick_Config(SystemCoreClock / 1000);
000038  4816              LDR      r0,|L11.148|
00003a  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
00003c  f44f727a          MOV      r2,#0x3e8
000040  fbb0f1f2          UDIV     r1,r0,r2
000044  f1b17f80          CMP      r1,#0x1000000
000048  d300              BCC      |L11.76|
00004a  e01d              B        |L11.136|
                  |L11.76|
00004c  f021407f          BIC      r0,r1,#0xff000000
000050  1e40              SUBS     r0,r0,#1
000052  f04f22e0          MOV      r2,#0xe000e000
000056  6150              STR      r0,[r2,#0x14]
000058  1750              ASRS     r0,r2,#29
00005a  220f              MOVS     r2,#0xf
00005c  2800              CMP      r0,#0
00005e  da07              BGE      |L11.112|
000060  0713              LSLS     r3,r2,#28
000062  0e1e              LSRS     r6,r3,#24
000064  4b0c              LDR      r3,|L11.152|
000066  f000050f          AND      r5,r0,#0xf
00006a  1f2d              SUBS     r5,r5,#4
00006c  555e              STRB     r6,[r3,r5]
00006e  e003              B        |L11.120|
                  |L11.112|
000070  0713              LSLS     r3,r2,#28
000072  0e1d              LSRS     r5,r3,#24
000074  4b09              LDR      r3,|L11.156|
000076  541d              STRB     r5,[r3,r0]
                  |L11.120|
000078  bf00              NOP      
00007a  2000              MOVS     r0,#0
00007c  f04f22e0          MOV      r2,#0xe000e000
000080  6190              STR      r0,[r2,#0x18]
000082  2007              MOVS     r0,#7
000084  6110              STR      r0,[r2,#0x10]
000086  bf00              NOP      
                  |L11.136|
;;;117    	
;;;118    #if defined (USE_TIM2) || defined (USE_TIM3)  || defined (USE_TIM4)	|| defined (USE_TIM5)
;;;119    	bsp_InitHardTimer();
000088  f7fffffe          BL       bsp_InitHardTimer
;;;120    #endif
;;;121    }
00008c  bd70              POP      {r4-r6,pc}
;;;122    
                          ENDP

00008e  0000              DCW      0x0000
                  |L11.144|
                          DCD      s_tTmr
                  |L11.148|
                          DCD      SystemCoreClock
                  |L11.152|
                          DCD      0xe000ed18
                  |L11.156|
                          DCD      0xe000e400

                          AREA ||i.bsp_SoftTimerDec||, CODE, READONLY, ALIGN=1

                  bsp_SoftTimerDec PROC
;;;177    */
;;;178    static void bsp_SoftTimerDec(SOFT_TMR *_tmr)
000000  6841              LDR      r1,[r0,#4]
;;;179    {
;;;180    	if (_tmr->Count > 0)
000002  b151              CBZ      r1,|L12.26|
;;;181    	{
;;;182    		/* 如果定时器变量减到1则设置定时器到达标志 */
;;;183    		if (--_tmr->Count == 0)
000004  6841              LDR      r1,[r0,#4]
000006  1e49              SUBS     r1,r1,#1
000008  6041              STR      r1,[r0,#4]
00000a  b931              CBNZ     r1,|L12.26|
;;;184    		{
;;;185    			_tmr->Flag = 1;
00000c  2101              MOVS     r1,#1
00000e  7041              STRB     r1,[r0,#1]
;;;186    
;;;187    			/* 如果是自动模式，则自动重装计数器 */
;;;188    			if(_tmr->Mode == TMR_AUTO_MODE)
000010  7801              LDRB     r1,[r0,#0]
000012  2901              CMP      r1,#1
000014  d101              BNE      |L12.26|
;;;189    			{
;;;190    				_tmr->Count = _tmr->PreLoad;
000016  6881              LDR      r1,[r0,#8]
000018  6041              STR      r1,[r0,#4]
                  |L12.26|
;;;191    			}
;;;192    		}
;;;193    	}
;;;194    }
00001a  4770              BX       lr
;;;195    
                          ENDP


                          AREA ||i.bsp_StartAutoTimer||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  bsp_StartAutoTimer PROC
;;;322    */
;;;323    void bsp_StartAutoTimer(uint8_t _id, uint32_t _period)
000000  b570              PUSH     {r4-r6,lr}
;;;324    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;325    	if (_id >= TMR_COUNT)
000006  2c04              CMP      r4,#4
000008  db06              BLT      |L13.24|
;;;326    	{
;;;327    		/* 打印出错的源代码文件名、函数名称 */
;;;328    		BSP_Printf("Error: file %s, function %s()\r\n", __FILE__, __FUNCTION__);
00000a  4a12              LDR      r2,|L13.84|
00000c  a112              ADR      r1,|L13.88|
00000e  a01a              ADR      r0,|L13.120|
000010  f7fffffe          BL       __2printf
;;;329    		while(1); /* 参数异常，死机等待看门狗复位 */
000014  bf00              NOP      
                  |L13.22|
000016  e7fe              B        |L13.22|
                  |L13.24|
;;;330    	}
;;;331    
;;;332    	DISABLE_INT();  		/* 关中断 */
000018  2001              MOVS     r0,#1
00001a  f7fffffe          BL       __set_PRIMASK
;;;333    
;;;334    	s_tTmr[_id].Count = _period;			/* 实时计数器初值 */
00001e  eb040044          ADD      r0,r4,r4,LSL #1
000022  491d              LDR      r1,|L13.152|
000024  eb010080          ADD      r0,r1,r0,LSL #2
000028  6045              STR      r5,[r0,#4]
;;;335    	s_tTmr[_id].PreLoad = _period;		/* 计数器自动重装值，仅自动模式起作用 */
00002a  eb040044          ADD      r0,r4,r4,LSL #1
00002e  eb010080          ADD      r0,r1,r0,LSL #2
000032  6085              STR      r5,[r0,#8]
;;;336    	s_tTmr[_id].Flag = 0;				/* 定时时间到标志 */
000034  2000              MOVS     r0,#0
000036  eb040144          ADD      r1,r4,r4,LSL #1
00003a  4a17              LDR      r2,|L13.152|
00003c  eb020181          ADD      r1,r2,r1,LSL #2
000040  7048              STRB     r0,[r1,#1]
;;;337    	s_tTmr[_id].Mode = TMR_AUTO_MODE;	/* 自动工作模式 */
000042  2001              MOVS     r0,#1
000044  eb040144          ADD      r1,r4,r4,LSL #1
000048  f8020021          STRB     r0,[r2,r1,LSL #2]
;;;338    
;;;339    	ENABLE_INT();  			/* 开中断 */
00004c  2000              MOVS     r0,#0
00004e  f7fffffe          BL       __set_PRIMASK
;;;340    }
000052  bd70              POP      {r4-r6,pc}
;;;341    
                          ENDP

                  |L13.84|
                          DCD      |symbol_number.53|
                  |L13.88|
000058  2e2e5c2e          DCB      "..\\..\\User\\bsp\\src\\bsp_timer.c",0
00005c  2e5c5573
000060  65725c62
000064  73705c73
000068  72635c62
00006c  73705f74
000070  696d6572
000074  2e6300  
000077  00                DCB      0
                  |L13.120|
000078  4572726f          DCB      "Error: file %s, function %s()\r\n",0
00007c  723a2066
000080  696c6520
000084  25732c20
000088  66756e63
00008c  74696f6e
000090  20257328
000094  290d0a00
                  |L13.152|
                          DCD      s_tTmr

                          AREA ||i.bsp_StartHardTimer||, CODE, READONLY, ALIGN=2

                  bsp_StartHardTimer PROC
;;;542    */
;;;543    void bsp_StartHardTimer(uint8_t _CC, uint32_t _uiTimeOut, void * _pCallBack)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;544    {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
;;;545        uint32_t cnt_now;
;;;546        uint32_t cnt_tar;
;;;547    
;;;548        /*
;;;549            执行下面这个语句，时长 = 18us (通过逻辑分析仪测量IO翻转)
;;;550            bsp_StartTimer2(3, 500, (void *)test1);
;;;551        */
;;;552        if (_uiTimeOut < 5)
00000a  2f05              CMP      r7,#5
00000c  d300              BCC      |L14.16|
;;;553        {
;;;554            ;
;;;555        }
;;;556        else
;;;557        {
;;;558            _uiTimeOut -= 5;
00000e  1f7f              SUBS     r7,r7,#5
                  |L14.16|
;;;559        }
;;;560    
;;;561        cnt_now = TIM_GetCounter(TIM_HARD);    	/* 读取当前的计数器值 */
000010  f04f4080          MOV      r0,#0x40000000
000014  f7fffffe          BL       TIM_GetCounter
000018  4680              MOV      r8,r0
;;;562        cnt_tar = cnt_now + _uiTimeOut;			/* 计算捕获的计数器值 */
00001a  eb080607          ADD      r6,r8,r7
;;;563        if (_CC == 1)
00001e  2c01              CMP      r4,#1
000020  d10f              BNE      |L14.66|
;;;564        {
;;;565            s_TIM_CallBack1 = (void (*)(void))_pCallBack;
000022  4825              LDR      r0,|L14.184|
000024  6005              STR      r5,[r0,#0]  ; s_TIM_CallBack1
;;;566    
;;;567            TIM_SetCompare1(TIM_HARD, cnt_tar);      	/* 设置捕获比较计数器CC1 */
000026  b2b1              UXTH     r1,r6
000028  07a0              LSLS     r0,r4,#30
00002a  f7fffffe          BL       TIM_SetCompare1
;;;568            TIM_ClearITPendingBit(TIM_HARD, TIM_IT_CC1);
00002e  2102              MOVS     r1,#2
000030  0748              LSLS     r0,r1,#29
000032  f7fffffe          BL       TIM_ClearITPendingBit
;;;569    		TIM_ITConfig(TIM_HARD, TIM_IT_CC1, ENABLE);	/* 使能CC1中断 */
000036  2201              MOVS     r2,#1
000038  2102              MOVS     r1,#2
00003a  0748              LSLS     r0,r1,#29
00003c  f7fffffe          BL       TIM_ITConfig
000040  e038              B        |L14.180|
                  |L14.66|
;;;570    
;;;571        }
;;;572        else if (_CC == 2)
000042  2c02              CMP      r4,#2
000044  d10f              BNE      |L14.102|
;;;573        {
;;;574    		s_TIM_CallBack2 = (void (*)(void))_pCallBack;
000046  481d              LDR      r0,|L14.188|
000048  6005              STR      r5,[r0,#0]  ; s_TIM_CallBack2
;;;575    
;;;576            TIM_SetCompare2(TIM_HARD, cnt_tar);      	/* 设置捕获比较计数器CC2 */
00004a  b2b1              UXTH     r1,r6
00004c  0760              LSLS     r0,r4,#29
00004e  f7fffffe          BL       TIM_SetCompare2
;;;577    		TIM_ClearITPendingBit(TIM_HARD, TIM_IT_CC2);
000052  2104              MOVS     r1,#4
000054  0708              LSLS     r0,r1,#28
000056  f7fffffe          BL       TIM_ClearITPendingBit
;;;578    		TIM_ITConfig(TIM_HARD, TIM_IT_CC2, ENABLE);	/* 使能CC2中断 */
00005a  2201              MOVS     r2,#1
00005c  2104              MOVS     r1,#4
00005e  0708              LSLS     r0,r1,#28
000060  f7fffffe          BL       TIM_ITConfig
000064  e026              B        |L14.180|
                  |L14.102|
;;;579        }
;;;580        else if (_CC == 3)
000066  2c03              CMP      r4,#3
000068  d110              BNE      |L14.140|
;;;581        {
;;;582            s_TIM_CallBack3 = (void (*)(void))_pCallBack;
00006a  4815              LDR      r0,|L14.192|
00006c  6005              STR      r5,[r0,#0]  ; s_TIM_CallBack3
;;;583    
;;;584            TIM_SetCompare3(TIM_HARD, cnt_tar);      	/* 设置捕获比较计数器CC3 */
00006e  b2b1              UXTH     r1,r6
000070  f04f4080          MOV      r0,#0x40000000
000074  f7fffffe          BL       TIM_SetCompare3
;;;585            TIM_ClearITPendingBit(TIM_HARD, TIM_IT_CC3);
000078  2108              MOVS     r1,#8
00007a  06c8              LSLS     r0,r1,#27
00007c  f7fffffe          BL       TIM_ClearITPendingBit
;;;586    		TIM_ITConfig(TIM_HARD, TIM_IT_CC3, ENABLE);	/* 使能CC3中断 */
000080  2201              MOVS     r2,#1
000082  2108              MOVS     r1,#8
000084  06c8              LSLS     r0,r1,#27
000086  f7fffffe          BL       TIM_ITConfig
00008a  e013              B        |L14.180|
                  |L14.140|
;;;587        }
;;;588        else if (_CC == 4)
00008c  2c04              CMP      r4,#4
00008e  d10f              BNE      |L14.176|
;;;589        {
;;;590            s_TIM_CallBack4 = (void (*)(void))_pCallBack;
000090  480c              LDR      r0,|L14.196|
000092  6005              STR      r5,[r0,#0]  ; s_TIM_CallBack4
;;;591    
;;;592            TIM_SetCompare4(TIM_HARD, cnt_tar);      	/* 设置捕获比较计数器CC4 */
000094  b2b1              UXTH     r1,r6
000096  0720              LSLS     r0,r4,#28
000098  f7fffffe          BL       TIM_SetCompare4
;;;593    		TIM_ClearITPendingBit(TIM_HARD, TIM_IT_CC4);
00009c  2110              MOVS     r1,#0x10
00009e  0688              LSLS     r0,r1,#26
0000a0  f7fffffe          BL       TIM_ClearITPendingBit
;;;594    		TIM_ITConfig(TIM_HARD, TIM_IT_CC4, ENABLE);	/* 使能CC4中断 */
0000a4  2201              MOVS     r2,#1
0000a6  2110              MOVS     r1,#0x10
0000a8  0688              LSLS     r0,r1,#26
0000aa  f7fffffe          BL       TIM_ITConfig
0000ae  e001              B        |L14.180|
                  |L14.176|
;;;595        }
;;;596    	else
;;;597        {
;;;598            return;
;;;599        }
;;;600    }
0000b0  e8bd81f0          POP      {r4-r8,pc}
                  |L14.180|
0000b4  bf00              NOP      
0000b6  e7fb              B        |L14.176|
;;;601    #endif
                          ENDP

                  |L14.184|
                          DCD      s_TIM_CallBack1
                  |L14.188|
                          DCD      s_TIM_CallBack2
                  |L14.192|
                          DCD      s_TIM_CallBack3
                  |L14.196|
                          DCD      s_TIM_CallBack4

                          AREA ||i.bsp_StartTimer||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  bsp_StartTimer PROC
;;;294    */
;;;295    void bsp_StartTimer(uint8_t _id, uint32_t _period)
000000  b570              PUSH     {r4-r6,lr}
;;;296    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;297    	if (_id >= TMR_COUNT)
000006  2c04              CMP      r4,#4
000008  db06              BLT      |L15.24|
;;;298    	{
;;;299    		/* 打印出错的源代码文件名、函数名称 */
;;;300    		BSP_Printf("Error: file %s, function %s()\r\n", __FILE__, __FUNCTION__);
00000a  4a11              LDR      r2,|L15.80|
00000c  a111              ADR      r1,|L15.84|
00000e  a019              ADR      r0,|L15.116|
000010  f7fffffe          BL       __2printf
;;;301    		while(1); /* 参数异常，死机等待看门狗复位 */
000014  bf00              NOP      
                  |L15.22|
000016  e7fe              B        |L15.22|
                  |L15.24|
;;;302    	}
;;;303    
;;;304    	DISABLE_INT();  			/* 关中断 */
000018  2001              MOVS     r0,#1
00001a  f7fffffe          BL       __set_PRIMASK
;;;305    
;;;306    	s_tTmr[_id].Count = _period;		/* 实时计数器初值 */
00001e  eb040044          ADD      r0,r4,r4,LSL #1
000022  491c              LDR      r1,|L15.148|
000024  eb010080          ADD      r0,r1,r0,LSL #2
000028  6045              STR      r5,[r0,#4]
;;;307    	s_tTmr[_id].PreLoad = _period;		/* 计数器自动重装值，仅自动模式起作用 */
00002a  eb040044          ADD      r0,r4,r4,LSL #1
00002e  eb010080          ADD      r0,r1,r0,LSL #2
000032  6085              STR      r5,[r0,#8]
;;;308    	s_tTmr[_id].Flag = 0;				/* 定时时间到标志 */
000034  2000              MOVS     r0,#0
000036  eb040144          ADD      r1,r4,r4,LSL #1
00003a  4a16              LDR      r2,|L15.148|
00003c  eb020181          ADD      r1,r2,r1,LSL #2
000040  7048              STRB     r0,[r1,#1]
;;;309    	s_tTmr[_id].Mode = TMR_ONCE_MODE;	/* 1次性工作模式 */
000042  eb040144          ADD      r1,r4,r4,LSL #1
000046  f8020021          STRB     r0,[r2,r1,LSL #2]
;;;310    
;;;311    	ENABLE_INT();  				/* 开中断 */
00004a  f7fffffe          BL       __set_PRIMASK
;;;312    }
00004e  bd70              POP      {r4-r6,pc}
;;;313    
                          ENDP

                  |L15.80|
                          DCD      __FUNCTION__
                  |L15.84|
000054  2e2e5c2e          DCB      "..\\..\\User\\bsp\\src\\bsp_timer.c",0
000058  2e5c5573
00005c  65725c62
000060  73705c73
000064  72635c62
000068  73705f74
00006c  696d6572
000070  2e6300  
000073  00                DCB      0
                  |L15.116|
000074  4572726f          DCB      "Error: file %s, function %s()\r\n",0
000078  723a2066
00007c  696c6520
000080  25732c20
000084  66756e63
000088  74696f6e
00008c  20257328
000090  290d0a00
                  |L15.148|
                          DCD      s_tTmr

                          AREA ||i.bsp_StopTimer||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  bsp_StopTimer PROC
;;;349    */
;;;350    void bsp_StopTimer(uint8_t _id)
000000  b510              PUSH     {r4,lr}
;;;351    {
000002  4604              MOV      r4,r0
;;;352    	if (_id >= TMR_COUNT)
000004  2c04              CMP      r4,#4
000006  db06              BLT      |L16.22|
;;;353    	{
;;;354    		/* 打印出错的源代码文件名、函数名称 */
;;;355    		BSP_Printf("Error: file %s, function %s()\r\n", __FILE__, __FUNCTION__);
000008  4a0e              LDR      r2,|L16.68|
00000a  a10f              ADR      r1,|L16.72|
00000c  a016              ADR      r0,|L16.104|
00000e  f7fffffe          BL       __2printf
;;;356    		while(1); /* 参数异常，死机等待看门狗复位 */
000012  bf00              NOP      
                  |L16.20|
000014  e7fe              B        |L16.20|
                  |L16.22|
;;;357    	}
;;;358    
;;;359    	DISABLE_INT();  	/* 关中断 */
000016  2001              MOVS     r0,#1
000018  f7fffffe          BL       __set_PRIMASK
;;;360    
;;;361    	s_tTmr[_id].Count = 0;				/* 实时计数器初值 */
00001c  2000              MOVS     r0,#0
00001e  eb040144          ADD      r1,r4,r4,LSL #1
000022  4a19              LDR      r2,|L16.136|
000024  eb020181          ADD      r1,r2,r1,LSL #2
000028  6048              STR      r0,[r1,#4]
;;;362    	s_tTmr[_id].Flag = 0;				/* 定时时间到标志 */
00002a  eb040144          ADD      r1,r4,r4,LSL #1
00002e  eb020181          ADD      r1,r2,r1,LSL #2
000032  7048              STRB     r0,[r1,#1]
;;;363    	s_tTmr[_id].Mode = TMR_ONCE_MODE;	/* 自动工作模式 */
000034  eb040144          ADD      r1,r4,r4,LSL #1
000038  f8020021          STRB     r0,[r2,r1,LSL #2]
;;;364    
;;;365    	ENABLE_INT();  		/* 开中断 */
00003c  f7fffffe          BL       __set_PRIMASK
;;;366    }
000040  bd10              POP      {r4,pc}
;;;367    
                          ENDP

000042  0000              DCW      0x0000
                  |L16.68|
                          DCD      |symbol_number.54|
                  |L16.72|
000048  2e2e5c2e          DCB      "..\\..\\User\\bsp\\src\\bsp_timer.c",0
00004c  2e5c5573
000050  65725c62
000054  73705c73
000058  72635c62
00005c  73705f74
000060  696d6572
000064  2e6300  
000067  00                DCB      0
                  |L16.104|
000068  4572726f          DCB      "Error: file %s, function %s()\r\n",0
00006c  723a2066
000070  696c6520
000074  25732c20
000078  66756e63
00007c  74696f6e
000080  20257328
000084  290d0a00
                  |L16.136|
                          DCD      s_tTmr

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  s_tTmr
                          %        48

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __FUNCTION__
000000  6273705f          DCB      0x62,0x73,0x70,0x5f
000004  53746172          DCB      0x53,0x74,0x61,0x72
000008  7454696d          DCB      0x74,0x54,0x69,0x6d
00000c  657200            DCB      0x65,0x72,0x00
                  |symbol_number.53|
00000f  62                DCB      0x62
000010  73705f53          DCB      0x73,0x70,0x5f,0x53
000014  74617274          DCB      0x74,0x61,0x72,0x74
000018  4175746f          DCB      0x41,0x75,0x74,0x6f
00001c  54696d65          DCB      0x54,0x69,0x6d,0x65
000020  7200              DCB      0x72,0x00
                  |symbol_number.54|
000022  6273              DCB      0x62,0x73
000024  705f5374          DCB      0x70,0x5f,0x53,0x74
000028  6f705469          DCB      0x6f,0x70,0x54,0x69
00002c  6d657200          DCB      0x6d,0x65,0x72,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  s_uiDelayCount
                          DCD      0x00000000
                  s_ucTimeOutFlag
000004  00000000          DCB      0x00,0x00,0x00,0x00
                  g_iRunTime
                          DCD      0x00000000
                  s_TIM_CallBack1
                          DCD      0x00000000
                  s_TIM_CallBack2
                          DCD      0x00000000
                  s_TIM_CallBack3
                          DCD      0x00000000
                  s_TIM_CallBack4
                          DCD      0x00000000
                  s_count
00001c  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp\\src\\bsp_timer.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___11_bsp_timer_c_95bb07ef____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___11_bsp_timer_c_95bb07ef____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___11_bsp_timer_c_95bb07ef____REVSH|
#line 128
|__asm___11_bsp_timer_c_95bb07ef____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
